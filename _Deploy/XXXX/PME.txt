
SET DEFINE OFF;
/


-- takto umožníme nastavování sloupců typu date a number
ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD HH24:MI:SS';
ALTER SESSION SET NLS_NUMERIC_CHARACTERS = '. ';
/
-- 1: tabulky;
ALTER TABLE "PMEACCEPTEDPARAMS" DROP COLUMN "COMMMODITYPRICEST";
ALTER TABLE "PMEACCEPTEDPARAMS_C" DROP COLUMN "COMMMODITYPRICEST";
ALTER TABLE "PMEMMPRODUCT" ADD ("ACEMAX" NUMBER(38, 15));
ALTER TABLE "PMEMMPRODUCT_C" ADD ("ACEMAX" NUMBER(38, 15));
ALTER TABLE "PMEMMPRODUCT" ADD ("CONSUMPTIONTDDMAX" NUMBER(38, 15));
ALTER TABLE "PMEMMPRODUCT_C" ADD ("CONSUMPTIONTDDMAX" NUMBER(38, 15));
ALTER TABLE "PMEPRICINGROOT" DROP COLUMN "AUTHOR";
ALTER TABLE "PMEPRICINGROOT_C" DROP COLUMN "AUTHOR";
-- 2: triggery a pohledy;

CREATE OR REPLACE TRIGGER "PMEACCEPTEDPARAMS_U"
BEFORE INSERT OR UPDATE ON "PMEACCEPTEDPARAMS"
FOR EACH ROW
DECLARE
	trans_id number;
BEGIN
	ee_get_transaction_id(trans_id);
	:new.EE_TRANS_ID := trans_id;
	INSERT INTO "PMEACCEPTEDPARAMS_C" t1(EE_CHANGE_ID, "EE_ITEM_ID", EE_CHANGE_TYPE, EE_TRANS_ID, t1."COMMMODITYPRICE", t1."COMMMODITYPRICE1T", t1."CURRENCYFK", t1."DOUBLETARIFFTYPEDESCRIPTION", t1."FXEXPECTED", t1."FXRORAC", t1."HTPRICE", t1."ISSTEPON", t1."LIQUIDITYCOSTMTM", t1."LIQUIDITYCOSTSE", t1."LTPRICE", t1."MONTHTRANCHEALLOWED", t1."PVOLEXPECTED", t1."PVOLRORAC", t1."QYEARTRANCHEALLOWED", t1."RESIDUALSHAPERISKEXPECTED", t1."RESIDUALSHAPERISKRORAC", t1."STEPONTYPE", t1."STPRICE", t1."TARIFFSETFK", t1."YEARTRANCHEALLOWED", t1."SYS_VER")
	VALUES ("PMEACCEPTEDPARAMS_S".nextval, :new."ID", 'u', trans_id, :new."COMMMODITYPRICE", :new."COMMMODITYPRICE1T", :new."CURRENCYFK", :new."DOUBLETARIFFTYPEDESCRIPTION", :new."FXEXPECTED", :new."FXRORAC", :new."HTPRICE", :new."ISSTEPON", :new."LIQUIDITYCOSTMTM", :new."LIQUIDITYCOSTSE", :new."LTPRICE", :new."MONTHTRANCHEALLOWED", :new."PVOLEXPECTED", :new."PVOLRORAC", :new."QYEARTRANCHEALLOWED", :new."RESIDUALSHAPERISKEXPECTED", :new."RESIDUALSHAPERISKRORAC", :new."STEPONTYPE", :new."STPRICE", :new."TARIFFSETFK", :new."YEARTRANCHEALLOWED", :new."SYS_VER");
END;
/

CREATE OR REPLACE TRIGGER "PMEACCEPTEDPARAMS_D"
BEFORE DELETE ON "PMEACCEPTEDPARAMS"
FOR EACH ROW
DECLARE
	trans_id number;
BEGIN
	ee_get_transaction_id(trans_id);
	INSERT INTO "PMEACCEPTEDPARAMS_C"(EE_CHANGE_ID, "EE_ITEM_ID", EE_CHANGE_TYPE, EE_TRANS_ID)
	VALUES ("PMEACCEPTEDPARAMS_S".nextval, :old."ID", 'd', trans_id);
END;
/
						
CREATE OR REPLACE VIEW "PMEACCEPTEDPARAMS_H" AS
SELECT t1."EE_ITEM_ID" "ID", t1.EE_TRANS_ID EE_TRANS_ID, t1."COMMMODITYPRICE", t1."COMMMODITYPRICE1T", t1."CURRENCYFK", t1."DOUBLETARIFFTYPEDESCRIPTION", t1."FXEXPECTED", t1."FXRORAC", t1."HTPRICE", t1."ISSTEPON", t1."LIQUIDITYCOSTMTM", t1."LIQUIDITYCOSTSE", t1."LTPRICE", t1."MONTHTRANCHEALLOWED", t1."PVOLEXPECTED", t1."PVOLRORAC", t1."QYEARTRANCHEALLOWED", t1."RESIDUALSHAPERISKEXPECTED", t1."RESIDUALSHAPERISKRORAC", t1."STEPONTYPE", t1."STPRICE", t1."TARIFFSETFK", t1."YEARTRANCHEALLOWED", t1."SYS_VER"
FROM
"PMEACCEPTEDPARAMS_C" t1,
(SELECT EE_ITEM_ID, MAX(EE_CHANGE_ID) KEEP (DENSE_RANK FIRST ORDER BY COMMIT_ID desc, EE_CHANGE_ID desc) trans_change_id
  FROM "PMEACCEPTEDPARAMS_C" ti INNER JOIN ee_visible_transactions v ON EE_TRANS_ID = v.id
  GROUP BY EE_ITEM_ID) g
WHERE t1.EE_ITEM_ID=g.EE_ITEM_ID and t1.EE_CHANGE_ID=g.trans_change_id and t1.EE_CHANGE_TYPE <> 'd';
/

CREATE OR REPLACE TRIGGER "PMEACCEPTEDPARAMS_HU"
INSTEAD OF UPDATE 
ON "PMEACCEPTEDPARAMS_H"
FOR EACH ROW
DECLARE
  ex_nonupdatable EXCEPTION;
	PRAGMA EXCEPTION_INIT( ex_nonupdatable, -20001);
BEGIN
	UPDATE "PMEACCEPTEDPARAMS"
	SET "COMMMODITYPRICE" = :new."COMMMODITYPRICE", "COMMMODITYPRICE1T" = :new."COMMMODITYPRICE1T", "CURRENCYFK" = :new."CURRENCYFK", "DOUBLETARIFFTYPEDESCRIPTION" = :new."DOUBLETARIFFTYPEDESCRIPTION", "FXEXPECTED" = :new."FXEXPECTED", "FXRORAC" = :new."FXRORAC", "HTPRICE" = :new."HTPRICE", "ISSTEPON" = :new."ISSTEPON", "LIQUIDITYCOSTMTM" = :new."LIQUIDITYCOSTMTM", "LIQUIDITYCOSTSE" = :new."LIQUIDITYCOSTSE", "LTPRICE" = :new."LTPRICE", "MONTHTRANCHEALLOWED" = :new."MONTHTRANCHEALLOWED", "PVOLEXPECTED" = :new."PVOLEXPECTED", "PVOLRORAC" = :new."PVOLRORAC", "QYEARTRANCHEALLOWED" = :new."QYEARTRANCHEALLOWED", "RESIDUALSHAPERISKEXPECTED" = :new."RESIDUALSHAPERISKEXPECTED", "RESIDUALSHAPERISKRORAC" = :new."RESIDUALSHAPERISKRORAC", "STEPONTYPE" = :new."STEPONTYPE", "STPRICE" = :new."STPRICE", "TARIFFSETFK" = :new."TARIFFSETFK", "YEARTRANCHEALLOWED" = :new."YEARTRANCHEALLOWED", "SYS_VER" = :new."SYS_VER"
	WHERE "ID" = :new."ID" AND EE_TRANS_ID = :new.EE_TRANS_ID;
	IF sql%rowcount <> 1 THEN
		raise_application_error(-20001, 'Pokus o update neplatného řádku, pokud chcete zapisovat do tohoto řádku, načtěte novou verzi dat');
	END IF;
END;
/

CREATE OR REPLACE TRIGGER "PMEACCEPTEDPARAMS_HI"
INSTEAD OF INSERT
ON "PMEACCEPTEDPARAMS_H"
FOR EACH ROW
BEGIN
	INSERT INTO "PMEACCEPTEDPARAMS" t1("ID", t1."COMMMODITYPRICE", t1."COMMMODITYPRICE1T", t1."CURRENCYFK", t1."DOUBLETARIFFTYPEDESCRIPTION", t1."FXEXPECTED", t1."FXRORAC", t1."HTPRICE", t1."ISSTEPON", t1."LIQUIDITYCOSTMTM", t1."LIQUIDITYCOSTSE", t1."LTPRICE", t1."MONTHTRANCHEALLOWED", t1."PVOLEXPECTED", t1."PVOLRORAC", t1."QYEARTRANCHEALLOWED", t1."RESIDUALSHAPERISKEXPECTED", t1."RESIDUALSHAPERISKRORAC", t1."STEPONTYPE", t1."STPRICE", t1."TARIFFSETFK", t1."YEARTRANCHEALLOWED", t1."SYS_VER") VALUES (:new."ID", :new."COMMMODITYPRICE", :new."COMMMODITYPRICE1T", :new."CURRENCYFK", :new."DOUBLETARIFFTYPEDESCRIPTION", :new."FXEXPECTED", :new."FXRORAC", :new."HTPRICE", :new."ISSTEPON", :new."LIQUIDITYCOSTMTM", :new."LIQUIDITYCOSTSE", :new."LTPRICE", :new."MONTHTRANCHEALLOWED", :new."PVOLEXPECTED", :new."PVOLRORAC", :new."QYEARTRANCHEALLOWED", :new."RESIDUALSHAPERISKEXPECTED", :new."RESIDUALSHAPERISKRORAC", :new."STEPONTYPE", :new."STPRICE", :new."TARIFFSETFK", :new."YEARTRANCHEALLOWED", :new."SYS_VER");
END;
/

CREATE OR REPLACE TRIGGER "PMEACCEPTEDPARAMS_HD"
INSTEAD OF DELETE
ON "PMEACCEPTEDPARAMS_H"
FOR EACH ROW
DECLARE
  ex_nonupdatable EXCEPTION;
	PRAGMA EXCEPTION_INIT( ex_nonupdatable, -20001);
BEGIN
	DELETE FROM "PMEACCEPTEDPARAMS"
	WHERE "ID" = :old."ID" AND EE_TRANS_ID = :old.EE_TRANS_ID;
	IF sql%rowcount <> 1 THEN
		raise_application_error(-20001, 'Pokus o update neplatného řádku, pokud chcete zapisovat do tohoto řádku, načtěte novou verzi dat');
	END IF;
END;
/

CREATE OR REPLACE TRIGGER "PMEMMPRODUCT_U"
BEFORE INSERT OR UPDATE ON "PMEMMPRODUCT"
FOR EACH ROW
DECLARE
	trans_id number;
BEGIN
	ee_get_transaction_id(trans_id);
	:new.EE_TRANS_ID := trans_id;
	INSERT INTO "PMEMMPRODUCT_C" t1(EE_CHANGE_ID, "EE_ITEM_ID", EE_CHANGE_TYPE, EE_TRANS_ID, t1."ACEMAX", t1."CONSUMPTIONTDDMAX", t1."ENERGYINTOPOSITION", t1."EXTERNALID", t1."LASTCHANGEDATE", t1."MMMAINPRODUCTFK", t1."MMPRODUCTTYPEFK", t1."NAME", t1."VALIDFROM", t1."VALIDTO", t1."SYS_VER")
	VALUES ("PMEMMPRODUCT_S".nextval, :new."ID", 'u', trans_id, :new."ACEMAX", :new."CONSUMPTIONTDDMAX", :new."ENERGYINTOPOSITION", :new."EXTERNALID", :new."LASTCHANGEDATE", :new."MMMAINPRODUCTFK", :new."MMPRODUCTTYPEFK", :new."NAME", :new."VALIDFROM", :new."VALIDTO", :new."SYS_VER");
END;
/

CREATE OR REPLACE TRIGGER "PMEMMPRODUCT_D"
BEFORE DELETE ON "PMEMMPRODUCT"
FOR EACH ROW
DECLARE
	trans_id number;
BEGIN
	ee_get_transaction_id(trans_id);
	INSERT INTO "PMEMMPRODUCT_C"(EE_CHANGE_ID, "EE_ITEM_ID", EE_CHANGE_TYPE, EE_TRANS_ID)
	VALUES ("PMEMMPRODUCT_S".nextval, :old."ID", 'd', trans_id);
END;
/
						
CREATE OR REPLACE VIEW "PMEMMPRODUCT_H" AS
SELECT t1."EE_ITEM_ID" "ID", t1.EE_TRANS_ID EE_TRANS_ID, t1."ACEMAX", t1."CONSUMPTIONTDDMAX", t1."ENERGYINTOPOSITION", t1."EXTERNALID", t1."LASTCHANGEDATE", t1."MMMAINPRODUCTFK", t1."MMPRODUCTTYPEFK", t1."NAME", t1."VALIDFROM", t1."VALIDTO", t1."SYS_VER"
FROM
"PMEMMPRODUCT_C" t1,
(SELECT EE_ITEM_ID, MAX(EE_CHANGE_ID) KEEP (DENSE_RANK FIRST ORDER BY COMMIT_ID desc, EE_CHANGE_ID desc) trans_change_id
  FROM "PMEMMPRODUCT_C" ti INNER JOIN ee_visible_transactions v ON EE_TRANS_ID = v.id
  GROUP BY EE_ITEM_ID) g
WHERE t1.EE_ITEM_ID=g.EE_ITEM_ID and t1.EE_CHANGE_ID=g.trans_change_id and t1.EE_CHANGE_TYPE <> 'd';
/

CREATE OR REPLACE TRIGGER "PMEMMPRODUCT_HU"
INSTEAD OF UPDATE 
ON "PMEMMPRODUCT_H"
FOR EACH ROW
DECLARE
  ex_nonupdatable EXCEPTION;
	PRAGMA EXCEPTION_INIT( ex_nonupdatable, -20001);
BEGIN
	UPDATE "PMEMMPRODUCT"
	SET "ACEMAX" = :new."ACEMAX", "CONSUMPTIONTDDMAX" = :new."CONSUMPTIONTDDMAX", "ENERGYINTOPOSITION" = :new."ENERGYINTOPOSITION", "EXTERNALID" = :new."EXTERNALID", "LASTCHANGEDATE" = :new."LASTCHANGEDATE", "MMMAINPRODUCTFK" = :new."MMMAINPRODUCTFK", "MMPRODUCTTYPEFK" = :new."MMPRODUCTTYPEFK", "NAME" = :new."NAME", "VALIDFROM" = :new."VALIDFROM", "VALIDTO" = :new."VALIDTO", "SYS_VER" = :new."SYS_VER"
	WHERE "ID" = :new."ID" AND EE_TRANS_ID = :new.EE_TRANS_ID;
	IF sql%rowcount <> 1 THEN
		raise_application_error(-20001, 'Pokus o update neplatného řádku, pokud chcete zapisovat do tohoto řádku, načtěte novou verzi dat');
	END IF;
END;
/

CREATE OR REPLACE TRIGGER "PMEMMPRODUCT_HI"
INSTEAD OF INSERT
ON "PMEMMPRODUCT_H"
FOR EACH ROW
BEGIN
	INSERT INTO "PMEMMPRODUCT" t1("ID", t1."ACEMAX", t1."CONSUMPTIONTDDMAX", t1."ENERGYINTOPOSITION", t1."EXTERNALID", t1."LASTCHANGEDATE", t1."MMMAINPRODUCTFK", t1."MMPRODUCTTYPEFK", t1."NAME", t1."VALIDFROM", t1."VALIDTO", t1."SYS_VER") VALUES (:new."ID", :new."ACEMAX", :new."CONSUMPTIONTDDMAX", :new."ENERGYINTOPOSITION", :new."EXTERNALID", :new."LASTCHANGEDATE", :new."MMMAINPRODUCTFK", :new."MMPRODUCTTYPEFK", :new."NAME", :new."VALIDFROM", :new."VALIDTO", :new."SYS_VER");
END;
/

CREATE OR REPLACE TRIGGER "PMEMMPRODUCT_HD"
INSTEAD OF DELETE
ON "PMEMMPRODUCT_H"
FOR EACH ROW
DECLARE
  ex_nonupdatable EXCEPTION;
	PRAGMA EXCEPTION_INIT( ex_nonupdatable, -20001);
BEGIN
	DELETE FROM "PMEMMPRODUCT"
	WHERE "ID" = :old."ID" AND EE_TRANS_ID = :old.EE_TRANS_ID;
	IF sql%rowcount <> 1 THEN
		raise_application_error(-20001, 'Pokus o update neplatného řádku, pokud chcete zapisovat do tohoto řádku, načtěte novou verzi dat');
	END IF;
END;
/

CREATE OR REPLACE TRIGGER "PMEPRICINGROOT_U"
BEFORE INSERT OR UPDATE ON "PMEPRICINGROOT"
FOR EACH ROW
DECLARE
	trans_id number;
BEGIN
	ee_get_transaction_id(trans_id);
	:new.EE_TRANS_ID := trans_id;
	INSERT INTO "PMEPRICINGROOT_C" t1(EE_CHANGE_ID, "EE_ITEM_ID", EE_CHANGE_TYPE, EE_TRANS_ID, t1."ALLOWEDDEVIATIONPERCENT", t1."ALLOWPRICINGYPLUS3", t1."ISPRICINGACTIVE", t1."LASTAUTHORFK", t1."LASTAUTHORNAME", t1."LASTCHANGE", t1."MAXENERGY4TDDPROFILE", t1."MAXENERGYVARIANT", t1."PRICETOOLLASTAUTHORFK", t1."PRICETOOLLASTAUTHORNAME", t1."PRICETOOLLASTCHANGE", t1."PRICINGACTIVETO", t1."SYS_VER")
	VALUES ("PMEPRICINGROOT_S".nextval, :new."ID", 'u', trans_id, :new."ALLOWEDDEVIATIONPERCENT", :new."ALLOWPRICINGYPLUS3", :new."ISPRICINGACTIVE", :new."LASTAUTHORFK", :new."LASTAUTHORNAME", :new."LASTCHANGE", :new."MAXENERGY4TDDPROFILE", :new."MAXENERGYVARIANT", :new."PRICETOOLLASTAUTHORFK", :new."PRICETOOLLASTAUTHORNAME", :new."PRICETOOLLASTCHANGE", :new."PRICINGACTIVETO", :new."SYS_VER");
END;
/

CREATE OR REPLACE TRIGGER "PMEPRICINGROOT_D"
BEFORE DELETE ON "PMEPRICINGROOT"
FOR EACH ROW
DECLARE
	trans_id number;
BEGIN
	ee_get_transaction_id(trans_id);
	INSERT INTO "PMEPRICINGROOT_C"(EE_CHANGE_ID, "EE_ITEM_ID", EE_CHANGE_TYPE, EE_TRANS_ID)
	VALUES ("PMEPRICINGROOT_S".nextval, :old."ID", 'd', trans_id);
END;
/
						
CREATE OR REPLACE VIEW "PMEPRICINGROOT_H" AS
SELECT t1."EE_ITEM_ID" "ID", t1.EE_TRANS_ID EE_TRANS_ID, t1."ALLOWEDDEVIATIONPERCENT", t1."ALLOWPRICINGYPLUS3", t1."ISPRICINGACTIVE", t1."LASTAUTHORFK", t1."LASTAUTHORNAME", t1."LASTCHANGE", t1."MAXENERGY4TDDPROFILE", t1."MAXENERGYVARIANT", t1."PRICETOOLLASTAUTHORFK", t1."PRICETOOLLASTAUTHORNAME", t1."PRICETOOLLASTCHANGE", t1."PRICINGACTIVETO", t1."SYS_VER"
FROM
"PMEPRICINGROOT_C" t1,
(SELECT EE_ITEM_ID, MAX(EE_CHANGE_ID) KEEP (DENSE_RANK FIRST ORDER BY COMMIT_ID desc, EE_CHANGE_ID desc) trans_change_id
  FROM "PMEPRICINGROOT_C" ti INNER JOIN ee_visible_transactions v ON EE_TRANS_ID = v.id
  GROUP BY EE_ITEM_ID) g
WHERE t1.EE_ITEM_ID=g.EE_ITEM_ID and t1.EE_CHANGE_ID=g.trans_change_id and t1.EE_CHANGE_TYPE <> 'd';
/

CREATE OR REPLACE TRIGGER "PMEPRICINGROOT_HU"
INSTEAD OF UPDATE 
ON "PMEPRICINGROOT_H"
FOR EACH ROW
DECLARE
  ex_nonupdatable EXCEPTION;
	PRAGMA EXCEPTION_INIT( ex_nonupdatable, -20001);
BEGIN
	UPDATE "PMEPRICINGROOT"
	SET "ALLOWEDDEVIATIONPERCENT" = :new."ALLOWEDDEVIATIONPERCENT", "ALLOWPRICINGYPLUS3" = :new."ALLOWPRICINGYPLUS3", "ISPRICINGACTIVE" = :new."ISPRICINGACTIVE", "LASTAUTHORFK" = :new."LASTAUTHORFK", "LASTAUTHORNAME" = :new."LASTAUTHORNAME", "LASTCHANGE" = :new."LASTCHANGE", "MAXENERGY4TDDPROFILE" = :new."MAXENERGY4TDDPROFILE", "MAXENERGYVARIANT" = :new."MAXENERGYVARIANT", "PRICETOOLLASTAUTHORFK" = :new."PRICETOOLLASTAUTHORFK", "PRICETOOLLASTAUTHORNAME" = :new."PRICETOOLLASTAUTHORNAME", "PRICETOOLLASTCHANGE" = :new."PRICETOOLLASTCHANGE", "PRICINGACTIVETO" = :new."PRICINGACTIVETO", "SYS_VER" = :new."SYS_VER"
	WHERE "ID" = :new."ID" AND EE_TRANS_ID = :new.EE_TRANS_ID;
	IF sql%rowcount <> 1 THEN
		raise_application_error(-20001, 'Pokus o update neplatného řádku, pokud chcete zapisovat do tohoto řádku, načtěte novou verzi dat');
	END IF;
END;
/

CREATE OR REPLACE TRIGGER "PMEPRICINGROOT_HI"
INSTEAD OF INSERT
ON "PMEPRICINGROOT_H"
FOR EACH ROW
BEGIN
	INSERT INTO "PMEPRICINGROOT" t1("ID", t1."ALLOWEDDEVIATIONPERCENT", t1."ALLOWPRICINGYPLUS3", t1."ISPRICINGACTIVE", t1."LASTAUTHORFK", t1."LASTAUTHORNAME", t1."LASTCHANGE", t1."MAXENERGY4TDDPROFILE", t1."MAXENERGYVARIANT", t1."PRICETOOLLASTAUTHORFK", t1."PRICETOOLLASTAUTHORNAME", t1."PRICETOOLLASTCHANGE", t1."PRICINGACTIVETO", t1."SYS_VER") VALUES (:new."ID", :new."ALLOWEDDEVIATIONPERCENT", :new."ALLOWPRICINGYPLUS3", :new."ISPRICINGACTIVE", :new."LASTAUTHORFK", :new."LASTAUTHORNAME", :new."LASTCHANGE", :new."MAXENERGY4TDDPROFILE", :new."MAXENERGYVARIANT", :new."PRICETOOLLASTAUTHORFK", :new."PRICETOOLLASTAUTHORNAME", :new."PRICETOOLLASTCHANGE", :new."PRICINGACTIVETO", :new."SYS_VER");
END;
/

CREATE OR REPLACE TRIGGER "PMEPRICINGROOT_HD"
INSTEAD OF DELETE
ON "PMEPRICINGROOT_H"
FOR EACH ROW
DECLARE
  ex_nonupdatable EXCEPTION;
	PRAGMA EXCEPTION_INIT( ex_nonupdatable, -20001);
BEGIN
	DELETE FROM "PMEPRICINGROOT"
	WHERE "ID" = :old."ID" AND EE_TRANS_ID = :old.EE_TRANS_ID;
	IF sql%rowcount <> 1 THEN
		raise_application_error(-20001, 'Pokus o update neplatného řádku, pokud chcete zapisovat do tohoto řádku, načtěte novou verzi dat');
	END IF;
END;
/
-- 3: závislé objekty (lokalizace);
-- 4: číselníky;

DECLARE
  trans_id NUMBER(20, 0);
BEGIN
  ee_get_transaction_id(trans_id);
  UPDATE ee_transactions SET commit_id = enif_commitid_seq.nextval, commit_ts = systimestamp
  WHERE id = trans_id;
END;
/

commit;
