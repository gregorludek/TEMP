
BEGIN
	declare @transId bigint
	exec dbo.ee_init_transaction @trans_id = @transId
END

GO
-- 1: tabulky
GO
-- 2: triggery a pohledy
GO
-- 3: závislé objekty (lokalizace)
GO
-- 4: číselníky
GO

-- uložíme informace o transakci, v jejímž rámci se příp. měnila data
BEGIN
	declare @transId bigint
	declare @commitId bigint
	exec dbo.ENIF_LOG_COMMIT 'system', 1, NULL, NULL, @commit_id_p = @commitId OUTPUT
	exec @transId = dbo.GetExistingTransactionId
	exec dbo.ee_log_transaction @transId, 'system', NULL, 'c', @commitId
END
GO


BEGIN
	declare @transId bigint
	exec dbo.ee_init_transaction @trans_id = @transId
END

GO
-- 1: tabulky
GO
CREATE TABLE dbo.[EDA_ALARMCHANNEL] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [CAPTION] nvarchar(50), [KEY] nvarchar(20), [SYS_VER] int )
GO

CREATE TABLE dbo.[EDA_ALARMCHANNEL_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [CAPTION] nvarchar(50), [KEY] nvarchar(20), [SYS_VER] int
)
GO
CREATE TABLE dbo.[EDA_ALARMCHANNEL_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[EDA_ALARMCHANNEL_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[EDA_ALARMCHANNEL] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[EDA_ALARMCHANNEL] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[EDA_ALARMCHANNEL] ALTER COLUMN [SYS_VER] int NOT NULL
GO
CREATE TABLE dbo.[EDA_ALARMCHANNELCONSUMER] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [ADDRESSINCHANNEL] nvarchar(max), [ALARMCHANNELFK] bigint, [ALARMCONSUMERFK] bigint, [SYS_VER] int )
GO

CREATE TABLE dbo.[EDA_ALARMCHANNELCONSUMER_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [ADDRESSINCHANNEL] nvarchar(max), [ALARMCHANNELFK] bigint, [ALARMCONSUMERFK] bigint, [SYS_VER] int
)
GO
CREATE TABLE dbo.[EDA_ALARMCHANNELCONSUMER_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[EDA_ALARMCHANNELCONSUMER_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[EDA_ALARMCHANNELCONSUMER] ALTER COLUMN [ALARMCHANNELFK] bigint NOT NULL
GO
ALTER TABLE dbo.[EDA_ALARMCHANNELCONSUMER] ALTER COLUMN [ALARMCONSUMERFK] bigint NOT NULL
GO
ALTER TABLE dbo.[EDA_ALARMCHANNELCONSUMER] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[EDA_ALARMCHANNELCONSUMER] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[EDA_ALARMCHANNELCONSUMER] ALTER COLUMN [SYS_VER] int NOT NULL
GO
CREATE TABLE dbo.[EDA_ALARMCHANNELCPARAMS] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [ALARMCHANNELCONSUMERFK] bigint, [KEY] nvarchar(max), [VALUESTR] nvarchar(max), [SYS_VER] int )
GO

CREATE TABLE dbo.[EDA_ALARMCHANNELCPARAMS_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [ALARMCHANNELCONSUMERFK] bigint, [KEY] nvarchar(max), [VALUESTR] nvarchar(max), [SYS_VER] int
)
GO
CREATE TABLE dbo.[EDA_ALARMCHANNELCPARAMS_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[EDA_ALARMCHANNELCPARAMS_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[EDA_ALARMCHANNELCPARAMS] ALTER COLUMN [ALARMCHANNELCONSUMERFK] bigint NOT NULL
GO
ALTER TABLE dbo.[EDA_ALARMCHANNELCPARAMS] ALTER COLUMN [KEY] nvarchar(max) NOT NULL
GO
ALTER TABLE dbo.[EDA_ALARMCHANNELCPARAMS] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[EDA_ALARMCHANNELCPARAMS] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[EDA_ALARMCHANNELCPARAMS] ALTER COLUMN [SYS_VER] int NOT NULL
GO
CREATE TABLE dbo.[EDA_ALARMCHANNELTEMPLATE] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [ALARMCHANNELFK] bigint, [ALARMDEFINITIONFK] bigint, [SUBJECT] nvarchar(4000), [TEXT] nvarchar(4000), [SYS_VER] int )
GO

CREATE TABLE dbo.[EDA_ALARMCHANNELTEMPLATE_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [ALARMCHANNELFK] bigint, [ALARMDEFINITIONFK] bigint, [SUBJECT] nvarchar(4000), [TEXT] nvarchar(4000), [SYS_VER] int
)
GO
CREATE TABLE dbo.[EDA_ALARMCHANNELTEMPLATE_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[EDA_ALARMCHANNELTEMPLATE_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[EDA_ALARMCHANNELTEMPLATE] ALTER COLUMN [ALARMCHANNELFK] bigint NOT NULL
GO
ALTER TABLE dbo.[EDA_ALARMCHANNELTEMPLATE] ALTER COLUMN [ALARMDEFINITIONFK] bigint NOT NULL
GO
ALTER TABLE dbo.[EDA_ALARMCHANNELTEMPLATE] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[EDA_ALARMCHANNELTEMPLATE] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[EDA_ALARMCHANNELTEMPLATE] ALTER COLUMN [SYS_VER] int NOT NULL
GO
CREATE TABLE dbo.[EDA_ALARMCHANNELTPARAMS] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [ALARMCHANNELTEMPLATEFK] bigint, [KEY] nvarchar(max), [VALUESTR] nvarchar(max), [SYS_VER] int )
GO

CREATE TABLE dbo.[EDA_ALARMCHANNELTPARAMS_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [ALARMCHANNELTEMPLATEFK] bigint, [KEY] nvarchar(max), [VALUESTR] nvarchar(max), [SYS_VER] int
)
GO
CREATE TABLE dbo.[EDA_ALARMCHANNELTPARAMS_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[EDA_ALARMCHANNELTPARAMS_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[EDA_ALARMCHANNELTPARAMS] ALTER COLUMN [ALARMCHANNELTEMPLATEFK] bigint NOT NULL
GO
ALTER TABLE dbo.[EDA_ALARMCHANNELTPARAMS] ALTER COLUMN [KEY] nvarchar(max) NOT NULL
GO
ALTER TABLE dbo.[EDA_ALARMCHANNELTPARAMS] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[EDA_ALARMCHANNELTPARAMS] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[EDA_ALARMCHANNELTPARAMS] ALTER COLUMN [SYS_VER] int NOT NULL
GO
CREATE TABLE dbo.[EDA_ALARMCONSUMER] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [KEY] nvarchar(400), [SYS_VER] int )
GO

CREATE TABLE dbo.[EDA_ALARMCONSUMER_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [KEY] nvarchar(400), [SYS_VER] int
)
GO
CREATE TABLE dbo.[EDA_ALARMCONSUMER_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[EDA_ALARMCONSUMER_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[EDA_ALARMCONSUMER] ALTER COLUMN [KEY] nvarchar(400) NOT NULL
GO
CREATE UNIQUE INDEX [UQ_EDA_ASUMER_KEY_695D8A1] ON dbo.[EDA_ALARMCONSUMER]([KEY]) WHERE [KEY] IS NOT NULL
GO
ALTER TABLE dbo.[EDA_ALARMCONSUMER] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[EDA_ALARMCONSUMER] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[EDA_ALARMCONSUMER] ALTER COLUMN [SYS_VER] int NOT NULL
GO
CREATE TABLE dbo.[EDA_ALARMDEFINITION] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [ACTIVE] bit, [ALARMSEVERITYFK] bigint, [ALARMTYPEFK] bigint, [KEY] nvarchar(50), [MININTERVALTIMEEXP] nvarchar(max), [NOTETYPE] int, [SUBJECT] nvarchar(4000), [TEXT] nvarchar(4000), [SYS_VER] int )
GO

CREATE TABLE dbo.[EDA_ALARMDEFINITION_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [ACTIVE] bit, [ALARMSEVERITYFK] bigint, [ALARMTYPEFK] bigint, [KEY] nvarchar(50), [MININTERVALTIMEEXP] nvarchar(max), [NOTETYPE] int, [SUBJECT] nvarchar(4000), [TEXT] nvarchar(4000), [SYS_VER] int
)
GO
CREATE TABLE dbo.[EDA_ALARMDEFINITION_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[EDA_ALARMDEFINITION_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[EDA_ALARMDEFINITION] ADD DEFAULT ('0') FOR [ACTIVE]
GO
UPDATE dbo.[EDA_ALARMDEFINITION] SET [ACTIVE] = '0' WHERE [ACTIVE] IS NULL
GO
ALTER TABLE dbo.[EDA_ALARMDEFINITION] ALTER COLUMN [ACTIVE] bit NOT NULL
GO
ALTER TABLE dbo.[EDA_ALARMDEFINITION] ADD DEFAULT ('0') FOR [NOTETYPE]
GO
ALTER TABLE dbo.[EDA_ALARMDEFINITION] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[EDA_ALARMDEFINITION] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[EDA_ALARMDEFINITION] ALTER COLUMN [SYS_VER] int NOT NULL
GO
CREATE TABLE dbo.[EDA_ALARMLOG] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [ALARMDEFINITIONFK] bigint, [CREATED] datetime, [FINALSUBJECT] nvarchar(max), [FINALTEXT] nvarchar(max), [TEMPLATESUBJECT] nvarchar(max), [TEMPLATETEXT] nvarchar(max), [SYS_VER] int )
GO

CREATE TABLE dbo.[EDA_ALARMLOG_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [ALARMDEFINITIONFK] bigint, [CREATED] datetime, [FINALSUBJECT] nvarchar(max), [FINALTEXT] nvarchar(max), [TEMPLATESUBJECT] nvarchar(max), [TEMPLATETEXT] nvarchar(max), [SYS_VER] int
)
GO
CREATE TABLE dbo.[EDA_ALARMLOG_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[EDA_ALARMLOG_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[EDA_ALARMLOG] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[EDA_ALARMLOG] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[EDA_ALARMLOG] ALTER COLUMN [SYS_VER] int NOT NULL
GO
CREATE TABLE dbo.[EDA_ALARMLOGDELIVERY] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [ADDRESSINCHANNEL] nvarchar(50), [ALARMLOGFK] bigint, [ALARMLOGSTATEFK] bigint, [CHANGEDATE] datetime, [FINALSUBJECT] nvarchar(max), [FINALTEXT] nvarchar(max), [TEMPLATESUBJECT] nvarchar(200), [TEMPLATETEXT] nvarchar(4000), [SYS_VER] int )
GO

CREATE TABLE dbo.[EDA_ALARMLOGDELIVERY_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [ADDRESSINCHANNEL] nvarchar(50), [ALARMLOGFK] bigint, [ALARMLOGSTATEFK] bigint, [CHANGEDATE] datetime, [FINALSUBJECT] nvarchar(max), [FINALTEXT] nvarchar(max), [TEMPLATESUBJECT] nvarchar(200), [TEMPLATETEXT] nvarchar(4000), [SYS_VER] int
)
GO
CREATE TABLE dbo.[EDA_ALARMLOGDELIVERY_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[EDA_ALARMLOGDELIVERY_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[EDA_ALARMLOGDELIVERY] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[EDA_ALARMLOGDELIVERY] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[EDA_ALARMLOGDELIVERY] ALTER COLUMN [SYS_VER] int NOT NULL
GO
CREATE TABLE dbo.[EDA_ALARMLOGDELIVERYPARAM] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [ALARMLOGDELIVERYFK] bigint, [KEY] nvarchar(max), [VALUESTR] nvarchar(max), [SYS_VER] int )
GO

CREATE TABLE dbo.[EDA_ALARMLOGDELIVERYPARAM_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [ALARMLOGDELIVERYFK] bigint, [KEY] nvarchar(max), [VALUESTR] nvarchar(max), [SYS_VER] int
)
GO
CREATE TABLE dbo.[EDA_ALARMLOGDELIVERYPARAM_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[EDA_ALARMLOGDELIVERYPARAM_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[EDA_ALARMLOGDELIVERYPARAM] ALTER COLUMN [ALARMLOGDELIVERYFK] bigint NOT NULL
GO
ALTER TABLE dbo.[EDA_ALARMLOGDELIVERYPARAM] ALTER COLUMN [KEY] nvarchar(max) NOT NULL
GO
ALTER TABLE dbo.[EDA_ALARMLOGDELIVERYPARAM] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[EDA_ALARMLOGDELIVERYPARAM] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[EDA_ALARMLOGDELIVERYPARAM] ALTER COLUMN [SYS_VER] int NOT NULL
GO
CREATE TABLE dbo.[EDA_ALARMLOGNOTE] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [ALARMLOGFK] bigint, [DATE] datetime, [IDENTITY] nvarchar(50), [TEXT] nvarchar(4000), [SYS_VER] int )
GO

CREATE TABLE dbo.[EDA_ALARMLOGNOTE_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [ALARMLOGFK] bigint, [DATE] datetime, [IDENTITY] nvarchar(50), [TEXT] nvarchar(4000), [SYS_VER] int
)
GO
CREATE TABLE dbo.[EDA_ALARMLOGNOTE_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[EDA_ALARMLOGNOTE_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[EDA_ALARMLOGNOTE] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[EDA_ALARMLOGNOTE] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[EDA_ALARMLOGNOTE] ALTER COLUMN [SYS_VER] int NOT NULL
GO
CREATE TABLE dbo.[EDA_ALARMLOGPARAM] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [ALARMLOGFK] bigint, [KEY] nvarchar(max), [VALUEDT] datetime, [VALUENUM] decimal(38, 10), [VALUESTR] nvarchar(max), [SYS_VER] int )
GO

CREATE TABLE dbo.[EDA_ALARMLOGPARAM_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [ALARMLOGFK] bigint, [KEY] nvarchar(max), [VALUEDT] datetime, [VALUENUM] decimal(38, 10), [VALUESTR] nvarchar(max), [SYS_VER] int
)
GO
CREATE TABLE dbo.[EDA_ALARMLOGPARAM_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[EDA_ALARMLOGPARAM_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[EDA_ALARMLOGPARAM] ALTER COLUMN [ALARMLOGFK] bigint NOT NULL
GO
ALTER TABLE dbo.[EDA_ALARMLOGPARAM] ALTER COLUMN [KEY] nvarchar(max) NOT NULL
GO
ALTER TABLE dbo.[EDA_ALARMLOGPARAM] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[EDA_ALARMLOGPARAM] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[EDA_ALARMLOGPARAM] ALTER COLUMN [SYS_VER] int NOT NULL
GO
CREATE TABLE dbo.[EDA_ALARMLOGSTATE] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [ALARMCHANNELFK] bigint, [CAPTION] nvarchar(100), [KEY] nvarchar(50), [SYS_VER] int )
GO

CREATE TABLE dbo.[EDA_ALARMLOGSTATE_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [ALARMCHANNELFK] bigint, [CAPTION] nvarchar(100), [KEY] nvarchar(50), [SYS_VER] int
)
GO
CREATE TABLE dbo.[EDA_ALARMLOGSTATE_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[EDA_ALARMLOGSTATE_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[EDA_ALARMLOGSTATE] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[EDA_ALARMLOGSTATE] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[EDA_ALARMLOGSTATE] ALTER COLUMN [SYS_VER] int NOT NULL
GO
CREATE TABLE dbo.[EDA_ALARMNODE] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [ACTIVE] bit, [ALARMDEFFK] bigint, [NODEFK] bigint, [SAMPLEFK] bigint, [SUBJECT] nvarchar(4000), [TEXT] nvarchar(4000), [TIMEZONEFK] bigint, [VALUE] float, [SYS_VER] int )
GO

CREATE TABLE dbo.[EDA_ALARMNODE_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [ACTIVE] bit, [ALARMDEFFK] bigint, [NODEFK] bigint, [SAMPLEFK] bigint, [SUBJECT] nvarchar(4000), [TEXT] nvarchar(4000), [TIMEZONEFK] bigint, [VALUE] float, [SYS_VER] int
)
GO
CREATE TABLE dbo.[EDA_ALARMNODE_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[EDA_ALARMNODE_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[EDA_ALARMNODE] ALTER COLUMN [ACTIVE] bit NOT NULL
GO
ALTER TABLE dbo.[EDA_ALARMNODE] ADD DEFAULT ('19') FOR [SAMPLEFK]
GO
UPDATE dbo.[EDA_ALARMNODE] SET [SAMPLEFK] = '19' WHERE [SAMPLEFK] IS NULL
GO
ALTER TABLE dbo.[EDA_ALARMNODE] ALTER COLUMN [SAMPLEFK] bigint NOT NULL
GO
ALTER TABLE dbo.[EDA_ALARMNODE] ADD DEFAULT ('0') FOR [TIMEZONEFK]
GO
UPDATE dbo.[EDA_ALARMNODE] SET [TIMEZONEFK] = '0' WHERE [TIMEZONEFK] IS NULL
GO
ALTER TABLE dbo.[EDA_ALARMNODE] ALTER COLUMN [TIMEZONEFK] bigint NOT NULL
GO
ALTER TABLE dbo.[EDA_ALARMNODE] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[EDA_ALARMNODE] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[EDA_ALARMNODE] ALTER COLUMN [SYS_VER] int NOT NULL
GO
CREATE TABLE dbo.[EDA_ALARMNODEIDENTITY] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [ALARMNODEFK] bigint, [IDENTITYID] nvarchar(max), [SYS_VER] int )
GO

CREATE TABLE dbo.[EDA_ALARMNODEIDENTITY_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [ALARMNODEFK] bigint, [IDENTITYID] nvarchar(max), [SYS_VER] int
)
GO
CREATE TABLE dbo.[EDA_ALARMNODEIDENTITY_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[EDA_ALARMNODEIDENTITY_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[EDA_ALARMNODEIDENTITY] ALTER COLUMN [ALARMNODEFK] bigint NOT NULL
GO
ALTER TABLE dbo.[EDA_ALARMNODEIDENTITY] ALTER COLUMN [IDENTITYID] nvarchar(max) NOT NULL
GO
ALTER TABLE dbo.[EDA_ALARMNODEIDENTITY] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[EDA_ALARMNODEIDENTITY] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[EDA_ALARMNODEIDENTITY] ALTER COLUMN [SYS_VER] int NOT NULL
GO
CREATE TABLE dbo.[EDA_ALARMNODEMAIL] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [ADDRESSEENAME] nvarchar(max), [ALARMNODEFK] bigint, [CONFIRMDELIVERY] bit, [MAIL] nvarchar(50), [NOTES] nvarchar(200), [SYS_VER] int )
GO

CREATE TABLE dbo.[EDA_ALARMNODEMAIL_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [ADDRESSEENAME] nvarchar(max), [ALARMNODEFK] bigint, [CONFIRMDELIVERY] bit, [MAIL] nvarchar(50), [NOTES] nvarchar(200), [SYS_VER] int
)
GO
CREATE TABLE dbo.[EDA_ALARMNODEMAIL_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[EDA_ALARMNODEMAIL_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[EDA_ALARMNODEMAIL] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[EDA_ALARMNODEMAIL] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[EDA_ALARMNODEMAIL] ALTER COLUMN [SYS_VER] int NOT NULL
GO
CREATE TABLE dbo.[EDA_ALARMNODESMS] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [ALARMNODEFK] bigint, [NOTES] nvarchar(200), [PHONENUMBER] nvarchar(20), [SYS_VER] int )
GO

CREATE TABLE dbo.[EDA_ALARMNODESMS_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [ALARMNODEFK] bigint, [NOTES] nvarchar(200), [PHONENUMBER] nvarchar(20), [SYS_VER] int
)
GO
CREATE TABLE dbo.[EDA_ALARMNODESMS_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[EDA_ALARMNODESMS_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[EDA_ALARMNODESMS] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[EDA_ALARMNODESMS] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[EDA_ALARMNODESMS] ALTER COLUMN [SYS_VER] int NOT NULL
GO
CREATE TABLE dbo.[EDA_ALARMNODEWINDOW] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [ALARMNODEFK] bigint, [IDENTITY] nvarchar(50), [NOTES] nvarchar(200), [SYS_VER] int )
GO

CREATE TABLE dbo.[EDA_ALARMNODEWINDOW_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [ALARMNODEFK] bigint, [IDENTITY] nvarchar(50), [NOTES] nvarchar(200), [SYS_VER] int
)
GO
CREATE TABLE dbo.[EDA_ALARMNODEWINDOW_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[EDA_ALARMNODEWINDOW_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[EDA_ALARMNODEWINDOW] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[EDA_ALARMNODEWINDOW] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[EDA_ALARMNODEWINDOW] ALTER COLUMN [SYS_VER] int NOT NULL
GO
CREATE TABLE dbo.[EDA_ALARMSEVERITY] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [ACTIVE] bit, [CAPTION] nvarchar(50), [DESCRIPTION] nvarchar(4000), [EXTERNALID] nvarchar(20), [KEY] nvarchar(10), [SHORTCAPTION] nvarchar(10), [SYS_VER] int )
GO

CREATE TABLE dbo.[EDA_ALARMSEVERITY_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [ACTIVE] bit, [CAPTION] nvarchar(50), [DESCRIPTION] nvarchar(4000), [EXTERNALID] nvarchar(20), [KEY] nvarchar(10), [SHORTCAPTION] nvarchar(10), [SYS_VER] int
)
GO
CREATE TABLE dbo.[EDA_ALARMSEVERITY_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[EDA_ALARMSEVERITY_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[EDA_ALARMSEVERITY] ALTER COLUMN [ACTIVE] bit NOT NULL
GO
ALTER TABLE dbo.[EDA_ALARMSEVERITY] ALTER COLUMN [CAPTION] nvarchar(50) NOT NULL
GO
ALTER TABLE dbo.[EDA_ALARMSEVERITY] ALTER COLUMN [KEY] nvarchar(10) NOT NULL
GO
CREATE UNIQUE INDEX [UQ_EDA_AERITY_KEY_B30817B] ON dbo.[EDA_ALARMSEVERITY]([KEY]) WHERE [KEY] IS NOT NULL
GO
ALTER TABLE dbo.[EDA_ALARMSEVERITY] ALTER COLUMN [SHORTCAPTION] nvarchar(10) NOT NULL
GO
ALTER TABLE dbo.[EDA_ALARMSEVERITY] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[EDA_ALARMSEVERITY] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[EDA_ALARMSEVERITY] ALTER COLUMN [SYS_VER] int NOT NULL
GO
CREATE TABLE dbo.[EDA_ALARMTYPE] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [CAPTION] nvarchar(50), [KEY] nvarchar(20), [SYS_VER] int )
GO

CREATE TABLE dbo.[EDA_ALARMTYPE_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [CAPTION] nvarchar(50), [KEY] nvarchar(20), [SYS_VER] int
)
GO
CREATE TABLE dbo.[EDA_ALARMTYPE_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[EDA_ALARMTYPE_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[EDA_ALARMTYPE] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[EDA_ALARMTYPE] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[EDA_ALARMTYPE] ALTER COLUMN [SYS_VER] int NOT NULL
GO
CREATE TABLE dbo.[EDA_ALARMVALUE] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [SYS_VER] int )
GO

CREATE TABLE dbo.[EDA_ALARMVALUE_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [SYS_VER] int
)
GO
CREATE TABLE dbo.[EDA_ALARMVALUE_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[EDA_ALARMVALUE_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[EDA_ALARMVALUE] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[EDA_ALARMVALUE] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[EDA_ALARMVALUE] ALTER COLUMN [SYS_VER] int NOT NULL
GO

ALTER TABLE dbo.[EDA_ALARMCHANNELCONSUMER]
ADD CONSTRAINT [FK_EDA_UMER_EDA_NNEL_73C51D4]
FOREIGN KEY ([ALARMCHANNELFK]) REFERENCES dbo.[EDA_ALARMCHANNEL] ( [ID] )

GO
CREATE INDEX [IX_EDA_UMER_ALARELFK_8275DB6] ON dbo.[EDA_ALARMCHANNELCONSUMER] ([ALARMCHANNELFK])
GO
CREATE INDEX [IX_EDA_UMER_ALARELFK_8275DB6_C] ON dbo.[EDA_ALARMCHANNELCONSUMER_C] ([ALARMCHANNELFK])
GO

ALTER TABLE dbo.[EDA_ALARMCHANNELCONSUMER]
ADD CONSTRAINT [FK_EDA_UMER_EDA_UMER_7071FE9]
FOREIGN KEY ([ALARMCONSUMERFK]) REFERENCES dbo.[EDA_ALARMCONSUMER] ( [ID] )

GO
CREATE INDEX [IX_EDA_UMER_ALARERFK_19563D9] ON dbo.[EDA_ALARMCHANNELCONSUMER] ([ALARMCONSUMERFK])
GO
CREATE INDEX [IX_EDA_UMER_ALARERFK_19563D9_C] ON dbo.[EDA_ALARMCHANNELCONSUMER_C] ([ALARMCONSUMERFK])
GO

ALTER TABLE dbo.[EDA_ALARMCHANNELCPARAMS]
ADD CONSTRAINT [FK_EDA_RAMS_EDA_UMER_A8782E2]
FOREIGN KEY ([ALARMCHANNELCONSUMERFK]) REFERENCES dbo.[EDA_ALARMCHANNELCONSUMER] ( [ID] )

GO
CREATE INDEX [IX_EDA_RAMS_ALARERFK_DEC0B57] ON dbo.[EDA_ALARMCHANNELCPARAMS] ([ALARMCHANNELCONSUMERFK])
GO
CREATE INDEX [IX_EDA_RAMS_ALARERFK_DEC0B57_C] ON dbo.[EDA_ALARMCHANNELCPARAMS_C] ([ALARMCHANNELCONSUMERFK])
GO

ALTER TABLE dbo.[EDA_ALARMCHANNELTEMPLATE]
ADD CONSTRAINT [FK_EDA_LATE_EDA_NNEL_D408823]
FOREIGN KEY ([ALARMCHANNELFK]) REFERENCES dbo.[EDA_ALARMCHANNEL] ( [ID] )

GO
CREATE INDEX [IX_EDA_LATE_ALARELFK_19F249E] ON dbo.[EDA_ALARMCHANNELTEMPLATE] ([ALARMCHANNELFK])
GO
CREATE INDEX [IX_EDA_LATE_ALARELFK_19F249E_C] ON dbo.[EDA_ALARMCHANNELTEMPLATE_C] ([ALARMCHANNELFK])
GO

ALTER TABLE dbo.[EDA_ALARMCHANNELTEMPLATE]
ADD CONSTRAINT [FK_EDA_LATE_EDA_TION_F3537D5]
FOREIGN KEY ([ALARMDEFINITIONFK]) REFERENCES dbo.[EDA_ALARMDEFINITION] ( [ID] )

GO
CREATE INDEX [IX_EDA_LATE_ALARONFK_0E82AF5] ON dbo.[EDA_ALARMCHANNELTEMPLATE] ([ALARMDEFINITIONFK])
GO
CREATE INDEX [IX_EDA_LATE_ALARONFK_0E82AF5_C] ON dbo.[EDA_ALARMCHANNELTEMPLATE_C] ([ALARMDEFINITIONFK])
GO

ALTER TABLE dbo.[EDA_ALARMCHANNELTPARAMS]
ADD CONSTRAINT [FK_EDA_RAMS_EDA_LATE_EBAE46B]
FOREIGN KEY ([ALARMCHANNELTEMPLATEFK]) REFERENCES dbo.[EDA_ALARMCHANNELTEMPLATE] ( [ID] )

GO
CREATE INDEX [IX_EDA_RAMS_ALARTEFK_97BFE01] ON dbo.[EDA_ALARMCHANNELTPARAMS] ([ALARMCHANNELTEMPLATEFK])
GO
CREATE INDEX [IX_EDA_RAMS_ALARTEFK_97BFE01_C] ON dbo.[EDA_ALARMCHANNELTPARAMS_C] ([ALARMCHANNELTEMPLATEFK])
GO

ALTER TABLE dbo.[EDA_ALARMDEFINITION]
ADD CONSTRAINT [FK_EDA_TION_EDA_RITY_83CCDD4]
FOREIGN KEY ([ALARMSEVERITYFK]) REFERENCES dbo.[EDA_ALARMSEVERITY] ( [ID] )

GO
CREATE INDEX [IX_EDA_TION_ALARTYFK_F170D06] ON dbo.[EDA_ALARMDEFINITION] ([ALARMSEVERITYFK])
GO
CREATE INDEX [IX_EDA_TION_ALARTYFK_F170D06_C] ON dbo.[EDA_ALARMDEFINITION_C] ([ALARMSEVERITYFK])
GO

ALTER TABLE dbo.[EDA_ALARMDEFINITION]
ADD CONSTRAINT [FK_EDA_TION_EDA_TYPE_222AABB]
FOREIGN KEY ([ALARMTYPEFK]) REFERENCES dbo.[EDA_ALARMTYPE] ( [ID] )

GO
CREATE INDEX [IX_EDA_TION_ALARPEFK_B045E71] ON dbo.[EDA_ALARMDEFINITION] ([ALARMTYPEFK])
GO
CREATE INDEX [IX_EDA_TION_ALARPEFK_B045E71_C] ON dbo.[EDA_ALARMDEFINITION_C] ([ALARMTYPEFK])
GO

ALTER TABLE dbo.[EDA_ALARMLOG]
ADD CONSTRAINT [FK_EDA_MLOG_EDA_TION_630462B]
FOREIGN KEY ([ALARMDEFINITIONFK]) REFERENCES dbo.[EDA_ALARMDEFINITION] ( [ID] )

GO
CREATE INDEX [IX_EDA_MLOG_ALARONFK_A56CBD4] ON dbo.[EDA_ALARMLOG] ([ALARMDEFINITIONFK])
GO
CREATE INDEX [IX_EDA_MLOG_ALARONFK_A56CBD4_C] ON dbo.[EDA_ALARMLOG_C] ([ALARMDEFINITIONFK])
GO

ALTER TABLE dbo.[EDA_ALARMLOGDELIVERY]
ADD CONSTRAINT [FK_EDA_VERY_EDA_MLOG_6A9C110]
FOREIGN KEY ([ALARMLOGFK]) REFERENCES dbo.[EDA_ALARMLOG] ( [ID] )

GO
CREATE INDEX [IX_EDA_VERY_ALAROGFK_460A7E0] ON dbo.[EDA_ALARMLOGDELIVERY] ([ALARMLOGFK])
GO
CREATE INDEX [IX_EDA_VERY_ALAROGFK_460A7E0_C] ON dbo.[EDA_ALARMLOGDELIVERY_C] ([ALARMLOGFK])
GO

ALTER TABLE dbo.[EDA_ALARMLOGDELIVERY]
ADD CONSTRAINT [FK_EDA_VERY_EDA_TATE_0882019]
FOREIGN KEY ([ALARMLOGSTATEFK]) REFERENCES dbo.[EDA_ALARMLOGSTATE] ( [ID] )

GO
CREATE INDEX [IX_EDA_VERY_ALARTEFK_096BA87] ON dbo.[EDA_ALARMLOGDELIVERY] ([ALARMLOGSTATEFK])
GO
CREATE INDEX [IX_EDA_VERY_ALARTEFK_096BA87_C] ON dbo.[EDA_ALARMLOGDELIVERY_C] ([ALARMLOGSTATEFK])
GO

ALTER TABLE dbo.[EDA_ALARMLOGDELIVERYPARAM]
ADD CONSTRAINT [FK_EDA_ARAM_EDA_VERY_782D70F]
FOREIGN KEY ([ALARMLOGDELIVERYFK]) REFERENCES dbo.[EDA_ALARMLOGDELIVERY] ( [ID] )

GO
CREATE INDEX [IX_EDA_ARAM_ALARRYFK_70B5190] ON dbo.[EDA_ALARMLOGDELIVERYPARAM] ([ALARMLOGDELIVERYFK])
GO
CREATE INDEX [IX_EDA_ARAM_ALARRYFK_70B5190_C] ON dbo.[EDA_ALARMLOGDELIVERYPARAM_C] ([ALARMLOGDELIVERYFK])
GO

ALTER TABLE dbo.[EDA_ALARMLOGNOTE]
ADD CONSTRAINT [FK_EDA_NOTE_EDA_MLOG_4ECE4AD]
FOREIGN KEY ([ALARMLOGFK]) REFERENCES dbo.[EDA_ALARMLOG] ( [ID] )

GO
CREATE INDEX [IX_EDA_NOTE_ALAROGFK_E0B73FF] ON dbo.[EDA_ALARMLOGNOTE] ([ALARMLOGFK])
GO
CREATE INDEX [IX_EDA_NOTE_ALAROGFK_E0B73FF_C] ON dbo.[EDA_ALARMLOGNOTE_C] ([ALARMLOGFK])
GO

ALTER TABLE dbo.[EDA_ALARMLOGPARAM]
ADD CONSTRAINT [FK_EDA_ARAM_EDA_MLOG_A63D320]
FOREIGN KEY ([ALARMLOGFK]) REFERENCES dbo.[EDA_ALARMLOG] ( [ID] )

GO
CREATE INDEX [IX_EDA_ARAM_ALAROGFK_C6BB020] ON dbo.[EDA_ALARMLOGPARAM] ([ALARMLOGFK])
GO
CREATE INDEX [IX_EDA_ARAM_ALAROGFK_C6BB020_C] ON dbo.[EDA_ALARMLOGPARAM_C] ([ALARMLOGFK])
GO

ALTER TABLE dbo.[EDA_ALARMLOGSTATE]
ADD CONSTRAINT [FK_EDA_TATE_EDA_NNEL_2252EAF]
FOREIGN KEY ([ALARMCHANNELFK]) REFERENCES dbo.[EDA_ALARMCHANNEL] ( [ID] )

GO
CREATE INDEX [IX_EDA_TATE_ALARELFK_3DB334A] ON dbo.[EDA_ALARMLOGSTATE] ([ALARMCHANNELFK])
GO
CREATE INDEX [IX_EDA_TATE_ALARELFK_3DB334A_C] ON dbo.[EDA_ALARMLOGSTATE_C] ([ALARMCHANNELFK])
GO

ALTER TABLE dbo.[EDA_ALARMNODE]
ADD CONSTRAINT [FK_EDA_NODE_EDA_TION_1AEB11C]
FOREIGN KEY ([ALARMDEFFK]) REFERENCES dbo.[EDA_ALARMDEFINITION] ( [ID] )

GO
CREATE INDEX [IX_EDA_NODE_ALAREFFK_3AE5F57] ON dbo.[EDA_ALARMNODE] ([ALARMDEFFK])
GO
CREATE INDEX [IX_EDA_NODE_ALAREFFK_3AE5F57_C] ON dbo.[EDA_ALARMNODE_C] ([ALARMDEFFK])
GO

ALTER TABLE dbo.[EDA_ALARMNODEIDENTITY]
ADD CONSTRAINT [FK_EDA_TITY_EDA_NODE_11C9A02]
FOREIGN KEY ([ALARMNODEFK]) REFERENCES dbo.[EDA_ALARMNODE] ( [ID] )

GO
CREATE INDEX [IX_EDA_TITY_ALARDEFK_75771B9] ON dbo.[EDA_ALARMNODEIDENTITY] ([ALARMNODEFK])
GO
CREATE INDEX [IX_EDA_TITY_ALARDEFK_75771B9_C] ON dbo.[EDA_ALARMNODEIDENTITY_C] ([ALARMNODEFK])
GO

ALTER TABLE dbo.[EDA_ALARMNODEMAIL]
ADD CONSTRAINT [FK_EDA_MAIL_EDA_NODE_F03A423]
FOREIGN KEY ([ALARMNODEFK]) REFERENCES dbo.[EDA_ALARMNODE] ( [ID] )

GO
CREATE INDEX [IX_EDA_MAIL_ALARDEFK_3DF5921] ON dbo.[EDA_ALARMNODEMAIL] ([ALARMNODEFK])
GO
CREATE INDEX [IX_EDA_MAIL_ALARDEFK_3DF5921_C] ON dbo.[EDA_ALARMNODEMAIL_C] ([ALARMNODEFK])
GO

ALTER TABLE dbo.[EDA_ALARMNODESMS]
ADD CONSTRAINT [FK_EDA_ESMS_EDA_NODE_ECAFBD2]
FOREIGN KEY ([ALARMNODEFK]) REFERENCES dbo.[EDA_ALARMNODE] ( [ID] )

GO
CREATE INDEX [IX_EDA_ESMS_ALARDEFK_98B63EE] ON dbo.[EDA_ALARMNODESMS] ([ALARMNODEFK])
GO
CREATE INDEX [IX_EDA_ESMS_ALARDEFK_98B63EE_C] ON dbo.[EDA_ALARMNODESMS_C] ([ALARMNODEFK])
GO

ALTER TABLE dbo.[EDA_ALARMNODEWINDOW]
ADD CONSTRAINT [FK_EDA_NDOW_EDA_NODE_552E26A]
FOREIGN KEY ([ALARMNODEFK]) REFERENCES dbo.[EDA_ALARMNODE] ( [ID] )

GO
CREATE INDEX [IX_EDA_NDOW_ALARDEFK_EB0ACB7] ON dbo.[EDA_ALARMNODEWINDOW] ([ALARMNODEFK])
GO
CREATE INDEX [IX_EDA_NDOW_ALARDEFK_EB0ACB7_C] ON dbo.[EDA_ALARMNODEWINDOW_C] ([ALARMNODEFK])
GO
CREATE INDEX [IX_EDA_NNEL_EE_IM_ID_ADD7866_C] ON dbo.[EDA_ALARMCHANNEL_C] ([EE_ITEM_ID])
GO
CREATE INDEX [IX_EDA_UMER_EE_IM_ID_33FD976_C] ON dbo.[EDA_ALARMCHANNELCONSUMER_C] ([EE_ITEM_ID])
GO
CREATE INDEX [IX_EDA_RAMS_EE_IM_ID_7982245_C] ON dbo.[EDA_ALARMCHANNELCPARAMS_C] ([EE_ITEM_ID])
GO
CREATE INDEX [IX_EDA_LATE_EE_IM_ID_99BA121_C] ON dbo.[EDA_ALARMCHANNELTEMPLATE_C] ([EE_ITEM_ID])
GO
CREATE INDEX [IX_EDA_RAMS_EE_IM_ID_84C2519_C] ON dbo.[EDA_ALARMCHANNELTPARAMS_C] ([EE_ITEM_ID])
GO
CREATE INDEX [IX_EDA_UMER_EE_IM_ID_9E55C11_C] ON dbo.[EDA_ALARMCONSUMER_C] ([EE_ITEM_ID])
GO
CREATE INDEX [IX_EDA_TION_EE_IM_ID_010890D_C] ON dbo.[EDA_ALARMDEFINITION_C] ([EE_ITEM_ID])
GO
CREATE INDEX [IX_EDA_MLOG_EE_IM_ID_7266303_C] ON dbo.[EDA_ALARMLOG_C] ([EE_ITEM_ID])
GO
CREATE INDEX [IX_EDA_VERY_EE_IM_ID_0FB56AE_C] ON dbo.[EDA_ALARMLOGDELIVERY_C] ([EE_ITEM_ID])
GO
CREATE INDEX [IX_EDA_ARAM_EE_IM_ID_7778B1D_C] ON dbo.[EDA_ALARMLOGDELIVERYPARAM_C] ([EE_ITEM_ID])
GO
CREATE INDEX [IX_EDA_NOTE_EE_IM_ID_118114D_C] ON dbo.[EDA_ALARMLOGNOTE_C] ([EE_ITEM_ID])
GO
CREATE INDEX [IX_EDA_ARAM_EE_IM_ID_089DABB_C] ON dbo.[EDA_ALARMLOGPARAM_C] ([EE_ITEM_ID])
GO
CREATE INDEX [IX_EDA_TATE_EE_IM_ID_9DB2D7A_C] ON dbo.[EDA_ALARMLOGSTATE_C] ([EE_ITEM_ID])
GO
CREATE INDEX [IX_EDA_NODE_EE_IM_ID_5E76333_C] ON dbo.[EDA_ALARMNODE_C] ([EE_ITEM_ID])
GO
CREATE INDEX [IX_EDA_TITY_EE_IM_ID_D4E6345_C] ON dbo.[EDA_ALARMNODEIDENTITY_C] ([EE_ITEM_ID])
GO
CREATE INDEX [IX_EDA_MAIL_EE_IM_ID_BFE7528_C] ON dbo.[EDA_ALARMNODEMAIL_C] ([EE_ITEM_ID])
GO
CREATE INDEX [IX_EDA_ESMS_EE_IM_ID_43F0645_C] ON dbo.[EDA_ALARMNODESMS_C] ([EE_ITEM_ID])
GO
CREATE INDEX [IX_EDA_NDOW_EE_IM_ID_D0EE09D_C] ON dbo.[EDA_ALARMNODEWINDOW_C] ([EE_ITEM_ID])
GO
CREATE INDEX [IX_EDA_RITY_EE_IM_ID_2E4A647_C] ON dbo.[EDA_ALARMSEVERITY_C] ([EE_ITEM_ID])
GO
CREATE INDEX [IX_EDA_TYPE_EE_IM_ID_F00CEFC_C] ON dbo.[EDA_ALARMTYPE_C] ([EE_ITEM_ID])
GO
CREATE INDEX [IX_EDA_ALUE_EE_IM_ID_6746D7E_C] ON dbo.[EDA_ALARMVALUE_C] ([EE_ITEM_ID])
GO
-- 2: triggery a pohledy
GO

IF OBJECT_ID(N'dbo.EDA_ALARMCHANNEL_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMCHANNEL_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[EDA_ALARMCHANNEL_I] ON dbo.[EDA_ALARMCHANNEL] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[EDA_ALARMCHANNEL] ([ID], EE_TRANS_ID, t1.[CAPTION], t1.[KEY], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[CAPTION], inserted.[KEY], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[EDA_ALARMCHANNEL_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[CAPTION], t1.[KEY], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[CAPTION], inserted.[KEY], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMCHANNEL_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMCHANNEL_U]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMCHANNEL_U] ON dbo.[EDA_ALARMCHANNEL] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[EDA_ALARMCHANNEL] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[EDA_ALARMCHANNEL] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[EDA_ALARMCHANNEL_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[CAPTION], t1.[KEY], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[CAPTION], inserted.[KEY], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMCHANNEL_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMCHANNEL_D]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMCHANNEL_D] ON dbo.[EDA_ALARMCHANNEL] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[EDA_ALARMCHANNEL_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMCHANNEL_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[EDA_ALARMCHANNEL_H] AS SELECT * FROM dbo.[EDA_ALARMCHANNEL]'
END

GO

ALTER VIEW dbo.[EDA_ALARMCHANNEL_H] AS
WITH cn AS (SELECT * FROM dbo.[EDA_ALARMCHANNEL_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[CAPTION], t1.[KEY], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.EDA_ALARMCHANNELCONSUMER_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMCHANNELCONSUMER_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[EDA_ALARMCHANNELCONSUMER_I] ON dbo.[EDA_ALARMCHANNELCONSUMER] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[EDA_ALARMCHANNELCONSUMER] ([ID], EE_TRANS_ID, t1.[ADDRESSINCHANNEL], t1.[ALARMCHANNELFK], t1.[ALARMCONSUMERFK], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[ADDRESSINCHANNEL], inserted.[ALARMCHANNELFK], inserted.[ALARMCONSUMERFK], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[EDA_ALARMCHANNELCONSUMER_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ADDRESSINCHANNEL], t1.[ALARMCHANNELFK], t1.[ALARMCONSUMERFK], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ADDRESSINCHANNEL], inserted.[ALARMCHANNELFK], inserted.[ALARMCONSUMERFK], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMCHANNELCONSUMER_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMCHANNELCONSUMER_U]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMCHANNELCONSUMER_U] ON dbo.[EDA_ALARMCHANNELCONSUMER] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[EDA_ALARMCHANNELCONSUMER] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[EDA_ALARMCHANNELCONSUMER] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[EDA_ALARMCHANNELCONSUMER_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ADDRESSINCHANNEL], t1.[ALARMCHANNELFK], t1.[ALARMCONSUMERFK], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ADDRESSINCHANNEL], inserted.[ALARMCHANNELFK], inserted.[ALARMCONSUMERFK], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMCHANNELCONSUMER_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMCHANNELCONSUMER_D]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMCHANNELCONSUMER_D] ON dbo.[EDA_ALARMCHANNELCONSUMER] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[EDA_ALARMCHANNELCONSUMER_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMCHANNELCONSUMER_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[EDA_ALARMCHANNELCONSUMER_H] AS SELECT * FROM dbo.[EDA_ALARMCHANNELCONSUMER]'
END

GO

ALTER VIEW dbo.[EDA_ALARMCHANNELCONSUMER_H] AS
WITH cn AS (SELECT * FROM dbo.[EDA_ALARMCHANNELCONSUMER_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[ADDRESSINCHANNEL], t1.[ALARMCHANNELFK], t1.[ALARMCONSUMERFK], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.EDA_ALARMCHANNELCPARAMS_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMCHANNELCPARAMS_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[EDA_ALARMCHANNELCPARAMS_I] ON dbo.[EDA_ALARMCHANNELCPARAMS] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[EDA_ALARMCHANNELCPARAMS] ([ID], EE_TRANS_ID, t1.[ALARMCHANNELCONSUMERFK], t1.[KEY], t1.[VALUESTR], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[ALARMCHANNELCONSUMERFK], inserted.[KEY], inserted.[VALUESTR], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[EDA_ALARMCHANNELCPARAMS_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ALARMCHANNELCONSUMERFK], t1.[KEY], t1.[VALUESTR], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ALARMCHANNELCONSUMERFK], inserted.[KEY], inserted.[VALUESTR], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMCHANNELCPARAMS_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMCHANNELCPARAMS_U]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMCHANNELCPARAMS_U] ON dbo.[EDA_ALARMCHANNELCPARAMS] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[EDA_ALARMCHANNELCPARAMS] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[EDA_ALARMCHANNELCPARAMS] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[EDA_ALARMCHANNELCPARAMS_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ALARMCHANNELCONSUMERFK], t1.[KEY], t1.[VALUESTR], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ALARMCHANNELCONSUMERFK], inserted.[KEY], inserted.[VALUESTR], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMCHANNELCPARAMS_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMCHANNELCPARAMS_D]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMCHANNELCPARAMS_D] ON dbo.[EDA_ALARMCHANNELCPARAMS] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[EDA_ALARMCHANNELCPARAMS_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMCHANNELCPARAMS_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[EDA_ALARMCHANNELCPARAMS_H] AS SELECT * FROM dbo.[EDA_ALARMCHANNELCPARAMS]'
END

GO

ALTER VIEW dbo.[EDA_ALARMCHANNELCPARAMS_H] AS
WITH cn AS (SELECT * FROM dbo.[EDA_ALARMCHANNELCPARAMS_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[ALARMCHANNELCONSUMERFK], t1.[KEY], t1.[VALUESTR], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.EDA_ALARMCHANNELTEMPLATE_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMCHANNELTEMPLATE_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[EDA_ALARMCHANNELTEMPLATE_I] ON dbo.[EDA_ALARMCHANNELTEMPLATE] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[EDA_ALARMCHANNELTEMPLATE] ([ID], EE_TRANS_ID, t1.[ALARMCHANNELFK], t1.[ALARMDEFINITIONFK], t1.[SUBJECT], t1.[TEXT], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[ALARMCHANNELFK], inserted.[ALARMDEFINITIONFK], inserted.[SUBJECT], inserted.[TEXT], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[EDA_ALARMCHANNELTEMPLATE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ALARMCHANNELFK], t1.[ALARMDEFINITIONFK], t1.[SUBJECT], t1.[TEXT], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ALARMCHANNELFK], inserted.[ALARMDEFINITIONFK], inserted.[SUBJECT], inserted.[TEXT], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMCHANNELTEMPLATE_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMCHANNELTEMPLATE_U]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMCHANNELTEMPLATE_U] ON dbo.[EDA_ALARMCHANNELTEMPLATE] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[EDA_ALARMCHANNELTEMPLATE] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[EDA_ALARMCHANNELTEMPLATE] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[EDA_ALARMCHANNELTEMPLATE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ALARMCHANNELFK], t1.[ALARMDEFINITIONFK], t1.[SUBJECT], t1.[TEXT], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ALARMCHANNELFK], inserted.[ALARMDEFINITIONFK], inserted.[SUBJECT], inserted.[TEXT], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMCHANNELTEMPLATE_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMCHANNELTEMPLATE_D]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMCHANNELTEMPLATE_D] ON dbo.[EDA_ALARMCHANNELTEMPLATE] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[EDA_ALARMCHANNELTEMPLATE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMCHANNELTEMPLATE_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[EDA_ALARMCHANNELTEMPLATE_H] AS SELECT * FROM dbo.[EDA_ALARMCHANNELTEMPLATE]'
END

GO

ALTER VIEW dbo.[EDA_ALARMCHANNELTEMPLATE_H] AS
WITH cn AS (SELECT * FROM dbo.[EDA_ALARMCHANNELTEMPLATE_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[ALARMCHANNELFK], t1.[ALARMDEFINITIONFK], t1.[SUBJECT], t1.[TEXT], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.EDA_ALARMCHANNELTPARAMS_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMCHANNELTPARAMS_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[EDA_ALARMCHANNELTPARAMS_I] ON dbo.[EDA_ALARMCHANNELTPARAMS] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[EDA_ALARMCHANNELTPARAMS] ([ID], EE_TRANS_ID, t1.[ALARMCHANNELTEMPLATEFK], t1.[KEY], t1.[VALUESTR], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[ALARMCHANNELTEMPLATEFK], inserted.[KEY], inserted.[VALUESTR], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[EDA_ALARMCHANNELTPARAMS_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ALARMCHANNELTEMPLATEFK], t1.[KEY], t1.[VALUESTR], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ALARMCHANNELTEMPLATEFK], inserted.[KEY], inserted.[VALUESTR], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMCHANNELTPARAMS_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMCHANNELTPARAMS_U]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMCHANNELTPARAMS_U] ON dbo.[EDA_ALARMCHANNELTPARAMS] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[EDA_ALARMCHANNELTPARAMS] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[EDA_ALARMCHANNELTPARAMS] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[EDA_ALARMCHANNELTPARAMS_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ALARMCHANNELTEMPLATEFK], t1.[KEY], t1.[VALUESTR], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ALARMCHANNELTEMPLATEFK], inserted.[KEY], inserted.[VALUESTR], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMCHANNELTPARAMS_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMCHANNELTPARAMS_D]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMCHANNELTPARAMS_D] ON dbo.[EDA_ALARMCHANNELTPARAMS] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[EDA_ALARMCHANNELTPARAMS_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMCHANNELTPARAMS_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[EDA_ALARMCHANNELTPARAMS_H] AS SELECT * FROM dbo.[EDA_ALARMCHANNELTPARAMS]'
END

GO

ALTER VIEW dbo.[EDA_ALARMCHANNELTPARAMS_H] AS
WITH cn AS (SELECT * FROM dbo.[EDA_ALARMCHANNELTPARAMS_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[ALARMCHANNELTEMPLATEFK], t1.[KEY], t1.[VALUESTR], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.EDA_ALARMCONSUMER_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMCONSUMER_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[EDA_ALARMCONSUMER_I] ON dbo.[EDA_ALARMCONSUMER] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[EDA_ALARMCONSUMER] ([ID], EE_TRANS_ID, t1.[KEY], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[KEY], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[EDA_ALARMCONSUMER_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[KEY], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[KEY], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMCONSUMER_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMCONSUMER_U]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMCONSUMER_U] ON dbo.[EDA_ALARMCONSUMER] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[EDA_ALARMCONSUMER] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[EDA_ALARMCONSUMER] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[EDA_ALARMCONSUMER_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[KEY], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[KEY], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMCONSUMER_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMCONSUMER_D]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMCONSUMER_D] ON dbo.[EDA_ALARMCONSUMER] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[EDA_ALARMCONSUMER_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMCONSUMER_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[EDA_ALARMCONSUMER_H] AS SELECT * FROM dbo.[EDA_ALARMCONSUMER]'
END

GO

ALTER VIEW dbo.[EDA_ALARMCONSUMER_H] AS
WITH cn AS (SELECT * FROM dbo.[EDA_ALARMCONSUMER_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[KEY], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.EDA_ALARMDEFINITION_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMDEFINITION_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[EDA_ALARMDEFINITION_I] ON dbo.[EDA_ALARMDEFINITION] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[EDA_ALARMDEFINITION] ([ID], EE_TRANS_ID, t1.[ACTIVE], t1.[ALARMSEVERITYFK], t1.[ALARMTYPEFK], t1.[KEY], t1.[MININTERVALTIMEEXP], t1.[NOTETYPE], t1.[SUBJECT], t1.[TEXT], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[ACTIVE], inserted.[ALARMSEVERITYFK], inserted.[ALARMTYPEFK], inserted.[KEY], inserted.[MININTERVALTIMEEXP], inserted.[NOTETYPE], inserted.[SUBJECT], inserted.[TEXT], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[EDA_ALARMDEFINITION_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ACTIVE], t1.[ALARMSEVERITYFK], t1.[ALARMTYPEFK], t1.[KEY], t1.[MININTERVALTIMEEXP], t1.[NOTETYPE], t1.[SUBJECT], t1.[TEXT], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ACTIVE], inserted.[ALARMSEVERITYFK], inserted.[ALARMTYPEFK], inserted.[KEY], inserted.[MININTERVALTIMEEXP], inserted.[NOTETYPE], inserted.[SUBJECT], inserted.[TEXT], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMDEFINITION_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMDEFINITION_U]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMDEFINITION_U] ON dbo.[EDA_ALARMDEFINITION] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[EDA_ALARMDEFINITION] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[EDA_ALARMDEFINITION] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[EDA_ALARMDEFINITION_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ACTIVE], t1.[ALARMSEVERITYFK], t1.[ALARMTYPEFK], t1.[KEY], t1.[MININTERVALTIMEEXP], t1.[NOTETYPE], t1.[SUBJECT], t1.[TEXT], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ACTIVE], inserted.[ALARMSEVERITYFK], inserted.[ALARMTYPEFK], inserted.[KEY], inserted.[MININTERVALTIMEEXP], inserted.[NOTETYPE], inserted.[SUBJECT], inserted.[TEXT], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMDEFINITION_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMDEFINITION_D]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMDEFINITION_D] ON dbo.[EDA_ALARMDEFINITION] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[EDA_ALARMDEFINITION_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMDEFINITION_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[EDA_ALARMDEFINITION_H] AS SELECT * FROM dbo.[EDA_ALARMDEFINITION]'
END

GO

ALTER VIEW dbo.[EDA_ALARMDEFINITION_H] AS
WITH cn AS (SELECT * FROM dbo.[EDA_ALARMDEFINITION_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[ACTIVE], t1.[ALARMSEVERITYFK], t1.[ALARMTYPEFK], t1.[KEY], t1.[MININTERVALTIMEEXP], t1.[NOTETYPE], t1.[SUBJECT], t1.[TEXT], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.EDA_ALARMLOG_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMLOG_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[EDA_ALARMLOG_I] ON dbo.[EDA_ALARMLOG] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[EDA_ALARMLOG] ([ID], EE_TRANS_ID, t1.[ALARMDEFINITIONFK], t1.[CREATED], t1.[FINALSUBJECT], t1.[FINALTEXT], t1.[TEMPLATESUBJECT], t1.[TEMPLATETEXT], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[ALARMDEFINITIONFK], inserted.[CREATED], inserted.[FINALSUBJECT], inserted.[FINALTEXT], inserted.[TEMPLATESUBJECT], inserted.[TEMPLATETEXT], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[EDA_ALARMLOG_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ALARMDEFINITIONFK], t1.[CREATED], t1.[FINALSUBJECT], t1.[FINALTEXT], t1.[TEMPLATESUBJECT], t1.[TEMPLATETEXT], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ALARMDEFINITIONFK], inserted.[CREATED], inserted.[FINALSUBJECT], inserted.[FINALTEXT], inserted.[TEMPLATESUBJECT], inserted.[TEMPLATETEXT], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMLOG_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMLOG_U]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMLOG_U] ON dbo.[EDA_ALARMLOG] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[EDA_ALARMLOG] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[EDA_ALARMLOG] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[EDA_ALARMLOG_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ALARMDEFINITIONFK], t1.[CREATED], t1.[FINALSUBJECT], t1.[FINALTEXT], t1.[TEMPLATESUBJECT], t1.[TEMPLATETEXT], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ALARMDEFINITIONFK], inserted.[CREATED], inserted.[FINALSUBJECT], inserted.[FINALTEXT], inserted.[TEMPLATESUBJECT], inserted.[TEMPLATETEXT], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMLOG_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMLOG_D]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMLOG_D] ON dbo.[EDA_ALARMLOG] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[EDA_ALARMLOG_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMLOG_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[EDA_ALARMLOG_H] AS SELECT * FROM dbo.[EDA_ALARMLOG]'
END

GO

ALTER VIEW dbo.[EDA_ALARMLOG_H] AS
WITH cn AS (SELECT * FROM dbo.[EDA_ALARMLOG_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[ALARMDEFINITIONFK], t1.[CREATED], t1.[FINALSUBJECT], t1.[FINALTEXT], t1.[TEMPLATESUBJECT], t1.[TEMPLATETEXT], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.EDA_ALARMLOGDELIVERY_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMLOGDELIVERY_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[EDA_ALARMLOGDELIVERY_I] ON dbo.[EDA_ALARMLOGDELIVERY] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[EDA_ALARMLOGDELIVERY] ([ID], EE_TRANS_ID, t1.[ADDRESSINCHANNEL], t1.[ALARMLOGFK], t1.[ALARMLOGSTATEFK], t1.[CHANGEDATE], t1.[FINALSUBJECT], t1.[FINALTEXT], t1.[TEMPLATESUBJECT], t1.[TEMPLATETEXT], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[ADDRESSINCHANNEL], inserted.[ALARMLOGFK], inserted.[ALARMLOGSTATEFK], inserted.[CHANGEDATE], inserted.[FINALSUBJECT], inserted.[FINALTEXT], inserted.[TEMPLATESUBJECT], inserted.[TEMPLATETEXT], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[EDA_ALARMLOGDELIVERY_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ADDRESSINCHANNEL], t1.[ALARMLOGFK], t1.[ALARMLOGSTATEFK], t1.[CHANGEDATE], t1.[FINALSUBJECT], t1.[FINALTEXT], t1.[TEMPLATESUBJECT], t1.[TEMPLATETEXT], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ADDRESSINCHANNEL], inserted.[ALARMLOGFK], inserted.[ALARMLOGSTATEFK], inserted.[CHANGEDATE], inserted.[FINALSUBJECT], inserted.[FINALTEXT], inserted.[TEMPLATESUBJECT], inserted.[TEMPLATETEXT], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMLOGDELIVERY_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMLOGDELIVERY_U]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMLOGDELIVERY_U] ON dbo.[EDA_ALARMLOGDELIVERY] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[EDA_ALARMLOGDELIVERY] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[EDA_ALARMLOGDELIVERY] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[EDA_ALARMLOGDELIVERY_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ADDRESSINCHANNEL], t1.[ALARMLOGFK], t1.[ALARMLOGSTATEFK], t1.[CHANGEDATE], t1.[FINALSUBJECT], t1.[FINALTEXT], t1.[TEMPLATESUBJECT], t1.[TEMPLATETEXT], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ADDRESSINCHANNEL], inserted.[ALARMLOGFK], inserted.[ALARMLOGSTATEFK], inserted.[CHANGEDATE], inserted.[FINALSUBJECT], inserted.[FINALTEXT], inserted.[TEMPLATESUBJECT], inserted.[TEMPLATETEXT], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMLOGDELIVERY_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMLOGDELIVERY_D]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMLOGDELIVERY_D] ON dbo.[EDA_ALARMLOGDELIVERY] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[EDA_ALARMLOGDELIVERY_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMLOGDELIVERY_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[EDA_ALARMLOGDELIVERY_H] AS SELECT * FROM dbo.[EDA_ALARMLOGDELIVERY]'
END

GO

ALTER VIEW dbo.[EDA_ALARMLOGDELIVERY_H] AS
WITH cn AS (SELECT * FROM dbo.[EDA_ALARMLOGDELIVERY_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[ADDRESSINCHANNEL], t1.[ALARMLOGFK], t1.[ALARMLOGSTATEFK], t1.[CHANGEDATE], t1.[FINALSUBJECT], t1.[FINALTEXT], t1.[TEMPLATESUBJECT], t1.[TEMPLATETEXT], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.EDA_ALARMLOGDELIVERYPARAM_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMLOGDELIVERYPARAM_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[EDA_ALARMLOGDELIVERYPARAM_I] ON dbo.[EDA_ALARMLOGDELIVERYPARAM] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[EDA_ALARMLOGDELIVERYPARAM] ([ID], EE_TRANS_ID, t1.[ALARMLOGDELIVERYFK], t1.[KEY], t1.[VALUESTR], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[ALARMLOGDELIVERYFK], inserted.[KEY], inserted.[VALUESTR], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[EDA_ALARMLOGDELIVERYPARAM_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ALARMLOGDELIVERYFK], t1.[KEY], t1.[VALUESTR], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ALARMLOGDELIVERYFK], inserted.[KEY], inserted.[VALUESTR], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMLOGDELIVERYPARAM_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMLOGDELIVERYPARAM_U]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMLOGDELIVERYPARAM_U] ON dbo.[EDA_ALARMLOGDELIVERYPARAM] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[EDA_ALARMLOGDELIVERYPARAM] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[EDA_ALARMLOGDELIVERYPARAM] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[EDA_ALARMLOGDELIVERYPARAM_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ALARMLOGDELIVERYFK], t1.[KEY], t1.[VALUESTR], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ALARMLOGDELIVERYFK], inserted.[KEY], inserted.[VALUESTR], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMLOGDELIVERYPARAM_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMLOGDELIVERYPARAM_D]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMLOGDELIVERYPARAM_D] ON dbo.[EDA_ALARMLOGDELIVERYPARAM] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[EDA_ALARMLOGDELIVERYPARAM_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMLOGDELIVERYPARAM_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[EDA_ALARMLOGDELIVERYPARAM_H] AS SELECT * FROM dbo.[EDA_ALARMLOGDELIVERYPARAM]'
END

GO

ALTER VIEW dbo.[EDA_ALARMLOGDELIVERYPARAM_H] AS
WITH cn AS (SELECT * FROM dbo.[EDA_ALARMLOGDELIVERYPARAM_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[ALARMLOGDELIVERYFK], t1.[KEY], t1.[VALUESTR], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.EDA_ALARMLOGNOTE_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMLOGNOTE_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[EDA_ALARMLOGNOTE_I] ON dbo.[EDA_ALARMLOGNOTE] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[EDA_ALARMLOGNOTE] ([ID], EE_TRANS_ID, t1.[ALARMLOGFK], t1.[DATE], t1.[IDENTITY], t1.[TEXT], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[ALARMLOGFK], inserted.[DATE], inserted.[IDENTITY], inserted.[TEXT], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[EDA_ALARMLOGNOTE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ALARMLOGFK], t1.[DATE], t1.[IDENTITY], t1.[TEXT], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ALARMLOGFK], inserted.[DATE], inserted.[IDENTITY], inserted.[TEXT], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMLOGNOTE_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMLOGNOTE_U]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMLOGNOTE_U] ON dbo.[EDA_ALARMLOGNOTE] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[EDA_ALARMLOGNOTE] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[EDA_ALARMLOGNOTE] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[EDA_ALARMLOGNOTE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ALARMLOGFK], t1.[DATE], t1.[IDENTITY], t1.[TEXT], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ALARMLOGFK], inserted.[DATE], inserted.[IDENTITY], inserted.[TEXT], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMLOGNOTE_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMLOGNOTE_D]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMLOGNOTE_D] ON dbo.[EDA_ALARMLOGNOTE] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[EDA_ALARMLOGNOTE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMLOGNOTE_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[EDA_ALARMLOGNOTE_H] AS SELECT * FROM dbo.[EDA_ALARMLOGNOTE]'
END

GO

ALTER VIEW dbo.[EDA_ALARMLOGNOTE_H] AS
WITH cn AS (SELECT * FROM dbo.[EDA_ALARMLOGNOTE_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[ALARMLOGFK], t1.[DATE], t1.[IDENTITY], t1.[TEXT], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.EDA_ALARMLOGPARAM_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMLOGPARAM_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[EDA_ALARMLOGPARAM_I] ON dbo.[EDA_ALARMLOGPARAM] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[EDA_ALARMLOGPARAM] ([ID], EE_TRANS_ID, t1.[ALARMLOGFK], t1.[KEY], t1.[VALUEDT], t1.[VALUENUM], t1.[VALUESTR], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[ALARMLOGFK], inserted.[KEY], inserted.[VALUEDT], inserted.[VALUENUM], inserted.[VALUESTR], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[EDA_ALARMLOGPARAM_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ALARMLOGFK], t1.[KEY], t1.[VALUEDT], t1.[VALUENUM], t1.[VALUESTR], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ALARMLOGFK], inserted.[KEY], inserted.[VALUEDT], inserted.[VALUENUM], inserted.[VALUESTR], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMLOGPARAM_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMLOGPARAM_U]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMLOGPARAM_U] ON dbo.[EDA_ALARMLOGPARAM] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[EDA_ALARMLOGPARAM] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[EDA_ALARMLOGPARAM] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[EDA_ALARMLOGPARAM_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ALARMLOGFK], t1.[KEY], t1.[VALUEDT], t1.[VALUENUM], t1.[VALUESTR], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ALARMLOGFK], inserted.[KEY], inserted.[VALUEDT], inserted.[VALUENUM], inserted.[VALUESTR], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMLOGPARAM_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMLOGPARAM_D]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMLOGPARAM_D] ON dbo.[EDA_ALARMLOGPARAM] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[EDA_ALARMLOGPARAM_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMLOGPARAM_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[EDA_ALARMLOGPARAM_H] AS SELECT * FROM dbo.[EDA_ALARMLOGPARAM]'
END

GO

ALTER VIEW dbo.[EDA_ALARMLOGPARAM_H] AS
WITH cn AS (SELECT * FROM dbo.[EDA_ALARMLOGPARAM_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[ALARMLOGFK], t1.[KEY], t1.[VALUEDT], t1.[VALUENUM], t1.[VALUESTR], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.EDA_ALARMLOGSTATE_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMLOGSTATE_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[EDA_ALARMLOGSTATE_I] ON dbo.[EDA_ALARMLOGSTATE] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[EDA_ALARMLOGSTATE] ([ID], EE_TRANS_ID, t1.[ALARMCHANNELFK], t1.[CAPTION], t1.[KEY], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[ALARMCHANNELFK], inserted.[CAPTION], inserted.[KEY], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[EDA_ALARMLOGSTATE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ALARMCHANNELFK], t1.[CAPTION], t1.[KEY], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ALARMCHANNELFK], inserted.[CAPTION], inserted.[KEY], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMLOGSTATE_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMLOGSTATE_U]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMLOGSTATE_U] ON dbo.[EDA_ALARMLOGSTATE] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[EDA_ALARMLOGSTATE] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[EDA_ALARMLOGSTATE] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[EDA_ALARMLOGSTATE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ALARMCHANNELFK], t1.[CAPTION], t1.[KEY], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ALARMCHANNELFK], inserted.[CAPTION], inserted.[KEY], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMLOGSTATE_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMLOGSTATE_D]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMLOGSTATE_D] ON dbo.[EDA_ALARMLOGSTATE] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[EDA_ALARMLOGSTATE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMLOGSTATE_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[EDA_ALARMLOGSTATE_H] AS SELECT * FROM dbo.[EDA_ALARMLOGSTATE]'
END

GO

ALTER VIEW dbo.[EDA_ALARMLOGSTATE_H] AS
WITH cn AS (SELECT * FROM dbo.[EDA_ALARMLOGSTATE_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[ALARMCHANNELFK], t1.[CAPTION], t1.[KEY], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.EDA_ALARMNODE_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMNODE_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[EDA_ALARMNODE_I] ON dbo.[EDA_ALARMNODE] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[EDA_ALARMNODE] ([ID], EE_TRANS_ID, t1.[ACTIVE], t1.[ALARMDEFFK], t1.[NODEFK], t1.[SAMPLEFK], t1.[SUBJECT], t1.[TEXT], t1.[TIMEZONEFK], t1.[VALUE], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[ACTIVE], inserted.[ALARMDEFFK], inserted.[NODEFK], inserted.[SAMPLEFK], inserted.[SUBJECT], inserted.[TEXT], inserted.[TIMEZONEFK], inserted.[VALUE], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[EDA_ALARMNODE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ACTIVE], t1.[ALARMDEFFK], t1.[NODEFK], t1.[SAMPLEFK], t1.[SUBJECT], t1.[TEXT], t1.[TIMEZONEFK], t1.[VALUE], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ACTIVE], inserted.[ALARMDEFFK], inserted.[NODEFK], inserted.[SAMPLEFK], inserted.[SUBJECT], inserted.[TEXT], inserted.[TIMEZONEFK], inserted.[VALUE], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMNODE_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMNODE_U]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMNODE_U] ON dbo.[EDA_ALARMNODE] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[EDA_ALARMNODE] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[EDA_ALARMNODE] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[EDA_ALARMNODE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ACTIVE], t1.[ALARMDEFFK], t1.[NODEFK], t1.[SAMPLEFK], t1.[SUBJECT], t1.[TEXT], t1.[TIMEZONEFK], t1.[VALUE], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ACTIVE], inserted.[ALARMDEFFK], inserted.[NODEFK], inserted.[SAMPLEFK], inserted.[SUBJECT], inserted.[TEXT], inserted.[TIMEZONEFK], inserted.[VALUE], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMNODE_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMNODE_D]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMNODE_D] ON dbo.[EDA_ALARMNODE] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[EDA_ALARMNODE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMNODE_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[EDA_ALARMNODE_H] AS SELECT * FROM dbo.[EDA_ALARMNODE]'
END

GO

ALTER VIEW dbo.[EDA_ALARMNODE_H] AS
WITH cn AS (SELECT * FROM dbo.[EDA_ALARMNODE_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[ACTIVE], t1.[ALARMDEFFK], t1.[NODEFK], t1.[SAMPLEFK], t1.[SUBJECT], t1.[TEXT], t1.[TIMEZONEFK], t1.[VALUE], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.EDA_ALARMNODEIDENTITY_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMNODEIDENTITY_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[EDA_ALARMNODEIDENTITY_I] ON dbo.[EDA_ALARMNODEIDENTITY] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[EDA_ALARMNODEIDENTITY] ([ID], EE_TRANS_ID, t1.[ALARMNODEFK], t1.[IDENTITYID], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[ALARMNODEFK], inserted.[IDENTITYID], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[EDA_ALARMNODEIDENTITY_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ALARMNODEFK], t1.[IDENTITYID], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ALARMNODEFK], inserted.[IDENTITYID], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMNODEIDENTITY_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMNODEIDENTITY_U]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMNODEIDENTITY_U] ON dbo.[EDA_ALARMNODEIDENTITY] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[EDA_ALARMNODEIDENTITY] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[EDA_ALARMNODEIDENTITY] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[EDA_ALARMNODEIDENTITY_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ALARMNODEFK], t1.[IDENTITYID], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ALARMNODEFK], inserted.[IDENTITYID], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMNODEIDENTITY_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMNODEIDENTITY_D]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMNODEIDENTITY_D] ON dbo.[EDA_ALARMNODEIDENTITY] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[EDA_ALARMNODEIDENTITY_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMNODEIDENTITY_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[EDA_ALARMNODEIDENTITY_H] AS SELECT * FROM dbo.[EDA_ALARMNODEIDENTITY]'
END

GO

ALTER VIEW dbo.[EDA_ALARMNODEIDENTITY_H] AS
WITH cn AS (SELECT * FROM dbo.[EDA_ALARMNODEIDENTITY_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[ALARMNODEFK], t1.[IDENTITYID], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.EDA_ALARMNODEMAIL_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMNODEMAIL_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[EDA_ALARMNODEMAIL_I] ON dbo.[EDA_ALARMNODEMAIL] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[EDA_ALARMNODEMAIL] ([ID], EE_TRANS_ID, t1.[ADDRESSEENAME], t1.[ALARMNODEFK], t1.[CONFIRMDELIVERY], t1.[MAIL], t1.[NOTES], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[ADDRESSEENAME], inserted.[ALARMNODEFK], inserted.[CONFIRMDELIVERY], inserted.[MAIL], inserted.[NOTES], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[EDA_ALARMNODEMAIL_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ADDRESSEENAME], t1.[ALARMNODEFK], t1.[CONFIRMDELIVERY], t1.[MAIL], t1.[NOTES], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ADDRESSEENAME], inserted.[ALARMNODEFK], inserted.[CONFIRMDELIVERY], inserted.[MAIL], inserted.[NOTES], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMNODEMAIL_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMNODEMAIL_U]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMNODEMAIL_U] ON dbo.[EDA_ALARMNODEMAIL] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[EDA_ALARMNODEMAIL] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[EDA_ALARMNODEMAIL] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[EDA_ALARMNODEMAIL_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ADDRESSEENAME], t1.[ALARMNODEFK], t1.[CONFIRMDELIVERY], t1.[MAIL], t1.[NOTES], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ADDRESSEENAME], inserted.[ALARMNODEFK], inserted.[CONFIRMDELIVERY], inserted.[MAIL], inserted.[NOTES], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMNODEMAIL_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMNODEMAIL_D]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMNODEMAIL_D] ON dbo.[EDA_ALARMNODEMAIL] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[EDA_ALARMNODEMAIL_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMNODEMAIL_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[EDA_ALARMNODEMAIL_H] AS SELECT * FROM dbo.[EDA_ALARMNODEMAIL]'
END

GO

ALTER VIEW dbo.[EDA_ALARMNODEMAIL_H] AS
WITH cn AS (SELECT * FROM dbo.[EDA_ALARMNODEMAIL_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[ADDRESSEENAME], t1.[ALARMNODEFK], t1.[CONFIRMDELIVERY], t1.[MAIL], t1.[NOTES], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.EDA_ALARMNODESMS_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMNODESMS_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[EDA_ALARMNODESMS_I] ON dbo.[EDA_ALARMNODESMS] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[EDA_ALARMNODESMS] ([ID], EE_TRANS_ID, t1.[ALARMNODEFK], t1.[NOTES], t1.[PHONENUMBER], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[ALARMNODEFK], inserted.[NOTES], inserted.[PHONENUMBER], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[EDA_ALARMNODESMS_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ALARMNODEFK], t1.[NOTES], t1.[PHONENUMBER], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ALARMNODEFK], inserted.[NOTES], inserted.[PHONENUMBER], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMNODESMS_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMNODESMS_U]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMNODESMS_U] ON dbo.[EDA_ALARMNODESMS] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[EDA_ALARMNODESMS] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[EDA_ALARMNODESMS] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[EDA_ALARMNODESMS_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ALARMNODEFK], t1.[NOTES], t1.[PHONENUMBER], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ALARMNODEFK], inserted.[NOTES], inserted.[PHONENUMBER], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMNODESMS_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMNODESMS_D]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMNODESMS_D] ON dbo.[EDA_ALARMNODESMS] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[EDA_ALARMNODESMS_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMNODESMS_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[EDA_ALARMNODESMS_H] AS SELECT * FROM dbo.[EDA_ALARMNODESMS]'
END

GO

ALTER VIEW dbo.[EDA_ALARMNODESMS_H] AS
WITH cn AS (SELECT * FROM dbo.[EDA_ALARMNODESMS_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[ALARMNODEFK], t1.[NOTES], t1.[PHONENUMBER], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.EDA_ALARMNODEWINDOW_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMNODEWINDOW_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[EDA_ALARMNODEWINDOW_I] ON dbo.[EDA_ALARMNODEWINDOW] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[EDA_ALARMNODEWINDOW] ([ID], EE_TRANS_ID, t1.[ALARMNODEFK], t1.[IDENTITY], t1.[NOTES], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[ALARMNODEFK], inserted.[IDENTITY], inserted.[NOTES], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[EDA_ALARMNODEWINDOW_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ALARMNODEFK], t1.[IDENTITY], t1.[NOTES], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ALARMNODEFK], inserted.[IDENTITY], inserted.[NOTES], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMNODEWINDOW_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMNODEWINDOW_U]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMNODEWINDOW_U] ON dbo.[EDA_ALARMNODEWINDOW] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[EDA_ALARMNODEWINDOW] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[EDA_ALARMNODEWINDOW] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[EDA_ALARMNODEWINDOW_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ALARMNODEFK], t1.[IDENTITY], t1.[NOTES], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ALARMNODEFK], inserted.[IDENTITY], inserted.[NOTES], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMNODEWINDOW_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMNODEWINDOW_D]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMNODEWINDOW_D] ON dbo.[EDA_ALARMNODEWINDOW] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[EDA_ALARMNODEWINDOW_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMNODEWINDOW_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[EDA_ALARMNODEWINDOW_H] AS SELECT * FROM dbo.[EDA_ALARMNODEWINDOW]'
END

GO

ALTER VIEW dbo.[EDA_ALARMNODEWINDOW_H] AS
WITH cn AS (SELECT * FROM dbo.[EDA_ALARMNODEWINDOW_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[ALARMNODEFK], t1.[IDENTITY], t1.[NOTES], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.EDA_ALARMSEVERITY_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMSEVERITY_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[EDA_ALARMSEVERITY_I] ON dbo.[EDA_ALARMSEVERITY] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[EDA_ALARMSEVERITY] ([ID], EE_TRANS_ID, t1.[ACTIVE], t1.[CAPTION], t1.[DESCRIPTION], t1.[EXTERNALID], t1.[KEY], t1.[SHORTCAPTION], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[ACTIVE], inserted.[CAPTION], inserted.[DESCRIPTION], inserted.[EXTERNALID], inserted.[KEY], inserted.[SHORTCAPTION], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[EDA_ALARMSEVERITY_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ACTIVE], t1.[CAPTION], t1.[DESCRIPTION], t1.[EXTERNALID], t1.[KEY], t1.[SHORTCAPTION], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ACTIVE], inserted.[CAPTION], inserted.[DESCRIPTION], inserted.[EXTERNALID], inserted.[KEY], inserted.[SHORTCAPTION], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMSEVERITY_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMSEVERITY_U]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMSEVERITY_U] ON dbo.[EDA_ALARMSEVERITY] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[EDA_ALARMSEVERITY] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[EDA_ALARMSEVERITY] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[EDA_ALARMSEVERITY_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ACTIVE], t1.[CAPTION], t1.[DESCRIPTION], t1.[EXTERNALID], t1.[KEY], t1.[SHORTCAPTION], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ACTIVE], inserted.[CAPTION], inserted.[DESCRIPTION], inserted.[EXTERNALID], inserted.[KEY], inserted.[SHORTCAPTION], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMSEVERITY_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMSEVERITY_D]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMSEVERITY_D] ON dbo.[EDA_ALARMSEVERITY] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[EDA_ALARMSEVERITY_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMSEVERITY_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[EDA_ALARMSEVERITY_H] AS SELECT * FROM dbo.[EDA_ALARMSEVERITY]'
END

GO

ALTER VIEW dbo.[EDA_ALARMSEVERITY_H] AS
WITH cn AS (SELECT * FROM dbo.[EDA_ALARMSEVERITY_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[ACTIVE], t1.[CAPTION], t1.[DESCRIPTION], t1.[EXTERNALID], t1.[KEY], t1.[SHORTCAPTION], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.EDA_ALARMTYPE_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMTYPE_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[EDA_ALARMTYPE_I] ON dbo.[EDA_ALARMTYPE] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[EDA_ALARMTYPE] ([ID], EE_TRANS_ID, t1.[CAPTION], t1.[KEY], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[CAPTION], inserted.[KEY], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[EDA_ALARMTYPE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[CAPTION], t1.[KEY], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[CAPTION], inserted.[KEY], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMTYPE_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMTYPE_U]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMTYPE_U] ON dbo.[EDA_ALARMTYPE] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[EDA_ALARMTYPE] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[EDA_ALARMTYPE] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[EDA_ALARMTYPE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[CAPTION], t1.[KEY], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[CAPTION], inserted.[KEY], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMTYPE_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMTYPE_D]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMTYPE_D] ON dbo.[EDA_ALARMTYPE] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[EDA_ALARMTYPE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMTYPE_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[EDA_ALARMTYPE_H] AS SELECT * FROM dbo.[EDA_ALARMTYPE]'
END

GO

ALTER VIEW dbo.[EDA_ALARMTYPE_H] AS
WITH cn AS (SELECT * FROM dbo.[EDA_ALARMTYPE_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[CAPTION], t1.[KEY], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.EDA_ALARMVALUE_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMVALUE_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[EDA_ALARMVALUE_I] ON dbo.[EDA_ALARMVALUE] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[EDA_ALARMVALUE] ([ID], EE_TRANS_ID, t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[EDA_ALARMVALUE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMVALUE_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMVALUE_U]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMVALUE_U] ON dbo.[EDA_ALARMVALUE] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[EDA_ALARMVALUE] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[EDA_ALARMVALUE] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[EDA_ALARMVALUE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMVALUE_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_ALARMVALUE_D]'
END

GO

CREATE TRIGGER dbo.[EDA_ALARMVALUE_D] ON dbo.[EDA_ALARMVALUE] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[EDA_ALARMVALUE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_ALARMVALUE_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[EDA_ALARMVALUE_H] AS SELECT * FROM dbo.[EDA_ALARMVALUE]'
END

GO

ALTER VIEW dbo.[EDA_ALARMVALUE_H] AS
WITH cn AS (SELECT * FROM dbo.[EDA_ALARMVALUE_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO
-- 3: závislé objekty (lokalizace)
GO
-- 4: číselníky
GO
INSERT INTO dbo.[EDA_ALARMTYPE] ([ID], [SYS_VER], [CAPTION], [KEY]) VALUES ('1', 1, 'Uživatelský alarm', 'User')
GO
INSERT INTO dbo.[EDA_ALARMTYPE] ([ID], [SYS_VER], [CAPTION], [KEY]) VALUES ('2', 1, 'Zamítnutý obchod', 'TradeR')
GO
INSERT INTO dbo.[EDA_ALARMSEVERITY] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [KEY], [SHORTCAPTION]) VALUES ('1', 1, '1', 'Informace', 'Info', 'Informace')
GO
INSERT INTO dbo.[EDA_ALARMSEVERITY] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [KEY], [SHORTCAPTION]) VALUES ('2', 1, '1', 'Varování', 'Warning', 'Varování')
GO
INSERT INTO dbo.[EDA_ALARMSEVERITY] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [KEY], [SHORTCAPTION]) VALUES ('3', 1, '1', 'Chyba', 'Error', 'Chyba')
GO
INSERT INTO dbo.[EDA_ALARMSEVERITY] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [KEY], [SHORTCAPTION]) VALUES ('4', 1, '1', 'Kritická', 'Critical', 'Kritická')
GO
INSERT INTO dbo.[EDA_ALARMDEFINITION] ([ID], [SYS_VER], [ALARMTYPEFK], [KEY]) VALUES ('1', 1, '1', 'User')
GO
INSERT INTO dbo.[EDA_ALARMCHANNEL] ([ID], [SYS_VER], [CAPTION], [KEY]) VALUES ('1', 1, 'Okno', 'Window')
GO
INSERT INTO dbo.[EDA_ALARMCHANNEL] ([ID], [SYS_VER], [CAPTION], [KEY]) VALUES ('2', 1, 'Email', 'Email')
GO
INSERT INTO dbo.[EDA_ALARMCHANNEL] ([ID], [SYS_VER], [CAPTION], [KEY]) VALUES ('3', 1, 'Sms', 'Sms')
GO
INSERT INTO dbo.[EDA_ALARMLOGSTATE] ([ID], [SYS_VER], [ALARMCHANNELFK], [CAPTION], [KEY]) VALUES ('1', 1, '1', 'Nezobrazeno', 'NotShown')
GO
INSERT INTO dbo.[EDA_ALARMLOGSTATE] ([ID], [SYS_VER], [ALARMCHANNELFK], [CAPTION], [KEY]) VALUES ('2', 1, '1', 'Zobrazeno', 'Shown')
GO
INSERT INTO dbo.[EDA_ALARMLOGSTATE] ([ID], [SYS_VER], [ALARMCHANNELFK], [CAPTION], [KEY]) VALUES ('3', 1, '1', 'Přečteno', 'Read')
GO
INSERT INTO dbo.[EDA_ALARMLOGSTATE] ([ID], [SYS_VER], [ALARMCHANNELFK], [CAPTION], [KEY]) VALUES ('11', 1, '2', 'Neposláno', 'NotSent')
GO
INSERT INTO dbo.[EDA_ALARMLOGSTATE] ([ID], [SYS_VER], [ALARMCHANNELFK], [CAPTION], [KEY]) VALUES ('12', 1, '2', 'Posláno', 'Sent')
GO
INSERT INTO dbo.[EDA_ALARMLOGSTATE] ([ID], [SYS_VER], [ALARMCHANNELFK], [CAPTION], [KEY]) VALUES ('13', 1, '2', 'Přečteno', 'Read')
GO
INSERT INTO dbo.[EDA_ALARMLOGSTATE] ([ID], [SYS_VER], [ALARMCHANNELFK], [CAPTION], [KEY]) VALUES ('21', 1, '3', 'Neposláno', 'NotSent')
GO
INSERT INTO dbo.[EDA_ALARMLOGSTATE] ([ID], [SYS_VER], [ALARMCHANNELFK], [CAPTION], [KEY]) VALUES ('22', 1, '3', 'Posláno', 'Sent')
GO

-- uložíme informace o transakci, v jejímž rámci se příp. měnila data
BEGIN
	declare @transId bigint
	declare @commitId bigint
	exec dbo.ENIF_LOG_COMMIT 'system', 1, NULL, NULL, @commit_id_p = @commitId OUTPUT
	exec @transId = dbo.GetExistingTransactionId
	exec dbo.ee_log_transaction @transId, 'system', NULL, 'c', @commitId
END
GO


BEGIN
	declare @transId bigint
	exec dbo.ee_init_transaction @trans_id = @transId
END

GO
-- 1: tabulky
GO
DROP INDEX [UQ_EDA_WONFIG_FULLNAME_34671AB] ON dbo.[EDA_WFCONFIG]
GO
ALTER TABLE dbo.[EDA_WFCONFIG] ALTER COLUMN [FULLNAME] nvarchar(400) NOT NULL
GO
ALTER TABLE dbo.[EDA_WFCONFIG_C] ALTER COLUMN [FULLNAME] nvarchar(400)
GO
CREATE UNIQUE INDEX [UQ_EDA_WONFIG_FULLNAME_34671AB] ON dbo.[EDA_WFCONFIG]([FULLNAME]) WHERE [FULLNAME] IS NOT NULL
GO
-- 2: triggery a pohledy
GO

IF OBJECT_ID(N'dbo.EDA_WFCONFIG_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_WFCONFIG_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[EDA_WFCONFIG_I] ON dbo.[EDA_WFCONFIG] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[EDA_WFCONFIG] ([ID], EE_TRANS_ID, t1.[DATA], t1.[FULLNAME], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[DATA], inserted.[FULLNAME], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[EDA_WFCONFIG_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[DATA], t1.[FULLNAME], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[DATA], inserted.[FULLNAME], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_WFCONFIG_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_WFCONFIG_U]'
END

GO

CREATE TRIGGER dbo.[EDA_WFCONFIG_U] ON dbo.[EDA_WFCONFIG] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[EDA_WFCONFIG] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[EDA_WFCONFIG] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[EDA_WFCONFIG_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[DATA], t1.[FULLNAME], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[DATA], inserted.[FULLNAME], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_WFCONFIG_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[EDA_WFCONFIG_D]'
END

GO

CREATE TRIGGER dbo.[EDA_WFCONFIG_D] ON dbo.[EDA_WFCONFIG] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[EDA_WFCONFIG_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.EDA_WFCONFIG_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[EDA_WFCONFIG_H] AS SELECT * FROM dbo.[EDA_WFCONFIG]'
END

GO

ALTER VIEW dbo.[EDA_WFCONFIG_H] AS
WITH cn AS (SELECT * FROM dbo.[EDA_WFCONFIG_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[DATA], t1.[FULLNAME], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO
-- 3: závislé objekty (lokalizace)
GO
-- 4: číselníky
GO

-- uložíme informace o transakci, v jejímž rámci se příp. měnila data
BEGIN
	declare @transId bigint
	declare @commitId bigint
	exec dbo.ENIF_LOG_COMMIT 'system', 1, NULL, NULL, @commit_id_p = @commitId OUTPUT
	exec @transId = dbo.GetExistingTransactionId
	exec dbo.ee_log_transaction @transId, 'system', NULL, 'c', @commitId
END
GO


BEGIN
	declare @transId bigint
	exec dbo.ee_init_transaction @trans_id = @transId
END

GO
-- 1: tabulky
GO
ALTER TABLE dbo.[BSE_IDENTITYVIEW] ALTER COLUMN [TYPE] bigint NOT NULL
GO
ALTER TABLE dbo.[BSE_IDENTITYVIEW_C] ALTER COLUMN [TYPE] bigint
GO
-- 2: triggery a pohledy
GO

IF OBJECT_ID(N'dbo.BSE_IDENTITYVIEW_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[BSE_IDENTITYVIEW_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[BSE_IDENTITYVIEW_I] ON dbo.[BSE_IDENTITYVIEW] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[BSE_IDENTITYVIEW] ([ID], EE_TRANS_ID, t1.[ACTIVE], t1.[DESCRIPTION], t1.[DTCREATE], t1.[DTDELETE], t1.[EMAIL], t1.[FIRSTNAME], t1.[IDENTITYID], t1.[LASTNAME], t1.[NAME], t1.[TYPE], t1.[USEASROLE], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[ACTIVE], inserted.[DESCRIPTION], inserted.[DTCREATE], inserted.[DTDELETE], inserted.[EMAIL], inserted.[FIRSTNAME], inserted.[IDENTITYID], inserted.[LASTNAME], inserted.[NAME], inserted.[TYPE], inserted.[USEASROLE], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[BSE_IDENTITYVIEW_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ACTIVE], t1.[DESCRIPTION], t1.[DTCREATE], t1.[DTDELETE], t1.[EMAIL], t1.[FIRSTNAME], t1.[IDENTITYID], t1.[LASTNAME], t1.[NAME], t1.[TYPE], t1.[USEASROLE], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ACTIVE], inserted.[DESCRIPTION], inserted.[DTCREATE], inserted.[DTDELETE], inserted.[EMAIL], inserted.[FIRSTNAME], inserted.[IDENTITYID], inserted.[LASTNAME], inserted.[NAME], inserted.[TYPE], inserted.[USEASROLE], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.BSE_IDENTITYVIEW_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[BSE_IDENTITYVIEW_U]'
END

GO

CREATE TRIGGER dbo.[BSE_IDENTITYVIEW_U] ON dbo.[BSE_IDENTITYVIEW] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[BSE_IDENTITYVIEW] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[BSE_IDENTITYVIEW] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[BSE_IDENTITYVIEW_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ACTIVE], t1.[DESCRIPTION], t1.[DTCREATE], t1.[DTDELETE], t1.[EMAIL], t1.[FIRSTNAME], t1.[IDENTITYID], t1.[LASTNAME], t1.[NAME], t1.[TYPE], t1.[USEASROLE], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ACTIVE], inserted.[DESCRIPTION], inserted.[DTCREATE], inserted.[DTDELETE], inserted.[EMAIL], inserted.[FIRSTNAME], inserted.[IDENTITYID], inserted.[LASTNAME], inserted.[NAME], inserted.[TYPE], inserted.[USEASROLE], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.BSE_IDENTITYVIEW_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[BSE_IDENTITYVIEW_D]'
END

GO

CREATE TRIGGER dbo.[BSE_IDENTITYVIEW_D] ON dbo.[BSE_IDENTITYVIEW] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[BSE_IDENTITYVIEW_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.BSE_IDENTITYVIEW_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[BSE_IDENTITYVIEW_H] AS SELECT * FROM dbo.[BSE_IDENTITYVIEW]'
END

GO

ALTER VIEW dbo.[BSE_IDENTITYVIEW_H] AS
WITH cn AS (SELECT * FROM dbo.[BSE_IDENTITYVIEW_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[ACTIVE], t1.[DESCRIPTION], t1.[DTCREATE], t1.[DTDELETE], t1.[EMAIL], t1.[FIRSTNAME], t1.[IDENTITYID], t1.[LASTNAME], t1.[NAME], t1.[TYPE], t1.[USEASROLE], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO
-- 3: závislé objekty (lokalizace)
GO
-- 4: číselníky
GO
INSERT INTO dbo.[BSE_ADDRESSTYPE] ([ID], [SYS_VER], [ACTIVE], [KEY], [CAPTION], [DESCRIPTION]) VALUES ('3', 1, '1', 'DOCREC', 'Fakturační adresa', 'Adresa pro zasílání faktur.')
GO

-- uložíme informace o transakci, v jejímž rámci se příp. měnila data
BEGIN
	declare @transId bigint
	declare @commitId bigint
	exec dbo.ENIF_LOG_COMMIT 'system', 1, NULL, NULL, @commit_id_p = @commitId OUTPUT
	exec @transId = dbo.GetExistingTransactionId
	exec dbo.ee_log_transaction @transId, 'system', NULL, 'c', @commitId
END
GO


BEGIN
	declare @transId bigint
	exec dbo.ee_init_transaction @trans_id = @transId
END

GO
-- 1: tabulky
GO
-- 2: triggery a pohledy
GO
-- 3: závislé objekty (lokalizace)
GO
-- 4: číselníky
GO

-- uložíme informace o transakci, v jejímž rámci se příp. měnila data
BEGIN
	declare @transId bigint
	declare @commitId bigint
	exec dbo.ENIF_LOG_COMMIT 'system', 1, NULL, NULL, @commit_id_p = @commitId OUTPUT
	exec @transId = dbo.GetExistingTransactionId
	exec dbo.ee_log_transaction @transId, 'system', NULL, 'c', @commitId
END
GO


BEGIN
	declare @transId bigint
	exec dbo.ee_init_transaction @trans_id = @transId
END

GO
-- 1: tabulky
GO
ALTER TABLE dbo.[LMS_MAIL_TEMPLATES] ALTER COLUMN [M_BODY] NVARCHAR(MAX) NOT NULL
GO
ALTER TABLE dbo.[LMS_MAIL_TEMPLATES_C] ALTER COLUMN [M_BODY] NVARCHAR(MAX)
GO
ALTER TABLE dbo.[LMS_MAILS] ALTER COLUMN [M_BODY] NVARCHAR(MAX) NULL
GO
ALTER TABLE dbo.[LMS_MAILS_C] ALTER COLUMN [M_BODY] NVARCHAR(MAX)
GO
-- 2: triggery a pohledy
GO

IF OBJECT_ID(N'dbo.LMS_MAIL_TEMPLATES_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[LMS_MAIL_TEMPLATES_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[LMS_MAIL_TEMPLATES_I] ON dbo.[LMS_MAIL_TEMPLATES] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[LMS_MAIL_TEMPLATES] ([ID], EE_TRANS_ID, t1.[M_SUBJECT], t1.[M_FROM], t1.[M_TO], t1.[M_CC], t1.[NOTIF_REQUIRED], t1.[M_BODY], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[M_SUBJECT], inserted.[M_FROM], inserted.[M_TO], inserted.[M_CC], inserted.[NOTIF_REQUIRED], inserted.[M_BODY], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[LMS_MAIL_TEMPLATES_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[M_SUBJECT], t1.[M_FROM], t1.[M_TO], t1.[M_CC], t1.[NOTIF_REQUIRED], t1.[M_BODY], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[M_SUBJECT], inserted.[M_FROM], inserted.[M_TO], inserted.[M_CC], inserted.[NOTIF_REQUIRED], inserted.[M_BODY], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.LMS_MAIL_TEMPLATES_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[LMS_MAIL_TEMPLATES_U]'
END

GO

CREATE TRIGGER dbo.[LMS_MAIL_TEMPLATES_U] ON dbo.[LMS_MAIL_TEMPLATES] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[LMS_MAIL_TEMPLATES] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[LMS_MAIL_TEMPLATES] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[LMS_MAIL_TEMPLATES_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[M_SUBJECT], t1.[M_FROM], t1.[M_TO], t1.[M_CC], t1.[NOTIF_REQUIRED], t1.[M_BODY], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[M_SUBJECT], inserted.[M_FROM], inserted.[M_TO], inserted.[M_CC], inserted.[NOTIF_REQUIRED], inserted.[M_BODY], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.LMS_MAIL_TEMPLATES_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[LMS_MAIL_TEMPLATES_D]'
END

GO

CREATE TRIGGER dbo.[LMS_MAIL_TEMPLATES_D] ON dbo.[LMS_MAIL_TEMPLATES] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[LMS_MAIL_TEMPLATES_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.LMS_MAIL_TEMPLATES_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[LMS_MAIL_TEMPLATES_H] AS SELECT * FROM dbo.[LMS_MAIL_TEMPLATES]'
END

GO

ALTER VIEW dbo.[LMS_MAIL_TEMPLATES_H] AS
WITH cn AS (SELECT * FROM dbo.[LMS_MAIL_TEMPLATES_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[M_SUBJECT], t1.[M_FROM], t1.[M_TO], t1.[M_CC], t1.[NOTIF_REQUIRED], t1.[M_BODY], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.LMS_MAILS_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[LMS_MAILS_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[LMS_MAILS_I] ON dbo.[LMS_MAILS] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[LMS_MAILS] ([ID], EE_TRANS_ID, t1.[M_SUBJECT], t1.[M_FROM], t1.[M_TO], t1.[M_CC], t1.[M_BCC], t1.[STATUS_DETAIL], t1.[DATE_RECEIVED_UTC], t1.[DATE_SENT_UTC], t1.[HTML_BODY], t1.[NOTIF_REQUIRED], t1.[STATUS_FK], t1.[TEMPLATE_FK], t1.[M_BODY], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[M_SUBJECT], inserted.[M_FROM], inserted.[M_TO], inserted.[M_CC], inserted.[M_BCC], inserted.[STATUS_DETAIL], inserted.[DATE_RECEIVED_UTC], inserted.[DATE_SENT_UTC], inserted.[HTML_BODY], inserted.[NOTIF_REQUIRED], inserted.[STATUS_FK], inserted.[TEMPLATE_FK], inserted.[M_BODY], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[LMS_MAILS_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[M_SUBJECT], t1.[M_FROM], t1.[M_TO], t1.[M_CC], t1.[M_BCC], t1.[STATUS_DETAIL], t1.[DATE_RECEIVED_UTC], t1.[DATE_SENT_UTC], t1.[HTML_BODY], t1.[NOTIF_REQUIRED], t1.[STATUS_FK], t1.[TEMPLATE_FK], t1.[M_BODY], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[M_SUBJECT], inserted.[M_FROM], inserted.[M_TO], inserted.[M_CC], inserted.[M_BCC], inserted.[STATUS_DETAIL], inserted.[DATE_RECEIVED_UTC], inserted.[DATE_SENT_UTC], inserted.[HTML_BODY], inserted.[NOTIF_REQUIRED], inserted.[STATUS_FK], inserted.[TEMPLATE_FK], inserted.[M_BODY], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.LMS_MAILS_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[LMS_MAILS_U]'
END

GO

CREATE TRIGGER dbo.[LMS_MAILS_U] ON dbo.[LMS_MAILS] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[LMS_MAILS] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[LMS_MAILS] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[LMS_MAILS_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[M_SUBJECT], t1.[M_FROM], t1.[M_TO], t1.[M_CC], t1.[M_BCC], t1.[STATUS_DETAIL], t1.[DATE_RECEIVED_UTC], t1.[DATE_SENT_UTC], t1.[HTML_BODY], t1.[NOTIF_REQUIRED], t1.[STATUS_FK], t1.[TEMPLATE_FK], t1.[M_BODY], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[M_SUBJECT], inserted.[M_FROM], inserted.[M_TO], inserted.[M_CC], inserted.[M_BCC], inserted.[STATUS_DETAIL], inserted.[DATE_RECEIVED_UTC], inserted.[DATE_SENT_UTC], inserted.[HTML_BODY], inserted.[NOTIF_REQUIRED], inserted.[STATUS_FK], inserted.[TEMPLATE_FK], inserted.[M_BODY], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.LMS_MAILS_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[LMS_MAILS_D]'
END

GO

CREATE TRIGGER dbo.[LMS_MAILS_D] ON dbo.[LMS_MAILS] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[LMS_MAILS_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.LMS_MAILS_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[LMS_MAILS_H] AS SELECT * FROM dbo.[LMS_MAILS]'
END

GO

ALTER VIEW dbo.[LMS_MAILS_H] AS
WITH cn AS (SELECT * FROM dbo.[LMS_MAILS_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[M_SUBJECT], t1.[M_FROM], t1.[M_TO], t1.[M_CC], t1.[M_BCC], t1.[STATUS_DETAIL], t1.[DATE_RECEIVED_UTC], t1.[DATE_SENT_UTC], t1.[HTML_BODY], t1.[NOTIF_REQUIRED], t1.[STATUS_FK], t1.[TEMPLATE_FK], t1.[M_BODY], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO
-- 3: závislé objekty (lokalizace)
GO
-- 4: číselníky
GO

-- uložíme informace o transakci, v jejímž rámci se příp. měnila data
BEGIN
	declare @transId bigint
	declare @commitId bigint
	exec dbo.ENIF_LOG_COMMIT 'system', 1, NULL, NULL, @commit_id_p = @commitId OUTPUT
	exec @transId = dbo.GetExistingTransactionId
	exec dbo.ee_log_transaction @transId, 'system', NULL, 'c', @commitId
END
GO


BEGIN
	declare @transId bigint
	exec dbo.ee_init_transaction @trans_id = @transId
END

GO
-- 1: tabulky
GO
DROP INDEX [UQ_APG_ASTATE_KEY_8D42F51] ON dbo.[APG_APGWORKFLOWSTATE]
GO
ALTER TABLE dbo.[APG_APGWORKFLOWSTATE] ALTER COLUMN [KEY] nvarchar(400) NOT NULL
GO
ALTER TABLE dbo.[APG_APGWORKFLOWSTATE_C] ALTER COLUMN [KEY] nvarchar(400)
GO
CREATE UNIQUE INDEX [UQ_APG_ASTATE_KEY_8D42F51] ON dbo.[APG_APGWORKFLOWSTATE]([KEY]) WHERE [KEY] IS NOT NULL
GO
CREATE TABLE dbo.[APG_ALARM] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [ACTIVE] bit, [ALARMDEFINITIONFK] bigint, [SENDEMAIL] bit, [SENDSMS] bit, [SHOWPOPUP] bit, [TALARMTRIGGERFK] bigint, [SYS_VER] int )
GO

CREATE TABLE dbo.[APG_ALARM_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [ACTIVE] bit, [ALARMDEFINITIONFK] bigint, [SENDEMAIL] bit, [SENDSMS] bit, [SHOWPOPUP] bit, [TALARMTRIGGERFK] bigint, [SYS_VER] int
)
GO
CREATE TABLE dbo.[APG_ALARM_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[APG_ALARM_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[APG_ALARM] ADD DEFAULT ('1') FOR [ACTIVE]
GO
UPDATE dbo.[APG_ALARM] SET [ACTIVE] = '1' WHERE [ACTIVE] IS NULL
GO
ALTER TABLE dbo.[APG_ALARM] ALTER COLUMN [ACTIVE] bit NOT NULL
GO
ALTER TABLE dbo.[APG_ALARM] ALTER COLUMN [ALARMDEFINITIONFK] bigint NOT NULL
GO
ALTER TABLE dbo.[APG_ALARM] ADD DEFAULT ('1') FOR [SENDEMAIL]
GO
UPDATE dbo.[APG_ALARM] SET [SENDEMAIL] = '1' WHERE [SENDEMAIL] IS NULL
GO
ALTER TABLE dbo.[APG_ALARM] ALTER COLUMN [SENDEMAIL] bit NOT NULL
GO
ALTER TABLE dbo.[APG_ALARM] ADD DEFAULT ('1') FOR [SENDSMS]
GO
UPDATE dbo.[APG_ALARM] SET [SENDSMS] = '1' WHERE [SENDSMS] IS NULL
GO
ALTER TABLE dbo.[APG_ALARM] ALTER COLUMN [SENDSMS] bit NOT NULL
GO
ALTER TABLE dbo.[APG_ALARM] ADD DEFAULT ('1') FOR [SHOWPOPUP]
GO
UPDATE dbo.[APG_ALARM] SET [SHOWPOPUP] = '1' WHERE [SHOWPOPUP] IS NULL
GO
ALTER TABLE dbo.[APG_ALARM] ALTER COLUMN [SHOWPOPUP] bit NOT NULL
GO
ALTER TABLE dbo.[APG_ALARM] ALTER COLUMN [TALARMTRIGGERFK] bigint NOT NULL
GO
ALTER TABLE dbo.[APG_ALARM] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[APG_ALARM] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[APG_ALARM] ALTER COLUMN [SYS_VER] int NOT NULL
GO
CREATE TABLE dbo.[APG_ALARMTEMPLATE] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [ALARMTRIGGERFK] bigint, [KEY] nvarchar(max), [SUBJECT] nvarchar(max), [TEXT] nvarchar(max), [SYS_VER] int )
GO

CREATE TABLE dbo.[APG_ALARMTEMPLATE_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [ALARMTRIGGERFK] bigint, [KEY] nvarchar(max), [SUBJECT] nvarchar(max), [TEXT] nvarchar(max), [SYS_VER] int
)
GO
CREATE TABLE dbo.[APG_ALARMTEMPLATE_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[APG_ALARMTEMPLATE_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[APG_ALARMTEMPLATE] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[APG_ALARMTEMPLATE] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[APG_ALARMTEMPLATE] ALTER COLUMN [SYS_VER] int NOT NULL
GO
CREATE TABLE dbo.[APG_ALARMTRIGGER] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [ACTIVE] bit, [CAPTION] nvarchar(max), [DESCRIPTION] nvarchar(max), [KEY] nvarchar(400), [PARENTTRIGGERFK] bigint, [SYS_VER] int )
GO

CREATE TABLE dbo.[APG_ALARMTRIGGER_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [ACTIVE] bit, [CAPTION] nvarchar(max), [DESCRIPTION] nvarchar(max), [KEY] nvarchar(400), [PARENTTRIGGERFK] bigint, [SYS_VER] int
)
GO
CREATE TABLE dbo.[APG_ALARMTRIGGER_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[APG_ALARMTRIGGER_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[APG_ALARMTRIGGER] ALTER COLUMN [ACTIVE] bit NOT NULL
GO
ALTER TABLE dbo.[APG_ALARMTRIGGER] ALTER COLUMN [CAPTION] nvarchar(max) NOT NULL
GO
ALTER TABLE dbo.[APG_ALARMTRIGGER] ALTER COLUMN [KEY] nvarchar(400) NOT NULL
GO
CREATE UNIQUE INDEX [UQ_APG_AIGGER_KEY_0DF9D30] ON dbo.[APG_ALARMTRIGGER]([KEY]) WHERE [KEY] IS NOT NULL
GO
ALTER TABLE dbo.[APG_ALARMTRIGGER] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[APG_ALARMTRIGGER] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[APG_ALARMTRIGGER] ALTER COLUMN [SYS_VER] int NOT NULL
GO
CREATE TABLE dbo.[APG_ALARMTRIGGERLOG] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [ALARMTRIGGERFK] bigint, [TRIGGEREDAT] datetime, [SYS_VER] int )
GO

CREATE TABLE dbo.[APG_ALARMTRIGGERLOG_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [ALARMTRIGGERFK] bigint, [TRIGGEREDAT] datetime, [SYS_VER] int
)
GO
CREATE TABLE dbo.[APG_ALARMTRIGGERLOG_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[APG_ALARMTRIGGERLOG_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[APG_ALARMTRIGGERLOG] ALTER COLUMN [ALARMTRIGGERFK] bigint NOT NULL
GO
ALTER TABLE dbo.[APG_ALARMTRIGGERLOG] ALTER COLUMN [TRIGGEREDAT] datetime NOT NULL
GO
ALTER TABLE dbo.[APG_ALARMTRIGGERLOG] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[APG_ALARMTRIGGERLOG] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[APG_ALARMTRIGGERLOG] ALTER COLUMN [SYS_VER] int NOT NULL
GO
CREATE TABLE dbo.[APG_ALARMTRIGGERLOGPARAM] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [ALARMTRIGGERLOGFK] bigint, [NAME] nvarchar(max), [VALUESTR] nvarchar(max), [SYS_VER] int )
GO

CREATE TABLE dbo.[APG_ALARMTRIGGERLOGPARAM_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [ALARMTRIGGERLOGFK] bigint, [NAME] nvarchar(max), [VALUESTR] nvarchar(max), [SYS_VER] int
)
GO
CREATE TABLE dbo.[APG_ALARMTRIGGERLOGPARAM_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[APG_ALARMTRIGGERLOGPARAM_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[APG_ALARMTRIGGERLOGPARAM] ALTER COLUMN [ALARMTRIGGERLOGFK] bigint NOT NULL
GO
ALTER TABLE dbo.[APG_ALARMTRIGGERLOGPARAM] ALTER COLUMN [NAME] nvarchar(max) NOT NULL
GO
ALTER TABLE dbo.[APG_ALARMTRIGGERLOGPARAM] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[APG_ALARMTRIGGERLOGPARAM] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[APG_ALARMTRIGGERLOGPARAM] ALTER COLUMN [SYS_VER] int NOT NULL
GO
CREATE TABLE dbo.[APG_MALARMCONTACTGROUP] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [ALARMFK] bigint, [CONTACTGROUPFK] bigint, [SYS_VER] int )
GO

CREATE TABLE dbo.[APG_MALARMCONTACTGROUP_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [ALARMFK] bigint, [CONTACTGROUPFK] bigint, [SYS_VER] int
)
GO
CREATE TABLE dbo.[APG_MALARMCONTACTGROUP_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[APG_MALARMCONTACTGROUP_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[APG_MALARMCONTACTGROUP] ALTER COLUMN [ALARMFK] bigint NOT NULL
GO
ALTER TABLE dbo.[APG_MALARMCONTACTGROUP] ALTER COLUMN [CONTACTGROUPFK] bigint NOT NULL
GO
ALTER TABLE dbo.[APG_MALARMCONTACTGROUP] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[APG_MALARMCONTACTGROUP] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[APG_MALARMCONTACTGROUP] ALTER COLUMN [SYS_VER] int NOT NULL
GO

ALTER TABLE dbo.[APG_ALARM]
ADD CONSTRAINT [FK_APG_LARM_EDA_TION_129FA6C]
FOREIGN KEY ([ALARMDEFINITIONFK]) REFERENCES dbo.[EDA_ALARMDEFINITION] ( [ID] )

GO
CREATE INDEX [IX_APG_LARM_ALARONFK_BBE1181] ON dbo.[APG_ALARM] ([ALARMDEFINITIONFK])
GO
CREATE INDEX [IX_APG_LARM_ALARONFK_BBE1181_C] ON dbo.[APG_ALARM_C] ([ALARMDEFINITIONFK])
GO

ALTER TABLE dbo.[APG_ALARM]
ADD CONSTRAINT [FK_APG_LARM_APG_GGER_8513E7C]
FOREIGN KEY ([TALARMTRIGGERFK]) REFERENCES dbo.[APG_ALARMTRIGGER] ( [ID] )

GO
CREATE INDEX [IX_APG_LARM_TALAERFK_34153EB] ON dbo.[APG_ALARM] ([TALARMTRIGGERFK])
GO
CREATE INDEX [IX_APG_LARM_TALAERFK_34153EB_C] ON dbo.[APG_ALARM_C] ([TALARMTRIGGERFK])
GO

ALTER TABLE dbo.[APG_ALARMTEMPLATE]
ADD CONSTRAINT [FK_APG_LATE_APG_GGER_2448B5A]
FOREIGN KEY ([ALARMTRIGGERFK]) REFERENCES dbo.[APG_ALARMTRIGGER] ( [ID] )

GO
CREATE INDEX [IX_APG_LATE_ALARERFK_B531413] ON dbo.[APG_ALARMTEMPLATE] ([ALARMTRIGGERFK])
GO
CREATE INDEX [IX_APG_LATE_ALARERFK_B531413_C] ON dbo.[APG_ALARMTEMPLATE_C] ([ALARMTRIGGERFK])
GO

ALTER TABLE dbo.[APG_ALARMTRIGGER]
ADD CONSTRAINT [FK_APG_GGER_APG_GGER_49E3E8F]
FOREIGN KEY ([PARENTTRIGGERFK]) REFERENCES dbo.[APG_ALARMTRIGGER] ( [ID] )

GO
CREATE INDEX [IX_APG_GGER_PAREERFK_DCE53F4] ON dbo.[APG_ALARMTRIGGER] ([PARENTTRIGGERFK])
GO
CREATE INDEX [IX_APG_GGER_PAREERFK_DCE53F4_C] ON dbo.[APG_ALARMTRIGGER_C] ([PARENTTRIGGERFK])
GO

ALTER TABLE dbo.[APG_ALARMTRIGGERLOG]
ADD CONSTRAINT [FK_APG_RLOG_APG_GGER_B2401E0]
FOREIGN KEY ([ALARMTRIGGERFK]) REFERENCES dbo.[APG_ALARMTRIGGER] ( [ID] )

GO
CREATE INDEX [IX_APG_RLOG_ALARERFK_926AF3A] ON dbo.[APG_ALARMTRIGGERLOG] ([ALARMTRIGGERFK])
GO
CREATE INDEX [IX_APG_RLOG_ALARERFK_926AF3A_C] ON dbo.[APG_ALARMTRIGGERLOG_C] ([ALARMTRIGGERFK])
GO

ALTER TABLE dbo.[APG_ALARMTRIGGERLOGPARAM]
ADD CONSTRAINT [FK_APG_ARAM_APG_RLOG_E95D511]
FOREIGN KEY ([ALARMTRIGGERLOGFK]) REFERENCES dbo.[APG_ALARMTRIGGERLOG] ( [ID] )

GO
CREATE INDEX [IX_APG_ARAM_ALAROGFK_CE03ED4] ON dbo.[APG_ALARMTRIGGERLOGPARAM] ([ALARMTRIGGERLOGFK])
GO
CREATE INDEX [IX_APG_ARAM_ALAROGFK_CE03ED4_C] ON dbo.[APG_ALARMTRIGGERLOGPARAM_C] ([ALARMTRIGGERLOGFK])
GO

ALTER TABLE dbo.[APG_MALARMCONTACTGROUP]
ADD CONSTRAINT [FK_APG_ROUP_APG_LARM_A5C0C29]
FOREIGN KEY ([ALARMFK]) REFERENCES dbo.[APG_ALARM] ( [ID] )

GO
CREATE INDEX [IX_APG_ROUP_ALARMFK_D4775B6] ON dbo.[APG_MALARMCONTACTGROUP] ([ALARMFK])
GO
CREATE INDEX [IX_APG_ROUP_ALARMFK_D4775B6_C] ON dbo.[APG_MALARMCONTACTGROUP_C] ([ALARMFK])
GO

ALTER TABLE dbo.[APG_MALARMCONTACTGROUP]
ADD CONSTRAINT [FK_APG_ROUP_APG_ROUP_D07929C]
FOREIGN KEY ([CONTACTGROUPFK]) REFERENCES dbo.[APG_CONTACTGROUP] ( [ID] )

GO
CREATE INDEX [IX_APG_ROUP_CONTUPFK_29D3310] ON dbo.[APG_MALARMCONTACTGROUP] ([CONTACTGROUPFK])
GO
CREATE INDEX [IX_APG_ROUP_CONTUPFK_29D3310_C] ON dbo.[APG_MALARMCONTACTGROUP_C] ([CONTACTGROUPFK])
GO
CREATE INDEX [IX_APG_LARM_EE_IM_ID_465CAFF_C] ON dbo.[APG_ALARM_C] ([EE_ITEM_ID])
GO
CREATE INDEX [IX_APG_LATE_EE_IM_ID_4355D51_C] ON dbo.[APG_ALARMTEMPLATE_C] ([EE_ITEM_ID])
GO
CREATE INDEX [IX_APG_GGER_EE_IM_ID_C7432EA_C] ON dbo.[APG_ALARMTRIGGER_C] ([EE_ITEM_ID])
GO
CREATE INDEX [IX_APG_RLOG_EE_IM_ID_ECD8A36_C] ON dbo.[APG_ALARMTRIGGERLOG_C] ([EE_ITEM_ID])
GO
CREATE INDEX [IX_APG_ARAM_EE_IM_ID_BE0D865_C] ON dbo.[APG_ALARMTRIGGERLOGPARAM_C] ([EE_ITEM_ID])
GO
CREATE INDEX [IX_APG_ROUP_EE_IM_ID_B2D6E4D_C] ON dbo.[APG_MALARMCONTACTGROUP_C] ([EE_ITEM_ID])
GO
-- 2: triggery a pohledy
GO

IF OBJECT_ID(N'dbo.APG_APGWORKFLOWSTATE_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[APG_APGWORKFLOWSTATE_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[APG_APGWORKFLOWSTATE_I] ON dbo.[APG_APGWORKFLOWSTATE] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[APG_APGWORKFLOWSTATE] ([ID], EE_TRANS_ID, t1.[CAPTION], t1.[KEY], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[CAPTION], inserted.[KEY], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[APG_APGWORKFLOWSTATE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[CAPTION], t1.[KEY], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[CAPTION], inserted.[KEY], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.APG_APGWORKFLOWSTATE_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[APG_APGWORKFLOWSTATE_U]'
END

GO

CREATE TRIGGER dbo.[APG_APGWORKFLOWSTATE_U] ON dbo.[APG_APGWORKFLOWSTATE] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[APG_APGWORKFLOWSTATE] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[APG_APGWORKFLOWSTATE] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[APG_APGWORKFLOWSTATE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[CAPTION], t1.[KEY], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[CAPTION], inserted.[KEY], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.APG_APGWORKFLOWSTATE_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[APG_APGWORKFLOWSTATE_D]'
END

GO

CREATE TRIGGER dbo.[APG_APGWORKFLOWSTATE_D] ON dbo.[APG_APGWORKFLOWSTATE] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[APG_APGWORKFLOWSTATE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.APG_APGWORKFLOWSTATE_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[APG_APGWORKFLOWSTATE_H] AS SELECT * FROM dbo.[APG_APGWORKFLOWSTATE]'
END

GO

ALTER VIEW dbo.[APG_APGWORKFLOWSTATE_H] AS
WITH cn AS (SELECT * FROM dbo.[APG_APGWORKFLOWSTATE_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[CAPTION], t1.[KEY], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.APG_ALARM_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[APG_ALARM_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[APG_ALARM_I] ON dbo.[APG_ALARM] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[APG_ALARM] ([ID], EE_TRANS_ID, t1.[ACTIVE], t1.[ALARMDEFINITIONFK], t1.[SENDEMAIL], t1.[SENDSMS], t1.[SHOWPOPUP], t1.[TALARMTRIGGERFK], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[ACTIVE], inserted.[ALARMDEFINITIONFK], inserted.[SENDEMAIL], inserted.[SENDSMS], inserted.[SHOWPOPUP], inserted.[TALARMTRIGGERFK], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[APG_ALARM_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ACTIVE], t1.[ALARMDEFINITIONFK], t1.[SENDEMAIL], t1.[SENDSMS], t1.[SHOWPOPUP], t1.[TALARMTRIGGERFK], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ACTIVE], inserted.[ALARMDEFINITIONFK], inserted.[SENDEMAIL], inserted.[SENDSMS], inserted.[SHOWPOPUP], inserted.[TALARMTRIGGERFK], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.APG_ALARM_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[APG_ALARM_U]'
END

GO

CREATE TRIGGER dbo.[APG_ALARM_U] ON dbo.[APG_ALARM] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[APG_ALARM] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[APG_ALARM] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[APG_ALARM_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ACTIVE], t1.[ALARMDEFINITIONFK], t1.[SENDEMAIL], t1.[SENDSMS], t1.[SHOWPOPUP], t1.[TALARMTRIGGERFK], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ACTIVE], inserted.[ALARMDEFINITIONFK], inserted.[SENDEMAIL], inserted.[SENDSMS], inserted.[SHOWPOPUP], inserted.[TALARMTRIGGERFK], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.APG_ALARM_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[APG_ALARM_D]'
END

GO

CREATE TRIGGER dbo.[APG_ALARM_D] ON dbo.[APG_ALARM] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[APG_ALARM_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.APG_ALARM_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[APG_ALARM_H] AS SELECT * FROM dbo.[APG_ALARM]'
END

GO

ALTER VIEW dbo.[APG_ALARM_H] AS
WITH cn AS (SELECT * FROM dbo.[APG_ALARM_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[ACTIVE], t1.[ALARMDEFINITIONFK], t1.[SENDEMAIL], t1.[SENDSMS], t1.[SHOWPOPUP], t1.[TALARMTRIGGERFK], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.APG_ALARMTEMPLATE_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[APG_ALARMTEMPLATE_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[APG_ALARMTEMPLATE_I] ON dbo.[APG_ALARMTEMPLATE] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[APG_ALARMTEMPLATE] ([ID], EE_TRANS_ID, t1.[ALARMTRIGGERFK], t1.[KEY], t1.[SUBJECT], t1.[TEXT], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[ALARMTRIGGERFK], inserted.[KEY], inserted.[SUBJECT], inserted.[TEXT], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[APG_ALARMTEMPLATE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ALARMTRIGGERFK], t1.[KEY], t1.[SUBJECT], t1.[TEXT], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ALARMTRIGGERFK], inserted.[KEY], inserted.[SUBJECT], inserted.[TEXT], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.APG_ALARMTEMPLATE_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[APG_ALARMTEMPLATE_U]'
END

GO

CREATE TRIGGER dbo.[APG_ALARMTEMPLATE_U] ON dbo.[APG_ALARMTEMPLATE] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[APG_ALARMTEMPLATE] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[APG_ALARMTEMPLATE] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[APG_ALARMTEMPLATE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ALARMTRIGGERFK], t1.[KEY], t1.[SUBJECT], t1.[TEXT], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ALARMTRIGGERFK], inserted.[KEY], inserted.[SUBJECT], inserted.[TEXT], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.APG_ALARMTEMPLATE_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[APG_ALARMTEMPLATE_D]'
END

GO

CREATE TRIGGER dbo.[APG_ALARMTEMPLATE_D] ON dbo.[APG_ALARMTEMPLATE] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[APG_ALARMTEMPLATE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.APG_ALARMTEMPLATE_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[APG_ALARMTEMPLATE_H] AS SELECT * FROM dbo.[APG_ALARMTEMPLATE]'
END

GO

ALTER VIEW dbo.[APG_ALARMTEMPLATE_H] AS
WITH cn AS (SELECT * FROM dbo.[APG_ALARMTEMPLATE_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[ALARMTRIGGERFK], t1.[KEY], t1.[SUBJECT], t1.[TEXT], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.APG_ALARMTRIGGER_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[APG_ALARMTRIGGER_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[APG_ALARMTRIGGER_I] ON dbo.[APG_ALARMTRIGGER] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[APG_ALARMTRIGGER] ([ID], EE_TRANS_ID, t1.[ACTIVE], t1.[CAPTION], t1.[DESCRIPTION], t1.[KEY], t1.[PARENTTRIGGERFK], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[ACTIVE], inserted.[CAPTION], inserted.[DESCRIPTION], inserted.[KEY], inserted.[PARENTTRIGGERFK], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[APG_ALARMTRIGGER_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ACTIVE], t1.[CAPTION], t1.[DESCRIPTION], t1.[KEY], t1.[PARENTTRIGGERFK], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ACTIVE], inserted.[CAPTION], inserted.[DESCRIPTION], inserted.[KEY], inserted.[PARENTTRIGGERFK], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.APG_ALARMTRIGGER_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[APG_ALARMTRIGGER_U]'
END

GO

CREATE TRIGGER dbo.[APG_ALARMTRIGGER_U] ON dbo.[APG_ALARMTRIGGER] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[APG_ALARMTRIGGER] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[APG_ALARMTRIGGER] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[APG_ALARMTRIGGER_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ACTIVE], t1.[CAPTION], t1.[DESCRIPTION], t1.[KEY], t1.[PARENTTRIGGERFK], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ACTIVE], inserted.[CAPTION], inserted.[DESCRIPTION], inserted.[KEY], inserted.[PARENTTRIGGERFK], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.APG_ALARMTRIGGER_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[APG_ALARMTRIGGER_D]'
END

GO

CREATE TRIGGER dbo.[APG_ALARMTRIGGER_D] ON dbo.[APG_ALARMTRIGGER] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[APG_ALARMTRIGGER_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.APG_ALARMTRIGGER_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[APG_ALARMTRIGGER_H] AS SELECT * FROM dbo.[APG_ALARMTRIGGER]'
END

GO

ALTER VIEW dbo.[APG_ALARMTRIGGER_H] AS
WITH cn AS (SELECT * FROM dbo.[APG_ALARMTRIGGER_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[ACTIVE], t1.[CAPTION], t1.[DESCRIPTION], t1.[KEY], t1.[PARENTTRIGGERFK], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.APG_ALARMTRIGGERLOG_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[APG_ALARMTRIGGERLOG_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[APG_ALARMTRIGGERLOG_I] ON dbo.[APG_ALARMTRIGGERLOG] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[APG_ALARMTRIGGERLOG] ([ID], EE_TRANS_ID, t1.[ALARMTRIGGERFK], t1.[TRIGGEREDAT], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[ALARMTRIGGERFK], inserted.[TRIGGEREDAT], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[APG_ALARMTRIGGERLOG_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ALARMTRIGGERFK], t1.[TRIGGEREDAT], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ALARMTRIGGERFK], inserted.[TRIGGEREDAT], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.APG_ALARMTRIGGERLOG_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[APG_ALARMTRIGGERLOG_U]'
END

GO

CREATE TRIGGER dbo.[APG_ALARMTRIGGERLOG_U] ON dbo.[APG_ALARMTRIGGERLOG] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[APG_ALARMTRIGGERLOG] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[APG_ALARMTRIGGERLOG] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[APG_ALARMTRIGGERLOG_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ALARMTRIGGERFK], t1.[TRIGGEREDAT], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ALARMTRIGGERFK], inserted.[TRIGGEREDAT], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.APG_ALARMTRIGGERLOG_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[APG_ALARMTRIGGERLOG_D]'
END

GO

CREATE TRIGGER dbo.[APG_ALARMTRIGGERLOG_D] ON dbo.[APG_ALARMTRIGGERLOG] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[APG_ALARMTRIGGERLOG_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.APG_ALARMTRIGGERLOG_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[APG_ALARMTRIGGERLOG_H] AS SELECT * FROM dbo.[APG_ALARMTRIGGERLOG]'
END

GO

ALTER VIEW dbo.[APG_ALARMTRIGGERLOG_H] AS
WITH cn AS (SELECT * FROM dbo.[APG_ALARMTRIGGERLOG_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[ALARMTRIGGERFK], t1.[TRIGGEREDAT], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.APG_ALARMTRIGGERLOGPARAM_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[APG_ALARMTRIGGERLOGPARAM_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[APG_ALARMTRIGGERLOGPARAM_I] ON dbo.[APG_ALARMTRIGGERLOGPARAM] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[APG_ALARMTRIGGERLOGPARAM] ([ID], EE_TRANS_ID, t1.[ALARMTRIGGERLOGFK], t1.[NAME], t1.[VALUESTR], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[ALARMTRIGGERLOGFK], inserted.[NAME], inserted.[VALUESTR], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[APG_ALARMTRIGGERLOGPARAM_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ALARMTRIGGERLOGFK], t1.[NAME], t1.[VALUESTR], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ALARMTRIGGERLOGFK], inserted.[NAME], inserted.[VALUESTR], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.APG_ALARMTRIGGERLOGPARAM_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[APG_ALARMTRIGGERLOGPARAM_U]'
END

GO

CREATE TRIGGER dbo.[APG_ALARMTRIGGERLOGPARAM_U] ON dbo.[APG_ALARMTRIGGERLOGPARAM] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[APG_ALARMTRIGGERLOGPARAM] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[APG_ALARMTRIGGERLOGPARAM] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[APG_ALARMTRIGGERLOGPARAM_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ALARMTRIGGERLOGFK], t1.[NAME], t1.[VALUESTR], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ALARMTRIGGERLOGFK], inserted.[NAME], inserted.[VALUESTR], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.APG_ALARMTRIGGERLOGPARAM_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[APG_ALARMTRIGGERLOGPARAM_D]'
END

GO

CREATE TRIGGER dbo.[APG_ALARMTRIGGERLOGPARAM_D] ON dbo.[APG_ALARMTRIGGERLOGPARAM] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[APG_ALARMTRIGGERLOGPARAM_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.APG_ALARMTRIGGERLOGPARAM_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[APG_ALARMTRIGGERLOGPARAM_H] AS SELECT * FROM dbo.[APG_ALARMTRIGGERLOGPARAM]'
END

GO

ALTER VIEW dbo.[APG_ALARMTRIGGERLOGPARAM_H] AS
WITH cn AS (SELECT * FROM dbo.[APG_ALARMTRIGGERLOGPARAM_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[ALARMTRIGGERLOGFK], t1.[NAME], t1.[VALUESTR], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.APG_MALARMCONTACTGROUP_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[APG_MALARMCONTACTGROUP_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[APG_MALARMCONTACTGROUP_I] ON dbo.[APG_MALARMCONTACTGROUP] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[APG_MALARMCONTACTGROUP] ([ID], EE_TRANS_ID, t1.[ALARMFK], t1.[CONTACTGROUPFK], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[ALARMFK], inserted.[CONTACTGROUPFK], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[APG_MALARMCONTACTGROUP_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ALARMFK], t1.[CONTACTGROUPFK], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ALARMFK], inserted.[CONTACTGROUPFK], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.APG_MALARMCONTACTGROUP_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[APG_MALARMCONTACTGROUP_U]'
END

GO

CREATE TRIGGER dbo.[APG_MALARMCONTACTGROUP_U] ON dbo.[APG_MALARMCONTACTGROUP] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[APG_MALARMCONTACTGROUP] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[APG_MALARMCONTACTGROUP] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[APG_MALARMCONTACTGROUP_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ALARMFK], t1.[CONTACTGROUPFK], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ALARMFK], inserted.[CONTACTGROUPFK], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.APG_MALARMCONTACTGROUP_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[APG_MALARMCONTACTGROUP_D]'
END

GO

CREATE TRIGGER dbo.[APG_MALARMCONTACTGROUP_D] ON dbo.[APG_MALARMCONTACTGROUP] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[APG_MALARMCONTACTGROUP_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.APG_MALARMCONTACTGROUP_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[APG_MALARMCONTACTGROUP_H] AS SELECT * FROM dbo.[APG_MALARMCONTACTGROUP]'
END

GO

ALTER VIEW dbo.[APG_MALARMCONTACTGROUP_H] AS
WITH cn AS (SELECT * FROM dbo.[APG_MALARMCONTACTGROUP_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[ALARMFK], t1.[CONTACTGROUPFK], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO
-- 3: závislé objekty (lokalizace)
GO
-- 4: číselníky
GO
INSERT INTO dbo.[APG_ALARMTRIGGER] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [DESCRIPTION], [KEY]) VALUES ('1', 1, '1', 'Curve shift', 'Curve shift', 'CurveShift')
GO
INSERT INTO dbo.[APG_ALARMTRIGGER] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [DESCRIPTION], [KEY]) VALUES ('2', 1, '1', 'Daily firm capacity request', 'Daily firm capacity request', 'DailyFirmCapacityRequest')
GO
INSERT INTO dbo.[APG_ALARMTRIGGER] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [DESCRIPTION], [KEY]) VALUES ('3', 1, '1', 'Financial situation limit exceeded', 'Financial situation limit exceeded', 'FinancialSituationLimitExceeded')
GO
INSERT INTO dbo.[APG_ALARMTRIGGER] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [DESCRIPTION], [KEY]) VALUES ('4', 1, '1', 'Financial situation limit reached', 'Financial situation limit reached', 'FinancialSituationLimitReached')
GO
INSERT INTO dbo.[APG_ALARMTRIGGER] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [DESCRIPTION], [KEY]) VALUES ('5', 1, '1', 'Interruptible capacity request', 'Interruptible capacity request', 'InterruptibleCapacityRequest')
GO
INSERT INTO dbo.[APG_ALARMTRIGGER] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [DESCRIPTION], [KEY]) VALUES ('6', 1, '1', 'Interruptible capacity final', 'Interruptible capacity final', 'InterruptibleCapacityFinal')
GO
INSERT INTO dbo.[APG_ALARMTRIGGER] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [DESCRIPTION], [KEY]) VALUES ('7', 1, '1', 'Nomination received', 'Nomination received', 'NominationReceived')
GO
INSERT INTO dbo.[APG_ALARMTRIGGER] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [DESCRIPTION], [KEY]) VALUES ('8', 1, '1', 'Nomination accepted', 'Nomination accepted', 'NominationAccepted')
GO
INSERT INTO dbo.[APG_ALARMTRIGGER] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [DESCRIPTION], [KEY]) VALUES ('9', 1, '1', 'Nomination automatic refusal', 'Nomination automatic refusal', 'NominationAutomaticRefusal')
GO
INSERT INTO dbo.[APG_ALARMTRIGGER] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [DESCRIPTION], [KEY]) VALUES ('10', 1, '1', 'Dismatching nomination', 'Dismatching nomination', 'NominationDismatching')
GO
INSERT INTO dbo.[APG_ALARMTRIGGER] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [DESCRIPTION], [KEY]) VALUES ('11', 1, '1', 'New subject created', 'New subject created', 'NewSubjectCreated')
GO
INSERT INTO dbo.[APG_ALARMTRIGGER] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [DESCRIPTION], [KEY]) VALUES ('12', 1, '1', 'New contract created', 'New contract created', 'NewContractCreated')
GO
INSERT INTO dbo.[APG_ALARMTRIGGER] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [DESCRIPTION], [KEY]) VALUES ('13', 1, '1', 'Order TWGV', 'Order TWGV', 'TwgvOrder')
GO
INSERT INTO dbo.[APG_ALARMTRIGGER] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [DESCRIPTION], [KEY]) VALUES ('14', 1, '1', 'Maximal available injection capacity changed', 'Maximal available injection capacity changed', 'MaxAvailableInjectionCapacityChanged')
GO
INSERT INTO dbo.[APG_ALARMTRIGGER] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [DESCRIPTION], [KEY]) VALUES ('15', 1, '1', 'Maximal available withdrawal capacity changed', 'Maximal available withdrawal capacity changed', 'MaxAvailableWithdrawalCapacityChanged')
GO
INSERT INTO dbo.[APG_ALARMTRIGGER] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [DESCRIPTION], [KEY]) VALUES ('16', 1, '1', 'Unavailability period changed', 'Unavailability period changed', 'UnavailabilityPeriodChanged')
GO
INSERT INTO dbo.[APG_ALARMTRIGGER] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [DESCRIPTION], [KEY]) VALUES ('17', 1, '1', 'Interruptible nomination missing', 'Interruptible nomination missing', 'InterruptibleNominationMissing')
GO
INSERT INTO dbo.[APG_ALARMTRIGGER] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [DESCRIPTION], [KEY]) VALUES ('18', 1, '1', 'Storage almost full (95%+)', 'Storage almost full (95%+)', 'StorageAlmostFull')
GO
INSERT INTO dbo.[APG_ALARMTRIGGER] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [DESCRIPTION], [KEY]) VALUES ('19', 1, '1', 'Storage almost empty (5%-)', 'Storage almost empty (5%-)', 'StorageAlmostEmpty')
GO
INSERT INTO dbo.[APG_ALARMTRIGGER] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [DESCRIPTION], [KEY]) VALUES ('20', 1, '1', 'Approaching price change', 'Approaching price change', 'ApproachingPriceChange')
GO
INSERT INTO dbo.[APG_ALARMTRIGGER] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [DESCRIPTION], [KEY]) VALUES ('21', 1, '1', 'TSO values missing', 'TSO values missing', 'TsoValuesMissing')
GO
INSERT INTO dbo.[APG_ALARMTRIGGER] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [DESCRIPTION], [KEY]) VALUES ('22', 1, '1', 'Transfer gas state changed', 'Transfer gas state changed', 'GasTransferStateChanged')
GO
INSERT INTO dbo.[APG_ALARMTRIGGER] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [DESCRIPTION], [KEY]) VALUES ('23', 1, '1', 'End of contract', 'End of contract', 'ContractEnd')
GO
INSERT INTO dbo.[APG_ALARMTRIGGER] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [DESCRIPTION], [KEY]) VALUES ('24', 1, '1', 'Invoice state changed', 'Invoice state changed', 'InvoiceStateChanged')
GO
INSERT INTO dbo.[APG_ALARMTRIGGER] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [DESCRIPTION], [KEY]) VALUES ('25', 1, '1', 'Transfer/Transmission capacity state changed', 'Transfer/Transmission capacity state changed', 'CapacityTransferStateChanged')
GO
INSERT INTO dbo.[APG_ALARMTRIGGER] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [DESCRIPTION], [KEY]) VALUES ('26', 1, '1', 'Nomination dispatcher cooperation needed', 'Cooperation of nomination dispatcher is needed', 'NominationDispatcherCooperationNeeded')
GO
INSERT INTO dbo.[APG_ALARMTRIGGER] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [DESCRIPTION], [KEY]) VALUES ('27', 1, '1', 'Intraday daily firm capacity request', 'Intraday daily firm capacity request', 'IntradayDailyFirmCapacityRequest')
GO
INSERT INTO dbo.[APG_ALARMTRIGGER] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [DESCRIPTION], [KEY]) VALUES ('28', 1, '1', 'Interruptible capacity interruption', 'Interruptible capacity interruption', 'InterruptibleCapacityInterruption')
GO

-- uložíme informace o transakci, v jejímž rámci se příp. měnila data
BEGIN
	declare @transId bigint
	declare @commitId bigint
	exec dbo.ENIF_LOG_COMMIT 'system', 1, NULL, NULL, @commit_id_p = @commitId OUTPUT
	exec @transId = dbo.GetExistingTransactionId
	exec dbo.ee_log_transaction @transId, 'system', NULL, 'c', @commitId
END
GO

