
BEGIN
	declare @transId bigint
	exec dbo.ee_init_transaction @trans_id = @transId
END

GO
-- 1: tabulky
GO
-- 2: triggery a pohledy
GO
-- 3: závislé objekty (lokalizace)
GO
-- 4: číselníky
GO

-- uložíme informace o transakci, v jejímž rámci se příp. měnila data
BEGIN
	declare @transId bigint
	declare @commitId bigint
	exec dbo.ENIF_LOG_COMMIT 'system', 1, NULL, NULL, @commit_id_p = @commitId OUTPUT
	exec @transId = dbo.GetExistingTransactionId
	exec dbo.ee_log_transaction @transId, 'system', NULL, 'c', @commitId
END
GO


BEGIN
	declare @transId bigint
	exec dbo.ee_init_transaction @trans_id = @transId
END

GO
-- 1: tabulky
GO
ALTER TABLE dbo.[RPS_FORECASTEDDSODATA] ADD [AGGREGATEDDSODATAFK] bigint
GO
ALTER TABLE dbo.[RPS_FORECASTEDDSODATA_C] ADD [AGGREGATEDDSODATAFK] bigint
GO
ALTER TABLE dbo.[RPS_VDTBALACTREASONCODES] ADD [ISCANCELREASON] bit
GO
ALTER TABLE dbo.[RPS_VDTBALACTREASONCODES_C] ADD [ISCANCELREASON] bit
GO
ALTER TABLE dbo.[RPS_VDTBALACTREASONCODES] ADD [ISPREPAREREASON] bit
GO
ALTER TABLE dbo.[RPS_VDTBALACTREASONCODES_C] ADD [ISPREPAREREASON] bit
GO
ALTER TABLE dbo.[RPS_VDTBALACTREASONCODES] ADD DEFAULT ('0') FOR [ISCANCELREASON]
GO
UPDATE dbo.[RPS_VDTBALACTREASONCODES] SET [ISCANCELREASON] = '0' WHERE [ISCANCELREASON] IS NULL
GO
ALTER TABLE dbo.[RPS_VDTBALACTREASONCODES] ALTER COLUMN [ISCANCELREASON] bit NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTBALACTREASONCODES] ADD DEFAULT ('0') FOR [ISPREPAREREASON]
GO
UPDATE dbo.[RPS_VDTBALACTREASONCODES] SET [ISPREPAREREASON] = '0' WHERE [ISPREPAREREASON] IS NULL
GO
ALTER TABLE dbo.[RPS_VDTBALACTREASONCODES] ALTER COLUMN [ISPREPAREREASON] bit NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTBALANCINGACTION] ADD [AUTOCREATED] bit
GO
ALTER TABLE dbo.[RPS_VDTBALANCINGACTION_C] ADD [AUTOCREATED] bit
GO
ALTER TABLE dbo.[RPS_VDTBALANCINGACTION] ADD [CANCELREASONCODEFK] bigint
GO
ALTER TABLE dbo.[RPS_VDTBALANCINGACTION_C] ADD [CANCELREASONCODEFK] bigint
GO
ALTER TABLE dbo.[RPS_VDTBALANCINGACTION] ADD [NTFRPRTNTFFK] bigint
GO
ALTER TABLE dbo.[RPS_VDTBALANCINGACTION_C] ADD [NTFRPRTNTFFK] bigint
GO
ALTER TABLE dbo.[RPS_VDTBALANCINGACTION] ADD [ORDERSTATE] int
GO
ALTER TABLE dbo.[RPS_VDTBALANCINGACTION_C] ADD [ORDERSTATE] int
GO
ALTER TABLE dbo.[RPS_VDTBALANCINGACTION] ALTER COLUMN [DELIVERYDIRECTION] bigint NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTBALANCINGACTION_C] ALTER COLUMN [DELIVERYDIRECTION] bigint
GO
ALTER TABLE dbo.[RPS_VDTBALANCINGACTION] ALTER COLUMN [TYPE] bigint NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTBALANCINGACTION_C] ALTER COLUMN [TYPE] bigint
GO
ALTER TABLE dbo.[RPS_VDTBALANCINGACTION] ADD DEFAULT ('0') FOR [AUTOCREATED]
GO
UPDATE dbo.[RPS_VDTBALANCINGACTION] SET [AUTOCREATED] = '0' WHERE [AUTOCREATED] IS NULL
GO
ALTER TABLE dbo.[RPS_VDTBALANCINGACTION] ALTER COLUMN [AUTOCREATED] bit NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTBALANCINGACTION] ADD DEFAULT ('0') FOR [ORDERSTATE]
GO
UPDATE dbo.[RPS_VDTBALANCINGACTION] SET [ORDERSTATE] = '0' WHERE [ORDERSTATE] IS NULL
GO
ALTER TABLE dbo.[RPS_VDTBALANCINGACTION] ALTER COLUMN [ORDERSTATE] int NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTSETUP] ADD [IMPORTEDEMAILADDRESSESOFEXTERNALUSERS] nvarchar(max)
GO
ALTER TABLE dbo.[RPS_VDTSETUP_C] ADD [IMPORTEDEMAILADDRESSESOFEXTERNALUSERS] nvarchar(max)
GO
ALTER TABLE dbo.[RPS_VDTSETUP] ADD [IMPORTEDEMAILADDRESSESOFINTERNALUSERS] nvarchar(max)
GO
ALTER TABLE dbo.[RPS_VDTSETUP_C] ADD [IMPORTEDEMAILADDRESSESOFINTERNALUSERS] nvarchar(max)
GO
ALTER TABLE dbo.[RPS_VDTSETUP] ADD [NOMINTCONTRACTREFERENCE] nvarchar(max)
GO
ALTER TABLE dbo.[RPS_VDTSETUP_C] ADD [NOMINTCONTRACTREFERENCE] nvarchar(max)
GO
ALTER TABLE dbo.[RPS_VDTSETUP] ADD [NOMINTISSUERID] nvarchar(max)
GO
ALTER TABLE dbo.[RPS_VDTSETUP_C] ADD [NOMINTISSUERID] nvarchar(max)
GO
ALTER TABLE dbo.[RPS_VDTSETUP] ADD [NOMINTRECIPIENTID] nvarchar(max)
GO
ALTER TABLE dbo.[RPS_VDTSETUP_C] ADD [NOMINTRECIPIENTID] nvarchar(max)
GO
ALTER TABLE dbo.[RPS_VDTSETUP] ADD [PAR910ACTIONAMOUNT] bigint
GO
ALTER TABLE dbo.[RPS_VDTSETUP_C] ADD [PAR910ACTIONAMOUNT] bigint
GO
ALTER TABLE dbo.[RPS_VDTSETUP] ADD [PAR910ACTIONAUTOSTART] bit
GO
ALTER TABLE dbo.[RPS_VDTSETUP_C] ADD [PAR910ACTIONAUTOSTART] bit
GO
ALTER TABLE dbo.[RPS_VDTSETUP] ADD [PAR910ACTIONDELAYDEFAULT] int
GO
ALTER TABLE dbo.[RPS_VDTSETUP_C] ADD [PAR910ACTIONDELAYDEFAULT] int
GO
ALTER TABLE dbo.[RPS_VDTSETUP] ADD [PAR910ACTIONDELAYMAX] int
GO
ALTER TABLE dbo.[RPS_VDTSETUP_C] ADD [PAR910ACTIONDELAYMAX] int
GO
ALTER TABLE dbo.[RPS_VDTSETUP] ADD [PAR910ACTIONDELAYMIN] int
GO
ALTER TABLE dbo.[RPS_VDTSETUP_C] ADD [PAR910ACTIONDELAYMIN] int
GO
ALTER TABLE dbo.[RPS_VDTSETUP] ADD [PAR910ACTIONSCENARIOFK] bigint
GO
ALTER TABLE dbo.[RPS_VDTSETUP_C] ADD [PAR910ACTIONSCENARIOFK] bigint
GO
ALTER TABLE dbo.[RPS_VDTSETUP] ADD [SCENARIOSTEPTIMERESERVE] int
GO
ALTER TABLE dbo.[RPS_VDTSETUP_C] ADD [SCENARIOSTEPTIMERESERVE] int
GO
ALTER TABLE dbo.[RPS_VDTSETUP] ADD DEFAULT ('100000') FOR [PAR910ACTIONAMOUNT]
GO
UPDATE dbo.[RPS_VDTSETUP] SET [PAR910ACTIONAMOUNT] = '100000' WHERE [PAR910ACTIONAMOUNT] IS NULL
GO
ALTER TABLE dbo.[RPS_VDTSETUP] ALTER COLUMN [PAR910ACTIONAMOUNT] bigint NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTSETUP] ADD DEFAULT ('0') FOR [PAR910ACTIONAUTOSTART]
GO
UPDATE dbo.[RPS_VDTSETUP] SET [PAR910ACTIONAUTOSTART] = '0' WHERE [PAR910ACTIONAUTOSTART] IS NULL
GO
ALTER TABLE dbo.[RPS_VDTSETUP] ALTER COLUMN [PAR910ACTIONAUTOSTART] bit NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTSETUP] ADD DEFAULT ('30') FOR [SCENARIOSTEPTIMERESERVE]
GO
UPDATE dbo.[RPS_VDTSETUP] SET [SCENARIOSTEPTIMERESERVE] = '30' WHERE [SCENARIOSTEPTIMERESERVE] IS NULL
GO
ALTER TABLE dbo.[RPS_VDTSETUP] ALTER COLUMN [SCENARIOSTEPTIMERESERVE] int NOT NULL
GO
DROP INDEX [UQ_RPS_VETYPE_KEY_247BEF0] ON dbo.[RPS_VDTSTATETYPE]
GO
ALTER TABLE dbo.[RPS_VDTSTATETYPE] ALTER COLUMN [KEY] nvarchar(400) NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTSTATETYPE_C] ALTER COLUMN [KEY] nvarchar(400)
GO
CREATE UNIQUE INDEX [UQ_RPS_VETYPE_KEY_247BEF0] ON dbo.[RPS_VDTSTATETYPE]([KEY]) WHERE [KEY] IS NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTVDPLASTTRADEPRICE] ADD [BALACTPX] decimal(38, 10)
GO
ALTER TABLE dbo.[RPS_VDTVDPLASTTRADEPRICE_C] ADD [BALACTPX] decimal(38, 10)
GO
ALTER TABLE dbo.[RPS_VDTVDPLASTTRADEPRICE] ADD [NTFRPRTREASON] int
GO
ALTER TABLE dbo.[RPS_VDTVDPLASTTRADEPRICE_C] ADD [NTFRPRTREASON] int
GO
ALTER TABLE dbo.[RPS_VDTVDPLASTTRADEPRICE] ADD [TOTALQTY] bigint
GO
ALTER TABLE dbo.[RPS_VDTVDPLASTTRADEPRICE_C] ADD [TOTALQTY] bigint
GO
ALTER TABLE dbo.[RPS_VDTVDPLASTTRADEPRICE] ADD [WAPRICEORDR] decimal(38, 10)
GO
ALTER TABLE dbo.[RPS_VDTVDPLASTTRADEPRICE_C] ADD [WAPRICEORDR] decimal(38, 10)
GO
CREATE TABLE dbo.[RPS_VDTACTIONTYPE_LR1] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [SYS_L_ID] bigint, [SYS_L_LOCALE] bigint, [CAPTION] nvarchar(50), [CAPTION_SYS_L_EXISTS] bit, [DESCRIPTION] nvarchar(4000), [DESCRIPTION_SYS_L_EXISTS] bit, [SYS_VER] int )
GO

CREATE TABLE dbo.[RPS_VDTACTIONTYPE_LR1_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [SYS_L_ID] bigint, [SYS_L_LOCALE] bigint, [CAPTION] nvarchar(50), [CAPTION_SYS_L_EXISTS] bit, [DESCRIPTION] nvarchar(4000), [DESCRIPTION_SYS_L_EXISTS] bit, [SYS_VER] int
)
GO
CREATE TABLE dbo.[RPS_VDTACTIONTYPE_LR1_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[RPS_VDTACTIONTYPE_LR1_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[RPS_VDTACTIONTYPE_LR1] ALTER COLUMN [SYS_L_ID] bigint NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTACTIONTYPE_LR1] ALTER COLUMN [CAPTION] nvarchar(50) NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTACTIONTYPE_LR1] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[RPS_VDTACTIONTYPE_LR1] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[RPS_VDTACTIONTYPE_LR1] ALTER COLUMN [SYS_VER] int NOT NULL
GO
CREATE TABLE dbo.[RPS_VDTACTIONTYPE_LR0] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [ACTIVE] bit, [CAPTION] nvarchar(50), [DESCRIPTION] nvarchar(4000), [KEY] nvarchar(20), [SYS_VER] int )
GO

CREATE TABLE dbo.[RPS_VDTACTIONTYPE_LR0_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [ACTIVE] bit, [CAPTION] nvarchar(50), [DESCRIPTION] nvarchar(4000), [KEY] nvarchar(20), [SYS_VER] int
)
GO
CREATE TABLE dbo.[RPS_VDTACTIONTYPE_LR0_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[RPS_VDTACTIONTYPE_LR0_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[RPS_VDTACTIONTYPE_LR0] ALTER COLUMN [ACTIVE] bit NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTACTIONTYPE_LR0] ALTER COLUMN [CAPTION] nvarchar(50) NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTACTIONTYPE_LR0] ALTER COLUMN [KEY] nvarchar(20) NOT NULL
GO
CREATE UNIQUE INDEX [UQ_RPS_VE_LR0_KEY_60AC1B5] ON dbo.[RPS_VDTACTIONTYPE_LR0]([KEY]) WHERE [KEY] IS NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTACTIONTYPE_LR0] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[RPS_VDTACTIONTYPE_LR0] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[RPS_VDTACTIONTYPE_LR0] ALTER COLUMN [SYS_VER] int NOT NULL
GO
CREATE TABLE dbo.[RPS_VDTDIRECTION_LR1] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [SYS_L_ID] bigint, [SYS_L_LOCALE] bigint, [CAPTION] nvarchar(50), [CAPTION_SYS_L_EXISTS] bit, [DESCRIPTION] nvarchar(4000), [DESCRIPTION_SYS_L_EXISTS] bit, [SYS_VER] int )
GO

CREATE TABLE dbo.[RPS_VDTDIRECTION_LR1_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [SYS_L_ID] bigint, [SYS_L_LOCALE] bigint, [CAPTION] nvarchar(50), [CAPTION_SYS_L_EXISTS] bit, [DESCRIPTION] nvarchar(4000), [DESCRIPTION_SYS_L_EXISTS] bit, [SYS_VER] int
)
GO
CREATE TABLE dbo.[RPS_VDTDIRECTION_LR1_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[RPS_VDTDIRECTION_LR1_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[RPS_VDTDIRECTION_LR1] ALTER COLUMN [SYS_L_ID] bigint NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTDIRECTION_LR1] ALTER COLUMN [CAPTION] nvarchar(50) NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTDIRECTION_LR1] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[RPS_VDTDIRECTION_LR1] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[RPS_VDTDIRECTION_LR1] ALTER COLUMN [SYS_VER] int NOT NULL
GO
CREATE TABLE dbo.[RPS_VDTDIRECTION_LR0] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [ACTIVE] bit, [CAPTION] nvarchar(50), [DESCRIPTION] nvarchar(4000), [KEY] nvarchar(10), [SYS_VER] int )
GO

CREATE TABLE dbo.[RPS_VDTDIRECTION_LR0_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [ACTIVE] bit, [CAPTION] nvarchar(50), [DESCRIPTION] nvarchar(4000), [KEY] nvarchar(10), [SYS_VER] int
)
GO
CREATE TABLE dbo.[RPS_VDTDIRECTION_LR0_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[RPS_VDTDIRECTION_LR0_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[RPS_VDTDIRECTION_LR0] ALTER COLUMN [ACTIVE] bit NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTDIRECTION_LR0] ALTER COLUMN [CAPTION] nvarchar(50) NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTDIRECTION_LR0] ALTER COLUMN [KEY] nvarchar(10) NOT NULL
GO
CREATE UNIQUE INDEX [UQ_RPS_VN_LR0_KEY_23E6A20] ON dbo.[RPS_VDTDIRECTION_LR0]([KEY]) WHERE [KEY] IS NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTDIRECTION_LR0] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[RPS_VDTDIRECTION_LR0] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[RPS_VDTDIRECTION_LR0] ALTER COLUMN [SYS_VER] int NOT NULL
GO
CREATE TABLE dbo.[RPS_AGGREGATEDDSODATA] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [CAPTION] nvarchar(max), [SYS_VER] int )
GO

CREATE TABLE dbo.[RPS_AGGREGATEDDSODATA_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [CAPTION] nvarchar(max), [SYS_VER] int
)
GO
CREATE TABLE dbo.[RPS_AGGREGATEDDSODATA_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[RPS_AGGREGATEDDSODATA_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[RPS_AGGREGATEDDSODATA] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[RPS_AGGREGATEDDSODATA] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[RPS_AGGREGATEDDSODATA] ALTER COLUMN [SYS_VER] int NOT NULL
GO
CREATE TABLE dbo.[RPS_VDTNTFRPRTNTF] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [BALACTPX] decimal(38, 10), [CONTRACTFK] bigint, [MESSAGEFK] bigint, [NTFID] bigint, [NTFTYPE] int, [REASON] int, [SEVERITY] int, [TIMESTAMP] datetime, [TOTALQTY] bigint, [TRADEPX] decimal(38, 10), [TXTCZ] nvarchar(max), [TXTEN] nvarchar(max), [WATRADEPX] decimal(38, 10), [SYS_VER] int )
GO

CREATE TABLE dbo.[RPS_VDTNTFRPRTNTF_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [BALACTPX] decimal(38, 10), [CONTRACTFK] bigint, [MESSAGEFK] bigint, [NTFID] bigint, [NTFTYPE] int, [REASON] int, [SEVERITY] int, [TIMESTAMP] datetime, [TOTALQTY] bigint, [TRADEPX] decimal(38, 10), [TXTCZ] nvarchar(max), [TXTEN] nvarchar(max), [WATRADEPX] decimal(38, 10), [SYS_VER] int
)
GO
CREATE TABLE dbo.[RPS_VDTNTFRPRTNTF_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[RPS_VDTNTFRPRTNTF_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[RPS_VDTNTFRPRTNTF] ALTER COLUMN [CONTRACTFK] bigint NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTNTFRPRTNTF] ALTER COLUMN [MESSAGEFK] bigint NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTNTFRPRTNTF] ALTER COLUMN [NTFID] bigint NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTNTFRPRTNTF] ALTER COLUMN [NTFTYPE] int NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTNTFRPRTNTF] ALTER COLUMN [REASON] int NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTNTFRPRTNTF] ALTER COLUMN [SEVERITY] int NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTNTFRPRTNTF] ALTER COLUMN [TIMESTAMP] datetime NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTNTFRPRTNTF] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[RPS_VDTNTFRPRTNTF] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[RPS_VDTNTFRPRTNTF] ALTER COLUMN [SYS_VER] int NOT NULL
GO
CREATE TABLE dbo.[RPS_VDTSHIPPERPAIR] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [DESCRIPTION] nvarchar(4000), [EIC] nvarchar(100), [KEY] nvarchar(10), [NAME] nvarchar(100), [SETUPFK] bigint, [TSO1] nvarchar(50), [TSO2] nvarchar(50), [SYS_VER] int )
GO

CREATE TABLE dbo.[RPS_VDTSHIPPERPAIR_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [DESCRIPTION] nvarchar(4000), [EIC] nvarchar(100), [KEY] nvarchar(10), [NAME] nvarchar(100), [SETUPFK] bigint, [TSO1] nvarchar(50), [TSO2] nvarchar(50), [SYS_VER] int
)
GO
CREATE TABLE dbo.[RPS_VDTSHIPPERPAIR_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[RPS_VDTSHIPPERPAIR_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[RPS_VDTSHIPPERPAIR] ALTER COLUMN [KEY] nvarchar(10) NOT NULL
GO
CREATE UNIQUE INDEX [UQ_RPS_VRPAIR_KEY_70FD8CE] ON dbo.[RPS_VDTSHIPPERPAIR]([KEY]) WHERE [KEY] IS NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTSHIPPERPAIR] ALTER COLUMN [NAME] nvarchar(100) NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTSHIPPERPAIR] ALTER COLUMN [SETUPFK] bigint NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTSHIPPERPAIR] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[RPS_VDTSHIPPERPAIR] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[RPS_VDTSHIPPERPAIR] ALTER COLUMN [SYS_VER] int NOT NULL
GO
CREATE TABLE dbo.[RPS_VDTTRADECAPTURE] ([ID] bigint PRIMARY KEY, EE_TRANS_ID bigint , [CLORDRID] nvarchar(50), [CONTRACTFK] bigint, [DIRECTION] bigint, [DLVRYAREAID] nvarchar(50), [EXECTIME] datetime, [ORDRID] bigint, [PRICE] decimal(38, 10), [PRTCID] nvarchar(50), [QUANTITY] bigint, [TRADEID] bigint, [TXT] nvarchar(100), [USRCODE] nvarchar(50), [SYS_VER] int )
GO

CREATE TABLE dbo.[RPS_VDTTRADECAPTURE_C] (
  [EE_CHANGE_ID] bigint IDENTITY(1, 1) PRIMARY KEY,
	[EE_CHANGE_TYPE] char(1),
	[EE_ITEM_ID] bigint,
	[EE_TRANS_ID] bigint , [CLORDRID] nvarchar(50), [CONTRACTFK] bigint, [DIRECTION] bigint, [DLVRYAREAID] nvarchar(50), [EXECTIME] datetime, [ORDRID] bigint, [PRICE] decimal(38, 10), [PRTCID] nvarchar(50), [QUANTITY] bigint, [TRADEID] bigint, [TXT] nvarchar(100), [USRCODE] nvarchar(50), [SYS_VER] int
)
GO
CREATE TABLE dbo.[RPS_VDTTRADECAPTURE_HILO] (NEXT_VALUE bigint)
GO
INSERT INTO dbo.[RPS_VDTTRADECAPTURE_HILO] (NEXT_VALUE) VALUES (1000)
GO
ALTER TABLE dbo.[RPS_VDTTRADECAPTURE] ALTER COLUMN [CONTRACTFK] bigint NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTTRADECAPTURE] ALTER COLUMN [DIRECTION] bigint NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTTRADECAPTURE] ALTER COLUMN [EXECTIME] datetime NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTTRADECAPTURE] ALTER COLUMN [ORDRID] bigint NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTTRADECAPTURE] ALTER COLUMN [PRICE] decimal(38, 10) NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTTRADECAPTURE] ALTER COLUMN [QUANTITY] bigint NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTTRADECAPTURE] ALTER COLUMN [TRADEID] bigint NOT NULL
GO
ALTER TABLE dbo.[RPS_VDTTRADECAPTURE] ADD DEFAULT ('1') FOR [SYS_VER]
GO
UPDATE dbo.[RPS_VDTTRADECAPTURE] SET [SYS_VER] = '1' WHERE [SYS_VER] IS NULL
GO
ALTER TABLE dbo.[RPS_VDTTRADECAPTURE] ALTER COLUMN [SYS_VER] int NOT NULL
GO

ALTER TABLE dbo.[RPS_FORECASTEDDSODATA]
ADD CONSTRAINT [FK_RPS_DATA_RPS_DATA_CB20ED9]
FOREIGN KEY ([AGGREGATEDDSODATAFK]) REFERENCES dbo.[RPS_AGGREGATEDDSODATA] ( [ID] )

GO
CREATE INDEX [IX_RPS_DATA_AGGRTAFK_EF4446E] ON dbo.[RPS_FORECASTEDDSODATA] ([AGGREGATEDDSODATAFK])
GO
CREATE INDEX [IX_RPS_DATA_AGGRTAFK_EF4446E_C] ON dbo.[RPS_FORECASTEDDSODATA_C] ([AGGREGATEDDSODATAFK])
GO

ALTER TABLE dbo.[RPS_VDTBALANCINGACTION]
ADD CONSTRAINT [FK_RPS_TION_RPS__LR0_1E2D3C6]
FOREIGN KEY ([TYPE]) REFERENCES dbo.[RPS_VDTACTIONTYPE_LR0] ( [ID] )

GO
CREATE INDEX [IX_RPS_TION_TYPE_9DBCFDD] ON dbo.[RPS_VDTBALANCINGACTION] ([TYPE])
GO
CREATE INDEX [IX_RPS_TION_TYPE_9DBCFDD_C] ON dbo.[RPS_VDTBALANCINGACTION_C] ([TYPE])
GO

ALTER TABLE dbo.[RPS_VDTBALANCINGACTION]
ADD CONSTRAINT [FK_RPS_TION_RPS_ODES_8BA2E8A]
FOREIGN KEY ([CANCELREASONCODEFK]) REFERENCES dbo.[RPS_VDTBALACTREASONCODES] ( [ID] )

GO
CREATE INDEX [IX_RPS_TION_CANCDEFK_A520BB5] ON dbo.[RPS_VDTBALANCINGACTION] ([CANCELREASONCODEFK])
GO
CREATE INDEX [IX_RPS_TION_CANCDEFK_A520BB5_C] ON dbo.[RPS_VDTBALANCINGACTION_C] ([CANCELREASONCODEFK])
GO

ALTER TABLE dbo.[RPS_VDTBALANCINGACTION]
ADD CONSTRAINT [FK_RPS_TION_RPS_TNTF_609033C]
FOREIGN KEY ([NTFRPRTNTFFK]) REFERENCES dbo.[RPS_VDTNTFRPRTNTF] ( [ID] )

GO
CREATE INDEX [IX_RPS_TION_NTFRTFFK_B77158A] ON dbo.[RPS_VDTBALANCINGACTION] ([NTFRPRTNTFFK])
GO
CREATE INDEX [IX_RPS_TION_NTFRTFFK_B77158A_C] ON dbo.[RPS_VDTBALANCINGACTION_C] ([NTFRPRTNTFFK])
GO

ALTER TABLE dbo.[RPS_VDTBALANCINGACTION]
ADD CONSTRAINT [FK_RPS_TION_RPS__LR0_8D1B876]
FOREIGN KEY ([DELIVERYDIRECTION]) REFERENCES dbo.[RPS_VDTDIRECTION_LR0] ( [ID] )

GO
CREATE INDEX [IX_RPS_TION_DELITION_BDED1F7] ON dbo.[RPS_VDTBALANCINGACTION] ([DELIVERYDIRECTION])
GO
CREATE INDEX [IX_RPS_TION_DELITION_BDED1F7_C] ON dbo.[RPS_VDTBALANCINGACTION_C] ([DELIVERYDIRECTION])
GO

ALTER TABLE dbo.[RPS_VDTNTFRPRTNTF]
ADD CONSTRAINT [FK_RPS_TNTF_RPS_RACT_842DDF9]
FOREIGN KEY ([CONTRACTFK]) REFERENCES dbo.[RPS_VDTVDPCONTRACT] ( [ID] )

GO
CREATE INDEX [IX_RPS_TNTF_CONTCTFK_0CFCD8E] ON dbo.[RPS_VDTNTFRPRTNTF] ([CONTRACTFK])
GO
CREATE INDEX [IX_RPS_TNTF_CONTCTFK_0CFCD8E_C] ON dbo.[RPS_VDTNTFRPRTNTF_C] ([CONTRACTFK])
GO

ALTER TABLE dbo.[RPS_VDTNTFRPRTNTF]
ADD CONSTRAINT [FK_RPS_TNTF_EDA_SAGE_2A34214]
FOREIGN KEY ([MESSAGEFK]) REFERENCES dbo.[EDA_MESSAGE] ( [ID] )

GO
CREATE INDEX [IX_RPS_TNTF_MESSGEFK_22046BB] ON dbo.[RPS_VDTNTFRPRTNTF] ([MESSAGEFK])
GO
CREATE INDEX [IX_RPS_TNTF_MESSGEFK_22046BB_C] ON dbo.[RPS_VDTNTFRPRTNTF_C] ([MESSAGEFK])
GO

ALTER TABLE dbo.[RPS_VDTSETUP]
ADD CONSTRAINT [FK_RPS_ETUP_RPS_ARIO_58C4870]
FOREIGN KEY ([PAR910ACTIONSCENARIOFK]) REFERENCES dbo.[RPS_VDTTRADINGSCENARIO] ( [ID] )

GO
CREATE INDEX [IX_RPS_ETUP_PAR9IOFK_F6637D8] ON dbo.[RPS_VDTSETUP] ([PAR910ACTIONSCENARIOFK])
GO
CREATE INDEX [IX_RPS_ETUP_PAR9IOFK_F6637D8_C] ON dbo.[RPS_VDTSETUP_C] ([PAR910ACTIONSCENARIOFK])
GO

ALTER TABLE dbo.[RPS_VDTSHIPPERPAIR]
ADD CONSTRAINT [FK_RPS_PAIR_RPS_ETUP_CDE70DD]
FOREIGN KEY ([SETUPFK]) REFERENCES dbo.[RPS_VDTSETUP] ( [ID] )

GO
CREATE INDEX [IX_RPS_PAIR_SETUPFK_1AE8B0E] ON dbo.[RPS_VDTSHIPPERPAIR] ([SETUPFK])
GO
CREATE INDEX [IX_RPS_PAIR_SETUPFK_1AE8B0E_C] ON dbo.[RPS_VDTSHIPPERPAIR_C] ([SETUPFK])
GO

ALTER TABLE dbo.[RPS_VDTTRADECAPTURE]
ADD CONSTRAINT [FK_RPS_TURE_RPS_RACT_61664A0]
FOREIGN KEY ([CONTRACTFK]) REFERENCES dbo.[RPS_VDTVDPCONTRACT] ( [ID] )

GO
CREATE INDEX [IX_RPS_TURE_CONTCTFK_CCCD6D9] ON dbo.[RPS_VDTTRADECAPTURE] ([CONTRACTFK])
GO
CREATE INDEX [IX_RPS_TURE_CONTCTFK_CCCD6D9_C] ON dbo.[RPS_VDTTRADECAPTURE_C] ([CONTRACTFK])
GO
CREATE INDEX [IX_RPS__LR1_EE_IM_ID_C8B10D4_C] ON dbo.[RPS_VDTACTIONTYPE_LR1_C] ([EE_ITEM_ID])
GO
CREATE INDEX [IX_RPS__LR0_EE_IM_ID_8AA395D_C] ON dbo.[RPS_VDTACTIONTYPE_LR0_C] ([EE_ITEM_ID])
GO
CREATE INDEX [IX_RPS__LR1_EE_IM_ID_C5E3283_C] ON dbo.[RPS_VDTDIRECTION_LR1_C] ([EE_ITEM_ID])
GO
CREATE INDEX [IX_RPS__LR0_EE_IM_ID_AEE3648_C] ON dbo.[RPS_VDTDIRECTION_LR0_C] ([EE_ITEM_ID])
GO
CREATE INDEX [IX_RPS_DATA_EE_IM_ID_8C85884_C] ON dbo.[RPS_AGGREGATEDDSODATA_C] ([EE_ITEM_ID])
GO
CREATE INDEX [IX_RPS_TNTF_EE_IM_ID_78C9978_C] ON dbo.[RPS_VDTNTFRPRTNTF_C] ([EE_ITEM_ID])
GO
CREATE INDEX [IX_RPS_PAIR_EE_IM_ID_387194C_C] ON dbo.[RPS_VDTSHIPPERPAIR_C] ([EE_ITEM_ID])
GO
CREATE INDEX [IX_RPS_TURE_EE_IM_ID_26F32CA_C] ON dbo.[RPS_VDTTRADECAPTURE_C] ([EE_ITEM_ID])
GO
-- 2: triggery a pohledy
GO

IF OBJECT_ID(N'dbo.RPS_FORECASTEDDSODATA_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_FORECASTEDDSODATA_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[RPS_FORECASTEDDSODATA_I] ON dbo.[RPS_FORECASTEDDSODATA] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[RPS_FORECASTEDDSODATA] ([ID], EE_TRANS_ID, t1.[AGGREGATEDDSODATAFK], t1.[CAPTION], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[AGGREGATEDDSODATAFK], inserted.[CAPTION], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[RPS_FORECASTEDDSODATA_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[AGGREGATEDDSODATAFK], t1.[CAPTION], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[AGGREGATEDDSODATAFK], inserted.[CAPTION], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_FORECASTEDDSODATA_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_FORECASTEDDSODATA_U]'
END

GO

CREATE TRIGGER dbo.[RPS_FORECASTEDDSODATA_U] ON dbo.[RPS_FORECASTEDDSODATA] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[RPS_FORECASTEDDSODATA] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[RPS_FORECASTEDDSODATA] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[RPS_FORECASTEDDSODATA_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[AGGREGATEDDSODATAFK], t1.[CAPTION], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[AGGREGATEDDSODATAFK], inserted.[CAPTION], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_FORECASTEDDSODATA_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_FORECASTEDDSODATA_D]'
END

GO

CREATE TRIGGER dbo.[RPS_FORECASTEDDSODATA_D] ON dbo.[RPS_FORECASTEDDSODATA] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[RPS_FORECASTEDDSODATA_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_FORECASTEDDSODATA_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[RPS_FORECASTEDDSODATA_H] AS SELECT * FROM dbo.[RPS_FORECASTEDDSODATA]'
END

GO

ALTER VIEW dbo.[RPS_FORECASTEDDSODATA_H] AS
WITH cn AS (SELECT * FROM dbo.[RPS_FORECASTEDDSODATA_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[AGGREGATEDDSODATAFK], t1.[CAPTION], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.RPS_VDTBALACTREASONCODES_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTBALACTREASONCODES_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[RPS_VDTBALACTREASONCODES_I] ON dbo.[RPS_VDTBALACTREASONCODES] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[RPS_VDTBALACTREASONCODES] ([ID], EE_TRANS_ID, t1.[DESCRIPTION], t1.[ISCANCELREASON], t1.[ISPREPAREREASON], t1.[NAME], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[DESCRIPTION], inserted.[ISCANCELREASON], inserted.[ISPREPAREREASON], inserted.[NAME], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[RPS_VDTBALACTREASONCODES_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[DESCRIPTION], t1.[ISCANCELREASON], t1.[ISPREPAREREASON], t1.[NAME], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[DESCRIPTION], inserted.[ISCANCELREASON], inserted.[ISPREPAREREASON], inserted.[NAME], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTBALACTREASONCODES_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTBALACTREASONCODES_U]'
END

GO

CREATE TRIGGER dbo.[RPS_VDTBALACTREASONCODES_U] ON dbo.[RPS_VDTBALACTREASONCODES] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[RPS_VDTBALACTREASONCODES] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[RPS_VDTBALACTREASONCODES] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[RPS_VDTBALACTREASONCODES_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[DESCRIPTION], t1.[ISCANCELREASON], t1.[ISPREPAREREASON], t1.[NAME], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[DESCRIPTION], inserted.[ISCANCELREASON], inserted.[ISPREPAREREASON], inserted.[NAME], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTBALACTREASONCODES_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTBALACTREASONCODES_D]'
END

GO

CREATE TRIGGER dbo.[RPS_VDTBALACTREASONCODES_D] ON dbo.[RPS_VDTBALACTREASONCODES] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[RPS_VDTBALACTREASONCODES_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTBALACTREASONCODES_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[RPS_VDTBALACTREASONCODES_H] AS SELECT * FROM dbo.[RPS_VDTBALACTREASONCODES]'
END

GO

ALTER VIEW dbo.[RPS_VDTBALACTREASONCODES_H] AS
WITH cn AS (SELECT * FROM dbo.[RPS_VDTBALACTREASONCODES_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[DESCRIPTION], t1.[ISCANCELREASON], t1.[ISPREPAREREASON], t1.[NAME], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.RPS_VDTBALANCINGACTION_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTBALANCINGACTION_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[RPS_VDTBALANCINGACTION_I] ON dbo.[RPS_VDTBALANCINGACTION] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[RPS_VDTBALANCINGACTION] ([ID], EE_TRANS_ID, t1.[AUTOCREATED], t1.[BALACTREASONCODEFK], t1.[BALACTREASONTEXTCZ], t1.[BALACTREASONTEXTEN], t1.[CANCELREASONCODEFK], t1.[CANCELREASONTEXTCZ], t1.[CANCELREASONTEXTEN], t1.[CONNECTIONPOINT], t1.[CREATEDAT], t1.[DELAY], t1.[DELIVERYDATE], t1.[DELIVERYDIRECTION], t1.[DELIVERYTYPE], t1.[INITIALUNITPRICE], t1.[INITIALUNITPRICERECEIVED], t1.[MARKETPROVIDER], t1.[MARKETTYPE], t1.[MESSAGESPATH], t1.[NTFRPRTNTFFK], t1.[ORDERSTATE], t1.[REMAININGAMOUNTOFGAS], t1.[REQUESTEDAMOUNTOFGAS], t1.[STATEDESCRIPTION], t1.[STATEFK], t1.[TRADINGFINISHEDAT], t1.[TRADINGSCENARIOFK], t1.[TRADINGSTARTEDAT], t1.[TYPE], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[AUTOCREATED], inserted.[BALACTREASONCODEFK], inserted.[BALACTREASONTEXTCZ], inserted.[BALACTREASONTEXTEN], inserted.[CANCELREASONCODEFK], inserted.[CANCELREASONTEXTCZ], inserted.[CANCELREASONTEXTEN], inserted.[CONNECTIONPOINT], inserted.[CREATEDAT], inserted.[DELAY], inserted.[DELIVERYDATE], inserted.[DELIVERYDIRECTION], inserted.[DELIVERYTYPE], inserted.[INITIALUNITPRICE], inserted.[INITIALUNITPRICERECEIVED], inserted.[MARKETPROVIDER], inserted.[MARKETTYPE], inserted.[MESSAGESPATH], inserted.[NTFRPRTNTFFK], inserted.[ORDERSTATE], inserted.[REMAININGAMOUNTOFGAS], inserted.[REQUESTEDAMOUNTOFGAS], inserted.[STATEDESCRIPTION], inserted.[STATEFK], inserted.[TRADINGFINISHEDAT], inserted.[TRADINGSCENARIOFK], inserted.[TRADINGSTARTEDAT], inserted.[TYPE], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[RPS_VDTBALANCINGACTION_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[AUTOCREATED], t1.[BALACTREASONCODEFK], t1.[BALACTREASONTEXTCZ], t1.[BALACTREASONTEXTEN], t1.[CANCELREASONCODEFK], t1.[CANCELREASONTEXTCZ], t1.[CANCELREASONTEXTEN], t1.[CONNECTIONPOINT], t1.[CREATEDAT], t1.[DELAY], t1.[DELIVERYDATE], t1.[DELIVERYDIRECTION], t1.[DELIVERYTYPE], t1.[INITIALUNITPRICE], t1.[INITIALUNITPRICERECEIVED], t1.[MARKETPROVIDER], t1.[MARKETTYPE], t1.[MESSAGESPATH], t1.[NTFRPRTNTFFK], t1.[ORDERSTATE], t1.[REMAININGAMOUNTOFGAS], t1.[REQUESTEDAMOUNTOFGAS], t1.[STATEDESCRIPTION], t1.[STATEFK], t1.[TRADINGFINISHEDAT], t1.[TRADINGSCENARIOFK], t1.[TRADINGSTARTEDAT], t1.[TYPE], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[AUTOCREATED], inserted.[BALACTREASONCODEFK], inserted.[BALACTREASONTEXTCZ], inserted.[BALACTREASONTEXTEN], inserted.[CANCELREASONCODEFK], inserted.[CANCELREASONTEXTCZ], inserted.[CANCELREASONTEXTEN], inserted.[CONNECTIONPOINT], inserted.[CREATEDAT], inserted.[DELAY], inserted.[DELIVERYDATE], inserted.[DELIVERYDIRECTION], inserted.[DELIVERYTYPE], inserted.[INITIALUNITPRICE], inserted.[INITIALUNITPRICERECEIVED], inserted.[MARKETPROVIDER], inserted.[MARKETTYPE], inserted.[MESSAGESPATH], inserted.[NTFRPRTNTFFK], inserted.[ORDERSTATE], inserted.[REMAININGAMOUNTOFGAS], inserted.[REQUESTEDAMOUNTOFGAS], inserted.[STATEDESCRIPTION], inserted.[STATEFK], inserted.[TRADINGFINISHEDAT], inserted.[TRADINGSCENARIOFK], inserted.[TRADINGSTARTEDAT], inserted.[TYPE], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTBALANCINGACTION_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTBALANCINGACTION_U]'
END

GO

CREATE TRIGGER dbo.[RPS_VDTBALANCINGACTION_U] ON dbo.[RPS_VDTBALANCINGACTION] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[RPS_VDTBALANCINGACTION] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[RPS_VDTBALANCINGACTION] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[RPS_VDTBALANCINGACTION_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[AUTOCREATED], t1.[BALACTREASONCODEFK], t1.[BALACTREASONTEXTCZ], t1.[BALACTREASONTEXTEN], t1.[CANCELREASONCODEFK], t1.[CANCELREASONTEXTCZ], t1.[CANCELREASONTEXTEN], t1.[CONNECTIONPOINT], t1.[CREATEDAT], t1.[DELAY], t1.[DELIVERYDATE], t1.[DELIVERYDIRECTION], t1.[DELIVERYTYPE], t1.[INITIALUNITPRICE], t1.[INITIALUNITPRICERECEIVED], t1.[MARKETPROVIDER], t1.[MARKETTYPE], t1.[MESSAGESPATH], t1.[NTFRPRTNTFFK], t1.[ORDERSTATE], t1.[REMAININGAMOUNTOFGAS], t1.[REQUESTEDAMOUNTOFGAS], t1.[STATEDESCRIPTION], t1.[STATEFK], t1.[TRADINGFINISHEDAT], t1.[TRADINGSCENARIOFK], t1.[TRADINGSTARTEDAT], t1.[TYPE], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[AUTOCREATED], inserted.[BALACTREASONCODEFK], inserted.[BALACTREASONTEXTCZ], inserted.[BALACTREASONTEXTEN], inserted.[CANCELREASONCODEFK], inserted.[CANCELREASONTEXTCZ], inserted.[CANCELREASONTEXTEN], inserted.[CONNECTIONPOINT], inserted.[CREATEDAT], inserted.[DELAY], inserted.[DELIVERYDATE], inserted.[DELIVERYDIRECTION], inserted.[DELIVERYTYPE], inserted.[INITIALUNITPRICE], inserted.[INITIALUNITPRICERECEIVED], inserted.[MARKETPROVIDER], inserted.[MARKETTYPE], inserted.[MESSAGESPATH], inserted.[NTFRPRTNTFFK], inserted.[ORDERSTATE], inserted.[REMAININGAMOUNTOFGAS], inserted.[REQUESTEDAMOUNTOFGAS], inserted.[STATEDESCRIPTION], inserted.[STATEFK], inserted.[TRADINGFINISHEDAT], inserted.[TRADINGSCENARIOFK], inserted.[TRADINGSTARTEDAT], inserted.[TYPE], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTBALANCINGACTION_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTBALANCINGACTION_D]'
END

GO

CREATE TRIGGER dbo.[RPS_VDTBALANCINGACTION_D] ON dbo.[RPS_VDTBALANCINGACTION] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[RPS_VDTBALANCINGACTION_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTBALANCINGACTION_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[RPS_VDTBALANCINGACTION_H] AS SELECT * FROM dbo.[RPS_VDTBALANCINGACTION]'
END

GO

ALTER VIEW dbo.[RPS_VDTBALANCINGACTION_H] AS
WITH cn AS (SELECT * FROM dbo.[RPS_VDTBALANCINGACTION_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[AUTOCREATED], t1.[BALACTREASONCODEFK], t1.[BALACTREASONTEXTCZ], t1.[BALACTREASONTEXTEN], t1.[CANCELREASONCODEFK], t1.[CANCELREASONTEXTCZ], t1.[CANCELREASONTEXTEN], t1.[CONNECTIONPOINT], t1.[CREATEDAT], t1.[DELAY], t1.[DELIVERYDATE], t1.[DELIVERYDIRECTION], t1.[DELIVERYTYPE], t1.[INITIALUNITPRICE], t1.[INITIALUNITPRICERECEIVED], t1.[MARKETPROVIDER], t1.[MARKETTYPE], t1.[MESSAGESPATH], t1.[NTFRPRTNTFFK], t1.[ORDERSTATE], t1.[REMAININGAMOUNTOFGAS], t1.[REQUESTEDAMOUNTOFGAS], t1.[STATEDESCRIPTION], t1.[STATEFK], t1.[TRADINGFINISHEDAT], t1.[TRADINGSCENARIOFK], t1.[TRADINGSTARTEDAT], t1.[TYPE], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.RPS_VDTSETUP_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTSETUP_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[RPS_VDTSETUP_I] ON dbo.[RPS_VDTSETUP] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[RPS_VDTSETUP] ([ID], EE_TRANS_ID, t1.[BALACTISSUERID], t1.[BALACTRECIPIENTID], t1.[DELAYDEFAULTVALUE], t1.[DELAYMAXVALUE], t1.[DELAYMINVALUE], t1.[EMAILADDRESSESOFEXTERNALUSERS], t1.[EMAILADDRESSESOFINTERNALUSERS], t1.[IMPORTEDEMAILADDRESSESOFEXTERNALUSERS], t1.[IMPORTEDEMAILADDRESSESOFINTERNALUSERS], t1.[NOMINTCONTRACTREFERENCE], t1.[NOMINTISSUERID], t1.[NOMINTRECIPIENTID], t1.[PAR910ACTIONAMOUNT], t1.[PAR910ACTIONAUTOSTART], t1.[PAR910ACTIONDELAYDEFAULT], t1.[PAR910ACTIONDELAYMAX], t1.[PAR910ACTIONDELAYMIN], t1.[PAR910ACTIONSCENARIOFK], t1.[SCENARIOSTEPTIMERESERVE], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[BALACTISSUERID], inserted.[BALACTRECIPIENTID], inserted.[DELAYDEFAULTVALUE], inserted.[DELAYMAXVALUE], inserted.[DELAYMINVALUE], inserted.[EMAILADDRESSESOFEXTERNALUSERS], inserted.[EMAILADDRESSESOFINTERNALUSERS], inserted.[IMPORTEDEMAILADDRESSESOFEXTERNALUSERS], inserted.[IMPORTEDEMAILADDRESSESOFINTERNALUSERS], inserted.[NOMINTCONTRACTREFERENCE], inserted.[NOMINTISSUERID], inserted.[NOMINTRECIPIENTID], inserted.[PAR910ACTIONAMOUNT], inserted.[PAR910ACTIONAUTOSTART], inserted.[PAR910ACTIONDELAYDEFAULT], inserted.[PAR910ACTIONDELAYMAX], inserted.[PAR910ACTIONDELAYMIN], inserted.[PAR910ACTIONSCENARIOFK], inserted.[SCENARIOSTEPTIMERESERVE], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[RPS_VDTSETUP_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[BALACTISSUERID], t1.[BALACTRECIPIENTID], t1.[DELAYDEFAULTVALUE], t1.[DELAYMAXVALUE], t1.[DELAYMINVALUE], t1.[EMAILADDRESSESOFEXTERNALUSERS], t1.[EMAILADDRESSESOFINTERNALUSERS], t1.[IMPORTEDEMAILADDRESSESOFEXTERNALUSERS], t1.[IMPORTEDEMAILADDRESSESOFINTERNALUSERS], t1.[NOMINTCONTRACTREFERENCE], t1.[NOMINTISSUERID], t1.[NOMINTRECIPIENTID], t1.[PAR910ACTIONAMOUNT], t1.[PAR910ACTIONAUTOSTART], t1.[PAR910ACTIONDELAYDEFAULT], t1.[PAR910ACTIONDELAYMAX], t1.[PAR910ACTIONDELAYMIN], t1.[PAR910ACTIONSCENARIOFK], t1.[SCENARIOSTEPTIMERESERVE], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[BALACTISSUERID], inserted.[BALACTRECIPIENTID], inserted.[DELAYDEFAULTVALUE], inserted.[DELAYMAXVALUE], inserted.[DELAYMINVALUE], inserted.[EMAILADDRESSESOFEXTERNALUSERS], inserted.[EMAILADDRESSESOFINTERNALUSERS], inserted.[IMPORTEDEMAILADDRESSESOFEXTERNALUSERS], inserted.[IMPORTEDEMAILADDRESSESOFINTERNALUSERS], inserted.[NOMINTCONTRACTREFERENCE], inserted.[NOMINTISSUERID], inserted.[NOMINTRECIPIENTID], inserted.[PAR910ACTIONAMOUNT], inserted.[PAR910ACTIONAUTOSTART], inserted.[PAR910ACTIONDELAYDEFAULT], inserted.[PAR910ACTIONDELAYMAX], inserted.[PAR910ACTIONDELAYMIN], inserted.[PAR910ACTIONSCENARIOFK], inserted.[SCENARIOSTEPTIMERESERVE], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTSETUP_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTSETUP_U]'
END

GO

CREATE TRIGGER dbo.[RPS_VDTSETUP_U] ON dbo.[RPS_VDTSETUP] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[RPS_VDTSETUP] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[RPS_VDTSETUP] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[RPS_VDTSETUP_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[BALACTISSUERID], t1.[BALACTRECIPIENTID], t1.[DELAYDEFAULTVALUE], t1.[DELAYMAXVALUE], t1.[DELAYMINVALUE], t1.[EMAILADDRESSESOFEXTERNALUSERS], t1.[EMAILADDRESSESOFINTERNALUSERS], t1.[IMPORTEDEMAILADDRESSESOFEXTERNALUSERS], t1.[IMPORTEDEMAILADDRESSESOFINTERNALUSERS], t1.[NOMINTCONTRACTREFERENCE], t1.[NOMINTISSUERID], t1.[NOMINTRECIPIENTID], t1.[PAR910ACTIONAMOUNT], t1.[PAR910ACTIONAUTOSTART], t1.[PAR910ACTIONDELAYDEFAULT], t1.[PAR910ACTIONDELAYMAX], t1.[PAR910ACTIONDELAYMIN], t1.[PAR910ACTIONSCENARIOFK], t1.[SCENARIOSTEPTIMERESERVE], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[BALACTISSUERID], inserted.[BALACTRECIPIENTID], inserted.[DELAYDEFAULTVALUE], inserted.[DELAYMAXVALUE], inserted.[DELAYMINVALUE], inserted.[EMAILADDRESSESOFEXTERNALUSERS], inserted.[EMAILADDRESSESOFINTERNALUSERS], inserted.[IMPORTEDEMAILADDRESSESOFEXTERNALUSERS], inserted.[IMPORTEDEMAILADDRESSESOFINTERNALUSERS], inserted.[NOMINTCONTRACTREFERENCE], inserted.[NOMINTISSUERID], inserted.[NOMINTRECIPIENTID], inserted.[PAR910ACTIONAMOUNT], inserted.[PAR910ACTIONAUTOSTART], inserted.[PAR910ACTIONDELAYDEFAULT], inserted.[PAR910ACTIONDELAYMAX], inserted.[PAR910ACTIONDELAYMIN], inserted.[PAR910ACTIONSCENARIOFK], inserted.[SCENARIOSTEPTIMERESERVE], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTSETUP_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTSETUP_D]'
END

GO

CREATE TRIGGER dbo.[RPS_VDTSETUP_D] ON dbo.[RPS_VDTSETUP] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[RPS_VDTSETUP_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTSETUP_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[RPS_VDTSETUP_H] AS SELECT * FROM dbo.[RPS_VDTSETUP]'
END

GO

ALTER VIEW dbo.[RPS_VDTSETUP_H] AS
WITH cn AS (SELECT * FROM dbo.[RPS_VDTSETUP_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[BALACTISSUERID], t1.[BALACTRECIPIENTID], t1.[DELAYDEFAULTVALUE], t1.[DELAYMAXVALUE], t1.[DELAYMINVALUE], t1.[EMAILADDRESSESOFEXTERNALUSERS], t1.[EMAILADDRESSESOFINTERNALUSERS], t1.[IMPORTEDEMAILADDRESSESOFEXTERNALUSERS], t1.[IMPORTEDEMAILADDRESSESOFINTERNALUSERS], t1.[NOMINTCONTRACTREFERENCE], t1.[NOMINTISSUERID], t1.[NOMINTRECIPIENTID], t1.[PAR910ACTIONAMOUNT], t1.[PAR910ACTIONAUTOSTART], t1.[PAR910ACTIONDELAYDEFAULT], t1.[PAR910ACTIONDELAYMAX], t1.[PAR910ACTIONDELAYMIN], t1.[PAR910ACTIONSCENARIOFK], t1.[SCENARIOSTEPTIMERESERVE], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.RPS_VDTSTATETYPE_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTSTATETYPE_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[RPS_VDTSTATETYPE_I] ON dbo.[RPS_VDTSTATETYPE] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[RPS_VDTSTATETYPE] ([ID], EE_TRANS_ID, t1.[DESCRIPTION], t1.[KEY], t1.[NAME], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[DESCRIPTION], inserted.[KEY], inserted.[NAME], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[RPS_VDTSTATETYPE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[DESCRIPTION], t1.[KEY], t1.[NAME], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[DESCRIPTION], inserted.[KEY], inserted.[NAME], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTSTATETYPE_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTSTATETYPE_U]'
END

GO

CREATE TRIGGER dbo.[RPS_VDTSTATETYPE_U] ON dbo.[RPS_VDTSTATETYPE] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[RPS_VDTSTATETYPE] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[RPS_VDTSTATETYPE] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[RPS_VDTSTATETYPE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[DESCRIPTION], t1.[KEY], t1.[NAME], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[DESCRIPTION], inserted.[KEY], inserted.[NAME], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTSTATETYPE_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTSTATETYPE_D]'
END

GO

CREATE TRIGGER dbo.[RPS_VDTSTATETYPE_D] ON dbo.[RPS_VDTSTATETYPE] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[RPS_VDTSTATETYPE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTSTATETYPE_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[RPS_VDTSTATETYPE_H] AS SELECT * FROM dbo.[RPS_VDTSTATETYPE]'
END

GO

ALTER VIEW dbo.[RPS_VDTSTATETYPE_H] AS
WITH cn AS (SELECT * FROM dbo.[RPS_VDTSTATETYPE_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[DESCRIPTION], t1.[KEY], t1.[NAME], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.RPS_VDTVDPLASTTRADEPRICE_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTVDPLASTTRADEPRICE_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[RPS_VDTVDPLASTTRADEPRICE_I] ON dbo.[RPS_VDTVDPLASTTRADEPRICE] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[RPS_VDTVDPLASTTRADEPRICE] ([ID], EE_TRANS_ID, t1.[BALACTPX], t1.[CONTRACTFK], t1.[NTFRPRTREASON], t1.[PRICE], t1.[RECEIVEDAT], t1.[TOTALQTY], t1.[VALIDITYPERIODHOUR], t1.[WAPRICEORDR], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[BALACTPX], inserted.[CONTRACTFK], inserted.[NTFRPRTREASON], inserted.[PRICE], inserted.[RECEIVEDAT], inserted.[TOTALQTY], inserted.[VALIDITYPERIODHOUR], inserted.[WAPRICEORDR], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[RPS_VDTVDPLASTTRADEPRICE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[BALACTPX], t1.[CONTRACTFK], t1.[NTFRPRTREASON], t1.[PRICE], t1.[RECEIVEDAT], t1.[TOTALQTY], t1.[VALIDITYPERIODHOUR], t1.[WAPRICEORDR], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[BALACTPX], inserted.[CONTRACTFK], inserted.[NTFRPRTREASON], inserted.[PRICE], inserted.[RECEIVEDAT], inserted.[TOTALQTY], inserted.[VALIDITYPERIODHOUR], inserted.[WAPRICEORDR], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTVDPLASTTRADEPRICE_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTVDPLASTTRADEPRICE_U]'
END

GO

CREATE TRIGGER dbo.[RPS_VDTVDPLASTTRADEPRICE_U] ON dbo.[RPS_VDTVDPLASTTRADEPRICE] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[RPS_VDTVDPLASTTRADEPRICE] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[RPS_VDTVDPLASTTRADEPRICE] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[RPS_VDTVDPLASTTRADEPRICE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[BALACTPX], t1.[CONTRACTFK], t1.[NTFRPRTREASON], t1.[PRICE], t1.[RECEIVEDAT], t1.[TOTALQTY], t1.[VALIDITYPERIODHOUR], t1.[WAPRICEORDR], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[BALACTPX], inserted.[CONTRACTFK], inserted.[NTFRPRTREASON], inserted.[PRICE], inserted.[RECEIVEDAT], inserted.[TOTALQTY], inserted.[VALIDITYPERIODHOUR], inserted.[WAPRICEORDR], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTVDPLASTTRADEPRICE_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTVDPLASTTRADEPRICE_D]'
END

GO

CREATE TRIGGER dbo.[RPS_VDTVDPLASTTRADEPRICE_D] ON dbo.[RPS_VDTVDPLASTTRADEPRICE] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[RPS_VDTVDPLASTTRADEPRICE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTVDPLASTTRADEPRICE_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[RPS_VDTVDPLASTTRADEPRICE_H] AS SELECT * FROM dbo.[RPS_VDTVDPLASTTRADEPRICE]'
END

GO

ALTER VIEW dbo.[RPS_VDTVDPLASTTRADEPRICE_H] AS
WITH cn AS (SELECT * FROM dbo.[RPS_VDTVDPLASTTRADEPRICE_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[BALACTPX], t1.[CONTRACTFK], t1.[NTFRPRTREASON], t1.[PRICE], t1.[RECEIVEDAT], t1.[TOTALQTY], t1.[VALIDITYPERIODHOUR], t1.[WAPRICEORDR], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.RPS_VDTACTIONTYPE_LR1_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTACTIONTYPE_LR1_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[RPS_VDTACTIONTYPE_LR1_I] ON dbo.[RPS_VDTACTIONTYPE_LR1] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[RPS_VDTACTIONTYPE_LR1] ([ID], EE_TRANS_ID, t1.[SYS_L_ID], t1.[SYS_L_LOCALE], t1.[CAPTION], t1.[CAPTION_SYS_L_EXISTS], t1.[DESCRIPTION], t1.[DESCRIPTION_SYS_L_EXISTS], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[SYS_L_ID], inserted.[SYS_L_LOCALE], inserted.[CAPTION], inserted.[CAPTION_SYS_L_EXISTS], inserted.[DESCRIPTION], inserted.[DESCRIPTION_SYS_L_EXISTS], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[RPS_VDTACTIONTYPE_LR1_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[SYS_L_ID], t1.[SYS_L_LOCALE], t1.[CAPTION], t1.[CAPTION_SYS_L_EXISTS], t1.[DESCRIPTION], t1.[DESCRIPTION_SYS_L_EXISTS], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[SYS_L_ID], inserted.[SYS_L_LOCALE], inserted.[CAPTION], inserted.[CAPTION_SYS_L_EXISTS], inserted.[DESCRIPTION], inserted.[DESCRIPTION_SYS_L_EXISTS], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTACTIONTYPE_LR1_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTACTIONTYPE_LR1_U]'
END

GO

CREATE TRIGGER dbo.[RPS_VDTACTIONTYPE_LR1_U] ON dbo.[RPS_VDTACTIONTYPE_LR1] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[RPS_VDTACTIONTYPE_LR1] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[RPS_VDTACTIONTYPE_LR1] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[RPS_VDTACTIONTYPE_LR1_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[SYS_L_ID], t1.[SYS_L_LOCALE], t1.[CAPTION], t1.[CAPTION_SYS_L_EXISTS], t1.[DESCRIPTION], t1.[DESCRIPTION_SYS_L_EXISTS], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[SYS_L_ID], inserted.[SYS_L_LOCALE], inserted.[CAPTION], inserted.[CAPTION_SYS_L_EXISTS], inserted.[DESCRIPTION], inserted.[DESCRIPTION_SYS_L_EXISTS], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTACTIONTYPE_LR1_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTACTIONTYPE_LR1_D]'
END

GO

CREATE TRIGGER dbo.[RPS_VDTACTIONTYPE_LR1_D] ON dbo.[RPS_VDTACTIONTYPE_LR1] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[RPS_VDTACTIONTYPE_LR1_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTACTIONTYPE_LR1_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[RPS_VDTACTIONTYPE_LR1_H] AS SELECT * FROM dbo.[RPS_VDTACTIONTYPE_LR1]'
END

GO

ALTER VIEW dbo.[RPS_VDTACTIONTYPE_LR1_H] AS
WITH cn AS (SELECT * FROM dbo.[RPS_VDTACTIONTYPE_LR1_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[SYS_L_ID], t1.[SYS_L_LOCALE], t1.[CAPTION], t1.[CAPTION_SYS_L_EXISTS], t1.[DESCRIPTION], t1.[DESCRIPTION_SYS_L_EXISTS], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.RPS_VDTACTIONTYPE_LR0_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTACTIONTYPE_LR0_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[RPS_VDTACTIONTYPE_LR0_I] ON dbo.[RPS_VDTACTIONTYPE_LR0] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[RPS_VDTACTIONTYPE_LR0] ([ID], EE_TRANS_ID, t1.[ACTIVE], t1.[CAPTION], t1.[DESCRIPTION], t1.[KEY], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[ACTIVE], inserted.[CAPTION], inserted.[DESCRIPTION], inserted.[KEY], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[RPS_VDTACTIONTYPE_LR0_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ACTIVE], t1.[CAPTION], t1.[DESCRIPTION], t1.[KEY], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ACTIVE], inserted.[CAPTION], inserted.[DESCRIPTION], inserted.[KEY], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTACTIONTYPE_LR0_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTACTIONTYPE_LR0_U]'
END

GO

CREATE TRIGGER dbo.[RPS_VDTACTIONTYPE_LR0_U] ON dbo.[RPS_VDTACTIONTYPE_LR0] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[RPS_VDTACTIONTYPE_LR0] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[RPS_VDTACTIONTYPE_LR0] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[RPS_VDTACTIONTYPE_LR0_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ACTIVE], t1.[CAPTION], t1.[DESCRIPTION], t1.[KEY], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ACTIVE], inserted.[CAPTION], inserted.[DESCRIPTION], inserted.[KEY], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTACTIONTYPE_LR0_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTACTIONTYPE_LR0_D]'
END

GO

CREATE TRIGGER dbo.[RPS_VDTACTIONTYPE_LR0_D] ON dbo.[RPS_VDTACTIONTYPE_LR0] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[RPS_VDTACTIONTYPE_LR0_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTACTIONTYPE_LR0_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[RPS_VDTACTIONTYPE_LR0_H] AS SELECT * FROM dbo.[RPS_VDTACTIONTYPE_LR0]'
END

GO

ALTER VIEW dbo.[RPS_VDTACTIONTYPE_LR0_H] AS
WITH cn AS (SELECT * FROM dbo.[RPS_VDTACTIONTYPE_LR0_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[ACTIVE], t1.[CAPTION], t1.[DESCRIPTION], t1.[KEY], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.RPS_VDTDIRECTION_LR1_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTDIRECTION_LR1_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[RPS_VDTDIRECTION_LR1_I] ON dbo.[RPS_VDTDIRECTION_LR1] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[RPS_VDTDIRECTION_LR1] ([ID], EE_TRANS_ID, t1.[SYS_L_ID], t1.[SYS_L_LOCALE], t1.[CAPTION], t1.[CAPTION_SYS_L_EXISTS], t1.[DESCRIPTION], t1.[DESCRIPTION_SYS_L_EXISTS], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[SYS_L_ID], inserted.[SYS_L_LOCALE], inserted.[CAPTION], inserted.[CAPTION_SYS_L_EXISTS], inserted.[DESCRIPTION], inserted.[DESCRIPTION_SYS_L_EXISTS], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[RPS_VDTDIRECTION_LR1_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[SYS_L_ID], t1.[SYS_L_LOCALE], t1.[CAPTION], t1.[CAPTION_SYS_L_EXISTS], t1.[DESCRIPTION], t1.[DESCRIPTION_SYS_L_EXISTS], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[SYS_L_ID], inserted.[SYS_L_LOCALE], inserted.[CAPTION], inserted.[CAPTION_SYS_L_EXISTS], inserted.[DESCRIPTION], inserted.[DESCRIPTION_SYS_L_EXISTS], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTDIRECTION_LR1_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTDIRECTION_LR1_U]'
END

GO

CREATE TRIGGER dbo.[RPS_VDTDIRECTION_LR1_U] ON dbo.[RPS_VDTDIRECTION_LR1] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[RPS_VDTDIRECTION_LR1] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[RPS_VDTDIRECTION_LR1] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[RPS_VDTDIRECTION_LR1_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[SYS_L_ID], t1.[SYS_L_LOCALE], t1.[CAPTION], t1.[CAPTION_SYS_L_EXISTS], t1.[DESCRIPTION], t1.[DESCRIPTION_SYS_L_EXISTS], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[SYS_L_ID], inserted.[SYS_L_LOCALE], inserted.[CAPTION], inserted.[CAPTION_SYS_L_EXISTS], inserted.[DESCRIPTION], inserted.[DESCRIPTION_SYS_L_EXISTS], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTDIRECTION_LR1_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTDIRECTION_LR1_D]'
END

GO

CREATE TRIGGER dbo.[RPS_VDTDIRECTION_LR1_D] ON dbo.[RPS_VDTDIRECTION_LR1] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[RPS_VDTDIRECTION_LR1_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTDIRECTION_LR1_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[RPS_VDTDIRECTION_LR1_H] AS SELECT * FROM dbo.[RPS_VDTDIRECTION_LR1]'
END

GO

ALTER VIEW dbo.[RPS_VDTDIRECTION_LR1_H] AS
WITH cn AS (SELECT * FROM dbo.[RPS_VDTDIRECTION_LR1_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[SYS_L_ID], t1.[SYS_L_LOCALE], t1.[CAPTION], t1.[CAPTION_SYS_L_EXISTS], t1.[DESCRIPTION], t1.[DESCRIPTION_SYS_L_EXISTS], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.RPS_VDTDIRECTION_LR0_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTDIRECTION_LR0_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[RPS_VDTDIRECTION_LR0_I] ON dbo.[RPS_VDTDIRECTION_LR0] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[RPS_VDTDIRECTION_LR0] ([ID], EE_TRANS_ID, t1.[ACTIVE], t1.[CAPTION], t1.[DESCRIPTION], t1.[KEY], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[ACTIVE], inserted.[CAPTION], inserted.[DESCRIPTION], inserted.[KEY], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[RPS_VDTDIRECTION_LR0_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ACTIVE], t1.[CAPTION], t1.[DESCRIPTION], t1.[KEY], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ACTIVE], inserted.[CAPTION], inserted.[DESCRIPTION], inserted.[KEY], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTDIRECTION_LR0_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTDIRECTION_LR0_U]'
END

GO

CREATE TRIGGER dbo.[RPS_VDTDIRECTION_LR0_U] ON dbo.[RPS_VDTDIRECTION_LR0] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[RPS_VDTDIRECTION_LR0] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[RPS_VDTDIRECTION_LR0] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[RPS_VDTDIRECTION_LR0_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[ACTIVE], t1.[CAPTION], t1.[DESCRIPTION], t1.[KEY], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[ACTIVE], inserted.[CAPTION], inserted.[DESCRIPTION], inserted.[KEY], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTDIRECTION_LR0_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTDIRECTION_LR0_D]'
END

GO

CREATE TRIGGER dbo.[RPS_VDTDIRECTION_LR0_D] ON dbo.[RPS_VDTDIRECTION_LR0] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[RPS_VDTDIRECTION_LR0_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTDIRECTION_LR0_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[RPS_VDTDIRECTION_LR0_H] AS SELECT * FROM dbo.[RPS_VDTDIRECTION_LR0]'
END

GO

ALTER VIEW dbo.[RPS_VDTDIRECTION_LR0_H] AS
WITH cn AS (SELECT * FROM dbo.[RPS_VDTDIRECTION_LR0_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[ACTIVE], t1.[CAPTION], t1.[DESCRIPTION], t1.[KEY], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.RPS_AGGREGATEDDSODATA_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_AGGREGATEDDSODATA_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[RPS_AGGREGATEDDSODATA_I] ON dbo.[RPS_AGGREGATEDDSODATA] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[RPS_AGGREGATEDDSODATA] ([ID], EE_TRANS_ID, t1.[CAPTION], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[CAPTION], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[RPS_AGGREGATEDDSODATA_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[CAPTION], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[CAPTION], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_AGGREGATEDDSODATA_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_AGGREGATEDDSODATA_U]'
END

GO

CREATE TRIGGER dbo.[RPS_AGGREGATEDDSODATA_U] ON dbo.[RPS_AGGREGATEDDSODATA] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[RPS_AGGREGATEDDSODATA] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[RPS_AGGREGATEDDSODATA] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[RPS_AGGREGATEDDSODATA_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[CAPTION], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[CAPTION], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_AGGREGATEDDSODATA_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_AGGREGATEDDSODATA_D]'
END

GO

CREATE TRIGGER dbo.[RPS_AGGREGATEDDSODATA_D] ON dbo.[RPS_AGGREGATEDDSODATA] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[RPS_AGGREGATEDDSODATA_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_AGGREGATEDDSODATA_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[RPS_AGGREGATEDDSODATA_H] AS SELECT * FROM dbo.[RPS_AGGREGATEDDSODATA]'
END

GO

ALTER VIEW dbo.[RPS_AGGREGATEDDSODATA_H] AS
WITH cn AS (SELECT * FROM dbo.[RPS_AGGREGATEDDSODATA_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[CAPTION], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.RPS_VDTNTFRPRTNTF_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTNTFRPRTNTF_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[RPS_VDTNTFRPRTNTF_I] ON dbo.[RPS_VDTNTFRPRTNTF] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[RPS_VDTNTFRPRTNTF] ([ID], EE_TRANS_ID, t1.[BALACTPX], t1.[CONTRACTFK], t1.[MESSAGEFK], t1.[NTFID], t1.[NTFTYPE], t1.[REASON], t1.[SEVERITY], t1.[TIMESTAMP], t1.[TOTALQTY], t1.[TRADEPX], t1.[TXTCZ], t1.[TXTEN], t1.[WATRADEPX], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[BALACTPX], inserted.[CONTRACTFK], inserted.[MESSAGEFK], inserted.[NTFID], inserted.[NTFTYPE], inserted.[REASON], inserted.[SEVERITY], inserted.[TIMESTAMP], inserted.[TOTALQTY], inserted.[TRADEPX], inserted.[TXTCZ], inserted.[TXTEN], inserted.[WATRADEPX], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[RPS_VDTNTFRPRTNTF_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[BALACTPX], t1.[CONTRACTFK], t1.[MESSAGEFK], t1.[NTFID], t1.[NTFTYPE], t1.[REASON], t1.[SEVERITY], t1.[TIMESTAMP], t1.[TOTALQTY], t1.[TRADEPX], t1.[TXTCZ], t1.[TXTEN], t1.[WATRADEPX], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[BALACTPX], inserted.[CONTRACTFK], inserted.[MESSAGEFK], inserted.[NTFID], inserted.[NTFTYPE], inserted.[REASON], inserted.[SEVERITY], inserted.[TIMESTAMP], inserted.[TOTALQTY], inserted.[TRADEPX], inserted.[TXTCZ], inserted.[TXTEN], inserted.[WATRADEPX], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTNTFRPRTNTF_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTNTFRPRTNTF_U]'
END

GO

CREATE TRIGGER dbo.[RPS_VDTNTFRPRTNTF_U] ON dbo.[RPS_VDTNTFRPRTNTF] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[RPS_VDTNTFRPRTNTF] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[RPS_VDTNTFRPRTNTF] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[RPS_VDTNTFRPRTNTF_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[BALACTPX], t1.[CONTRACTFK], t1.[MESSAGEFK], t1.[NTFID], t1.[NTFTYPE], t1.[REASON], t1.[SEVERITY], t1.[TIMESTAMP], t1.[TOTALQTY], t1.[TRADEPX], t1.[TXTCZ], t1.[TXTEN], t1.[WATRADEPX], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[BALACTPX], inserted.[CONTRACTFK], inserted.[MESSAGEFK], inserted.[NTFID], inserted.[NTFTYPE], inserted.[REASON], inserted.[SEVERITY], inserted.[TIMESTAMP], inserted.[TOTALQTY], inserted.[TRADEPX], inserted.[TXTCZ], inserted.[TXTEN], inserted.[WATRADEPX], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTNTFRPRTNTF_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTNTFRPRTNTF_D]'
END

GO

CREATE TRIGGER dbo.[RPS_VDTNTFRPRTNTF_D] ON dbo.[RPS_VDTNTFRPRTNTF] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[RPS_VDTNTFRPRTNTF_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTNTFRPRTNTF_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[RPS_VDTNTFRPRTNTF_H] AS SELECT * FROM dbo.[RPS_VDTNTFRPRTNTF]'
END

GO

ALTER VIEW dbo.[RPS_VDTNTFRPRTNTF_H] AS
WITH cn AS (SELECT * FROM dbo.[RPS_VDTNTFRPRTNTF_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[BALACTPX], t1.[CONTRACTFK], t1.[MESSAGEFK], t1.[NTFID], t1.[NTFTYPE], t1.[REASON], t1.[SEVERITY], t1.[TIMESTAMP], t1.[TOTALQTY], t1.[TRADEPX], t1.[TXTCZ], t1.[TXTEN], t1.[WATRADEPX], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.RPS_VDTSHIPPERPAIR_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTSHIPPERPAIR_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[RPS_VDTSHIPPERPAIR_I] ON dbo.[RPS_VDTSHIPPERPAIR] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[RPS_VDTSHIPPERPAIR] ([ID], EE_TRANS_ID, t1.[DESCRIPTION], t1.[EIC], t1.[KEY], t1.[NAME], t1.[SETUPFK], t1.[TSO1], t1.[TSO2], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[DESCRIPTION], inserted.[EIC], inserted.[KEY], inserted.[NAME], inserted.[SETUPFK], inserted.[TSO1], inserted.[TSO2], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[RPS_VDTSHIPPERPAIR_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[DESCRIPTION], t1.[EIC], t1.[KEY], t1.[NAME], t1.[SETUPFK], t1.[TSO1], t1.[TSO2], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[DESCRIPTION], inserted.[EIC], inserted.[KEY], inserted.[NAME], inserted.[SETUPFK], inserted.[TSO1], inserted.[TSO2], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTSHIPPERPAIR_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTSHIPPERPAIR_U]'
END

GO

CREATE TRIGGER dbo.[RPS_VDTSHIPPERPAIR_U] ON dbo.[RPS_VDTSHIPPERPAIR] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[RPS_VDTSHIPPERPAIR] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[RPS_VDTSHIPPERPAIR] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[RPS_VDTSHIPPERPAIR_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[DESCRIPTION], t1.[EIC], t1.[KEY], t1.[NAME], t1.[SETUPFK], t1.[TSO1], t1.[TSO2], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[DESCRIPTION], inserted.[EIC], inserted.[KEY], inserted.[NAME], inserted.[SETUPFK], inserted.[TSO1], inserted.[TSO2], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTSHIPPERPAIR_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTSHIPPERPAIR_D]'
END

GO

CREATE TRIGGER dbo.[RPS_VDTSHIPPERPAIR_D] ON dbo.[RPS_VDTSHIPPERPAIR] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[RPS_VDTSHIPPERPAIR_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTSHIPPERPAIR_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[RPS_VDTSHIPPERPAIR_H] AS SELECT * FROM dbo.[RPS_VDTSHIPPERPAIR]'
END

GO

ALTER VIEW dbo.[RPS_VDTSHIPPERPAIR_H] AS
WITH cn AS (SELECT * FROM dbo.[RPS_VDTSHIPPERPAIR_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[DESCRIPTION], t1.[EIC], t1.[KEY], t1.[NAME], t1.[SETUPFK], t1.[TSO1], t1.[TSO2], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO

IF OBJECT_ID(N'dbo.RPS_VDTTRADECAPTURE_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTTRADECAPTURE_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[RPS_VDTTRADECAPTURE_I] ON dbo.[RPS_VDTTRADECAPTURE] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[RPS_VDTTRADECAPTURE] ([ID], EE_TRANS_ID, t1.[CLORDRID], t1.[CONTRACTFK], t1.[DIRECTION], t1.[DLVRYAREAID], t1.[EXECTIME], t1.[ORDRID], t1.[PRICE], t1.[PRTCID], t1.[QUANTITY], t1.[TRADEID], t1.[TXT], t1.[USRCODE], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[CLORDRID], inserted.[CONTRACTFK], inserted.[DIRECTION], inserted.[DLVRYAREAID], inserted.[EXECTIME], inserted.[ORDRID], inserted.[PRICE], inserted.[PRTCID], inserted.[QUANTITY], inserted.[TRADEID], inserted.[TXT], inserted.[USRCODE], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[RPS_VDTTRADECAPTURE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[CLORDRID], t1.[CONTRACTFK], t1.[DIRECTION], t1.[DLVRYAREAID], t1.[EXECTIME], t1.[ORDRID], t1.[PRICE], t1.[PRTCID], t1.[QUANTITY], t1.[TRADEID], t1.[TXT], t1.[USRCODE], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[CLORDRID], inserted.[CONTRACTFK], inserted.[DIRECTION], inserted.[DLVRYAREAID], inserted.[EXECTIME], inserted.[ORDRID], inserted.[PRICE], inserted.[PRTCID], inserted.[QUANTITY], inserted.[TRADEID], inserted.[TXT], inserted.[USRCODE], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTTRADECAPTURE_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTTRADECAPTURE_U]'
END

GO

CREATE TRIGGER dbo.[RPS_VDTTRADECAPTURE_U] ON dbo.[RPS_VDTTRADECAPTURE] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[RPS_VDTTRADECAPTURE] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[RPS_VDTTRADECAPTURE] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[RPS_VDTTRADECAPTURE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[CLORDRID], t1.[CONTRACTFK], t1.[DIRECTION], t1.[DLVRYAREAID], t1.[EXECTIME], t1.[ORDRID], t1.[PRICE], t1.[PRTCID], t1.[QUANTITY], t1.[TRADEID], t1.[TXT], t1.[USRCODE], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[CLORDRID], inserted.[CONTRACTFK], inserted.[DIRECTION], inserted.[DLVRYAREAID], inserted.[EXECTIME], inserted.[ORDRID], inserted.[PRICE], inserted.[PRTCID], inserted.[QUANTITY], inserted.[TRADEID], inserted.[TXT], inserted.[USRCODE], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTTRADECAPTURE_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[RPS_VDTTRADECAPTURE_D]'
END

GO

CREATE TRIGGER dbo.[RPS_VDTTRADECAPTURE_D] ON dbo.[RPS_VDTTRADECAPTURE] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[RPS_VDTTRADECAPTURE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.RPS_VDTTRADECAPTURE_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[RPS_VDTTRADECAPTURE_H] AS SELECT * FROM dbo.[RPS_VDTTRADECAPTURE]'
END

GO

ALTER VIEW dbo.[RPS_VDTTRADECAPTURE_H] AS
WITH cn AS (SELECT * FROM dbo.[RPS_VDTTRADECAPTURE_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[CLORDRID], t1.[CONTRACTFK], t1.[DIRECTION], t1.[DLVRYAREAID], t1.[EXECTIME], t1.[ORDRID], t1.[PRICE], t1.[PRTCID], t1.[QUANTITY], t1.[TRADEID], t1.[TXT], t1.[USRCODE], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO
-- 3: závislé objekty (lokalizace)
GO

IF OBJECT_ID(N'dbo.RPS_VDTACTIONTYPE') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[RPS_VDTACTIONTYPE] AS SELECT * FROM dbo.[RPS_VDTACTIONTYPE_LR0]'
END

GO

ALTER VIEW dbo.[RPS_VDTACTIONTYPE] AS
SELECT t0.[ID] [ID], t0.EE_TRANS_ID EE_TRANS_ID, CASE WHEN t1.[CAPTION_SYS_L_EXISTS] = 1 THEN t1.[CAPTION] ELSE t0.[CAPTION] END AS [CAPTION], CASE WHEN t1.[DESCRIPTION_SYS_L_EXISTS] = 1 THEN t1.[DESCRIPTION] ELSE t0.[DESCRIPTION] END AS [DESCRIPTION], t0.[ACTIVE] [ACTIVE], t0.[KEY] [KEY], t0.[SYS_VER] [SYS_VER]
FROM dbo.[RPS_VDTACTIONTYPE_LR0] t0 LEFT OUTER JOIN (SELECT * FROM dbo.[RPS_VDTACTIONTYPE_LR1] WHERE [SYS_L_LOCALE] = dbo.ee_get_current_locale()) t1 ON t0.[ID] = t1.[SYS_L_ID]
/
GO

IF OBJECT_ID(N'dbo.RPS_VDTACTIONTYPE_C') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[RPS_VDTACTIONTYPE_C] AS SELECT * FROM dbo.[RPS_VDTACTIONTYPE_LR0_C]'
END

GO

ALTER VIEW dbo.[RPS_VDTACTIONTYPE_C] AS
WITH items AS
    (SELECT item_id, trans_id, MAX(c0.ee_change_id) lr0_id, MAX(c1.ee_change_id) lr1_id
      FROM ((SELECT ee_item_id item_id, ee_trans_id trans_id FROM dbo.[RPS_VDTACTIONTYPE_LR0_C]) UNION (SELECT sys_l_id item_id, ee_trans_id trans_id FROM dbo.[RPS_VDTACTIONTYPE_LR1_C] WHERE sys_l_locale = dbo.ee_get_current_locale())) sq
      LEFT OUTER JOIN dbo.[RPS_VDTACTIONTYPE_LR0_C] c0 
      ON sq.item_id = c0.ee_item_id AND sq.trans_id >= c0.ee_trans_id
      LEFT OUTER JOIN dbo.[RPS_VDTACTIONTYPE_LR1_C] c1 
      ON sq.item_id = c1.sys_l_id AND sq.trans_id >= c1.ee_trans_id
      GROUP BY item_id, trans_id)
SELECT t0.ee_item_id ee_item_id, ISNULL(t0.ee_change_type, t1.ee_change_type) ee_change_type, ISNULL(t0.ee_change_id, t1.ee_change_id) ee_change_id, CASE WHEN t1.EE_TRANS_ID > t0.EE_TRANS_ID THEN t1.EE_TRANS_ID ELSE t0.EE_TRANS_ID END EE_TRANS_ID, CASE WHEN t1.[CAPTION_SYS_L_EXISTS] = 1 THEN t1.[CAPTION] ELSE t0.[CAPTION] END AS [CAPTION], CASE WHEN t1.[DESCRIPTION_SYS_L_EXISTS] = 1 THEN t1.[DESCRIPTION] ELSE t0.[DESCRIPTION] END AS [DESCRIPTION], t0.[ACTIVE] [ACTIVE], t0.[KEY] [KEY], t0.[SYS_VER] [SYS_VER]
FROM items 
LEFT OUTER JOIN dbo.[RPS_VDTACTIONTYPE_LR0_C] t0 ON items.lr0_id = t0.ee_change_id
LEFT OUTER JOIN dbo.[RPS_VDTACTIONTYPE_LR1_C] t1 ON items.lr1_id = t1.ee_change_id
/
GO

IF OBJECT_ID(N'dbo.RPS_VDTACTIONTYPE_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[RPS_VDTACTIONTYPE_H] AS SELECT * FROM dbo.[RPS_VDTACTIONTYPE_LR0_H]'
END

GO

ALTER VIEW dbo.[RPS_VDTACTIONTYPE_H] AS
SELECT t0.[ID] [ID], t0.EE_TRANS_ID EE_TRANS_ID, CASE WHEN t1.[CAPTION_SYS_L_EXISTS] = 1 THEN t1.[CAPTION] ELSE t0.[CAPTION] END AS [CAPTION], CASE WHEN t1.[DESCRIPTION_SYS_L_EXISTS] = 1 THEN t1.[DESCRIPTION] ELSE t0.[DESCRIPTION] END AS [DESCRIPTION], t0.[ACTIVE] [ACTIVE], t0.[KEY] [KEY], t0.[SYS_VER] [SYS_VER]
FROM dbo.[RPS_VDTACTIONTYPE_LR0_H] t0 LEFT OUTER JOIN (SELECT * FROM dbo.[RPS_VDTACTIONTYPE_LR1_H] WHERE SYS_L_LOCALE = dbo.ee_get_current_locale()) t1 ON t0.[ID] = t1.SYS_L_ID
/
GO

IF OBJECT_ID(N'dbo.RPS_VDTDIRECTION') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[RPS_VDTDIRECTION] AS SELECT * FROM dbo.[RPS_VDTDIRECTION_LR0]'
END

GO

ALTER VIEW dbo.[RPS_VDTDIRECTION] AS
SELECT t0.[ID] [ID], t0.EE_TRANS_ID EE_TRANS_ID, CASE WHEN t1.[CAPTION_SYS_L_EXISTS] = 1 THEN t1.[CAPTION] ELSE t0.[CAPTION] END AS [CAPTION], CASE WHEN t1.[DESCRIPTION_SYS_L_EXISTS] = 1 THEN t1.[DESCRIPTION] ELSE t0.[DESCRIPTION] END AS [DESCRIPTION], t0.[ACTIVE] [ACTIVE], t0.[KEY] [KEY], t0.[SYS_VER] [SYS_VER]
FROM dbo.[RPS_VDTDIRECTION_LR0] t0 LEFT OUTER JOIN (SELECT * FROM dbo.[RPS_VDTDIRECTION_LR1] WHERE [SYS_L_LOCALE] = dbo.ee_get_current_locale()) t1 ON t0.[ID] = t1.[SYS_L_ID]
/
GO

IF OBJECT_ID(N'dbo.RPS_VDTDIRECTION_C') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[RPS_VDTDIRECTION_C] AS SELECT * FROM dbo.[RPS_VDTDIRECTION_LR0_C]'
END

GO

ALTER VIEW dbo.[RPS_VDTDIRECTION_C] AS
WITH items AS
    (SELECT item_id, trans_id, MAX(c0.ee_change_id) lr0_id, MAX(c1.ee_change_id) lr1_id
      FROM ((SELECT ee_item_id item_id, ee_trans_id trans_id FROM dbo.[RPS_VDTDIRECTION_LR0_C]) UNION (SELECT sys_l_id item_id, ee_trans_id trans_id FROM dbo.[RPS_VDTDIRECTION_LR1_C] WHERE sys_l_locale = dbo.ee_get_current_locale())) sq
      LEFT OUTER JOIN dbo.[RPS_VDTDIRECTION_LR0_C] c0 
      ON sq.item_id = c0.ee_item_id AND sq.trans_id >= c0.ee_trans_id
      LEFT OUTER JOIN dbo.[RPS_VDTDIRECTION_LR1_C] c1 
      ON sq.item_id = c1.sys_l_id AND sq.trans_id >= c1.ee_trans_id
      GROUP BY item_id, trans_id)
SELECT t0.ee_item_id ee_item_id, ISNULL(t0.ee_change_type, t1.ee_change_type) ee_change_type, ISNULL(t0.ee_change_id, t1.ee_change_id) ee_change_id, CASE WHEN t1.EE_TRANS_ID > t0.EE_TRANS_ID THEN t1.EE_TRANS_ID ELSE t0.EE_TRANS_ID END EE_TRANS_ID, CASE WHEN t1.[CAPTION_SYS_L_EXISTS] = 1 THEN t1.[CAPTION] ELSE t0.[CAPTION] END AS [CAPTION], CASE WHEN t1.[DESCRIPTION_SYS_L_EXISTS] = 1 THEN t1.[DESCRIPTION] ELSE t0.[DESCRIPTION] END AS [DESCRIPTION], t0.[ACTIVE] [ACTIVE], t0.[KEY] [KEY], t0.[SYS_VER] [SYS_VER]
FROM items 
LEFT OUTER JOIN dbo.[RPS_VDTDIRECTION_LR0_C] t0 ON items.lr0_id = t0.ee_change_id
LEFT OUTER JOIN dbo.[RPS_VDTDIRECTION_LR1_C] t1 ON items.lr1_id = t1.ee_change_id
/
GO

IF OBJECT_ID(N'dbo.RPS_VDTDIRECTION_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[RPS_VDTDIRECTION_H] AS SELECT * FROM dbo.[RPS_VDTDIRECTION_LR0_H]'
END

GO

ALTER VIEW dbo.[RPS_VDTDIRECTION_H] AS
SELECT t0.[ID] [ID], t0.EE_TRANS_ID EE_TRANS_ID, CASE WHEN t1.[CAPTION_SYS_L_EXISTS] = 1 THEN t1.[CAPTION] ELSE t0.[CAPTION] END AS [CAPTION], CASE WHEN t1.[DESCRIPTION_SYS_L_EXISTS] = 1 THEN t1.[DESCRIPTION] ELSE t0.[DESCRIPTION] END AS [DESCRIPTION], t0.[ACTIVE] [ACTIVE], t0.[KEY] [KEY], t0.[SYS_VER] [SYS_VER]
FROM dbo.[RPS_VDTDIRECTION_LR0_H] t0 LEFT OUTER JOIN (SELECT * FROM dbo.[RPS_VDTDIRECTION_LR1_H] WHERE SYS_L_LOCALE = dbo.ee_get_current_locale()) t1 ON t0.[ID] = t1.SYS_L_ID
/
GO
-- 4: číselníky
GO
INSERT INTO dbo.[EDA_TMESSAGETYPE] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [DESCRIPTION], [KEY]) VALUES ('23021', 1, '1', 'NtfReq', 'NtfReq', 'NTFREQ')
GO
INSERT INTO dbo.[EDA_TMESSAGETYPE] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [DESCRIPTION], [KEY]) VALUES ('23022', 1, '1', 'NtfRprt', 'NtfRprt', 'NTFRPRT')
GO
INSERT INTO dbo.[EDA_TMESSAGETYPE] ([ID], [SYS_VER], [ACTIVE], [CAPTION], [DESCRIPTION], [KEY]) VALUES ('23023', 1, '1', 'Nomint', 'Nomint', 'NOMINT')
GO
INSERT INTO dbo.[RPS_VDTMAILTEMPLATE] ([ID], [SYS_VER], [SETUPFK], [NAME]) VALUES ('51', 1, '1', 'NtfStartManual')
GO
INSERT INTO dbo.[RPS_VDTMAILTEMPLATE] ([ID], [SYS_VER], [SETUPFK], [NAME]) VALUES ('52', 1, '1', 'NtfStartAuto')
GO
INSERT INTO dbo.[RPS_VDTMAILTEMPLATE] ([ID], [SYS_VER], [SETUPFK], [NAME]) VALUES ('53', 1, '1', 'NtfStartUnable')
GO
UPDATE dbo.[RPS_VDTBALACTREASONCODES] SET [ISPREPAREREASON] = '1', [ISCANCELREASON] = '0', [NAME] = '01 - Nevyrovnaná bilance přepravní soustavy. Dorovnání konta provozovatele podle § 92. Pokračující trend stejným směrem by ohrozil bezpečný a spolehlivý provoz soustavy.' WHERE [ID] = '1'
GO
UPDATE dbo.[RPS_VDTBALACTREASONCODES] SET [ISPREPAREREASON] = '1', [ISCANCELREASON] = '0', [NAME] = '02 - Předpokládaná nevyrovnaná bilance přepravní soustavy. Dorovnání předpokládaného konta provozovatele podle § 92. Pokračující trend stejným směrem by ohrozil bezpečný a spolehlivý provoz soustavy.' WHERE [ID] = '2'
GO
UPDATE dbo.[RPS_VDTBALACTREASONCODES] SET [ISPREPAREREASON] = '1', [ISCANCELREASON] = '0', [NAME] = '03 - Nízká hladina provozní náplně přepravní soustavy. Ohrožen bezpečný a spolehlivý provoz nedodržením kontrahovaných předávacích tlaků a nedodáním množství nominovaného na přepravu.' WHERE [ID] = '3'
GO
UPDATE dbo.[RPS_VDTBALACTREASONCODES] SET [ISPREPAREREASON] = '1', [ISCANCELREASON] = '0', [NAME] = '04 - Vysoká hladina provozní náplně přepravní soustavy. Ohrožen bezpečný a spolehlivý provoz nedodržením kontrahovaných předávacích tlaků a nepřevzetím množství nominovaného na přepravu.' WHERE [ID] = '4'
GO
UPDATE dbo.[RPS_VDTBALACTREASONCODES] SET [ISPREPAREREASON] = '1', [ISCANCELREASON] = '0', [NAME] = '05 - Udržování optimální hladiny akumulace z důvodu zajištění bezpečného, spolehlivého a hospodárného provozu přepravní soustavy.' WHERE [ID] = '5'
GO
UPDATE dbo.[RPS_VDTBALACTREASONCODES] SET [ISPREPAREREASON] = '1', [ISCANCELREASON] = '0', [NAME] = '06 - Požadavek byl zobchodován na vnitrodenním trhu OTE, ale požadované množství nebylo fyzicky odebráno/dodáno z/do přepravní soustavy.' WHERE [ID] = '6'
GO
UPDATE dbo.[RPS_VDTBALACTREASONCODES] SET [ISPREPAREREASON] = '1', [ISCANCELREASON] = '0', [NAME] = '07 - Požadované množství nebylo zobchodováno na vnitrodenním trhu OTE. Bylo dosaženo maximální / minimální poptávkové ceny. ' WHERE [ID] = '7'
GO
UPDATE dbo.[RPS_VDTBALACTREASONCODES] SET [ISPREPAREREASON] = '1', [ISCANCELREASON] = '0', [NAME] = '08 - Požadované množství nebylo zobchodováno na vnitrodenním trhu OTE z technických důvodů.' WHERE [ID] = '8'
GO
INSERT INTO dbo.[RPS_VDTBALACTREASONCODES] ([ID], [SYS_VER], [ISPREPAREREASON], [ISCANCELREASON], [NAME]) VALUES ('9', 1, '1', '0', '09 - Obchod podle PTP Příloha č. 8 bodu 9 nebo 10')
GO
INSERT INTO dbo.[RPS_VDTBALACTREASONCODES] ([ID], [SYS_VER], [ISPREPAREREASON], [ISCANCELREASON], [NAME]) VALUES ('51', 1, '0', '1', '51 - Technická závada v procesu realizace vyrovnávací akce')
GO
INSERT INTO dbo.[RPS_VDTBALACTREASONCODES] ([ID], [SYS_VER], [ISPREPAREREASON], [ISCANCELREASON], [NAME]) VALUES ('52', 1, '0', '1', '52 - Změna provozních podmínek v přepravní soustavě.')
GO
INSERT INTO dbo.[RPS_VDTBALACTREASONCODES] ([ID], [SYS_VER], [ISPREPAREREASON], [ISCANCELREASON], [NAME]) VALUES ('53', 1, '0', '1', '53 - Změna bilanční rovnováhy odběrů a dodávek')
GO
INSERT INTO dbo.[RPS_VDTBALACTREASONCODES] ([ID], [SYS_VER], [ISPREPAREREASON], [ISCANCELREASON], [NAME]) VALUES ('54', 1, '0', '1', '54 - Požadavek na realizaci vyrovnávací akce na trhu OTE nebyl uspokojen do 150 minut.')
GO
UPDATE dbo.[RPS_VDTBALACTREASONCODES] SET [ISPREPAREREASON] = '1', [ISCANCELREASON] = '1', [NAME] = '99 - Ostatní' WHERE [ID] = '99'
GO
INSERT INTO dbo.[RPS_VDTDIRECTION_LR0] ([ID], [SYS_VER], [ACTIVE], [KEY], [CAPTION]) VALUES ('100', 1, '1', 'Buy', 'Buy')
GO
INSERT INTO dbo.[RPS_VDTDIRECTION_LR0] ([ID], [SYS_VER], [ACTIVE], [KEY], [CAPTION]) VALUES ('200', 1, '1', 'Sell', 'Sell')
GO
INSERT INTO dbo.[RPS_VDTACTIONTYPE_LR0] ([ID], [SYS_VER], [ACTIVE], [KEY], [CAPTION]) VALUES ('100', 1, '1', 'OTEVDT', 'OTE VDT')
GO
INSERT INTO dbo.[RPS_VDTACTIONTYPE_LR0] ([ID], [SYS_VER], [ACTIVE], [KEY], [CAPTION]) VALUES ('120', 1, '1', 'OTEVDT-P9', 'OTE VDT (regarding GMR Section 9 Annex 8)')
GO
INSERT INTO dbo.[RPS_VDTACTIONTYPE_LR0] ([ID], [SYS_VER], [ACTIVE], [KEY], [CAPTION]) VALUES ('125', 1, '1', 'OTEVDT-P10', 'OTE VDT (regarding GMR Section 10 Annex 8)')
GO
INSERT INTO dbo.[RPS_VDTACTIONTYPE_LR0] ([ID], [SYS_VER], [ACTIVE], [KEY], [CAPTION]) VALUES ('200', 1, '1', 'XBIL', 'Buy/Sell at other market (bil. contract)')
GO
INSERT INTO dbo.[RPS_VDTSHIPPERPAIR] ([ID], [SYS_VER], [SETUPFK], [KEY], [NAME], [DESCRIPTION]) VALUES ('1', 1, '1', 'BVAexit', 'BVA - exit', 'Nákup plynu formou vyrovnávací akce')
GO
INSERT INTO dbo.[RPS_VDTSHIPPERPAIR] ([ID], [SYS_VER], [SETUPFK], [KEY], [NAME], [DESCRIPTION]) VALUES ('2', 1, '1', 'BVAentry', 'BVA - entry', 'Prodej plynu formou vyrovnávací akce')
GO
INSERT INTO dbo.[RPS_VDTSHIPPERPAIR] ([ID], [SYS_VER], [SETUPFK], [KEY], [NAME], [DESCRIPTION]) VALUES ('3', 1, '1', 'VTBexit', 'VTB – exit', 'Nákup plynu zákazníka NET4GAS, který není součástí žádné vyrovnávací akce')
GO
INSERT INTO dbo.[RPS_VDTSHIPPERPAIR] ([ID], [SYS_VER], [SETUPFK], [KEY], [NAME], [DESCRIPTION]) VALUES ('4', 1, '1', 'VVBentry', 'VVB – entry', 'Prodej plynu zákazníka NET4GAS, který není součástí žádné vyrovnávací akce')
GO

-- uložíme informace o transakci, v jejímž rámci se příp. měnila data
BEGIN
	declare @transId bigint
	declare @commitId bigint
	exec dbo.ENIF_LOG_COMMIT 'system', 1, NULL, NULL, @commit_id_p = @commitId OUTPUT
	exec @transId = dbo.GetExistingTransactionId
	exec dbo.ee_log_transaction @transId, 'system', NULL, 'c', @commitId
END
GO


BEGIN
	declare @transId bigint
	exec dbo.ee_init_transaction @trans_id = @transId
END

GO
-- 1: tabulky
GO
-- 2: triggery a pohledy
GO
-- 3: závislé objekty (lokalizace)
GO
-- 4: číselníky
GO

-- uložíme informace o transakci, v jejímž rámci se příp. měnila data
BEGIN
	declare @transId bigint
	declare @commitId bigint
	exec dbo.ENIF_LOG_COMMIT 'system', 1, NULL, NULL, @commit_id_p = @commitId OUTPUT
	exec @transId = dbo.GetExistingTransactionId
	exec dbo.ee_log_transaction @transId, 'system', NULL, 'c', @commitId
END
GO


BEGIN
	declare @transId bigint
	exec dbo.ee_init_transaction @trans_id = @transId
END

GO
-- 1: tabulky
GO
ALTER TABLE dbo.[VIP_VIPEDGE] DROP COLUMN [EDGEID]
GO
ALTER TABLE dbo.[VIP_VIPEDGE_c] DROP COLUMN [EDGEID]
GO
ALTER TABLE dbo.[VIP_VIPEDGE] DROP COLUMN [EDGETYPE]
GO
ALTER TABLE dbo.[VIP_VIPEDGE_c] DROP COLUMN [EDGETYPE]
GO
-- 2: triggery a pohledy
GO

IF OBJECT_ID(N'dbo.VIP_VIPEDGE_I') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[VIP_VIPEDGE_I]'
END

GO

-- Používá se instead of trigger, aby bylo možné změnit INSERTED řádek. Insert v tomto triggeru nezpůsobí zacyklení.
CREATE TRIGGER dbo.[VIP_VIPEDGE_I] ON dbo.[VIP_VIPEDGE] INSTEAD OF INSERT AS
BEGIN
	-- Jinak NHibernate vyhazuje výjimku, že počet updatovaných řádků není správný.
	SET NOCOUNT ON
							
	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()
							
	INSERT INTO dbo.[VIP_VIPEDGE] ([ID], EE_TRANS_ID, t1.[LOCATION], t1.[NAME], t1.[TSDATAID], t1.[TYPE], t1.[VIPGCPFK], t1.[SYS_VER])
	SELECT inserted.[ID], @transId, inserted.[LOCATION], inserted.[NAME], inserted.[TSDATAID], inserted.[TYPE], inserted.[VIPGCPFK], inserted.[SYS_VER]
	FROM inserted
							
	INSERT INTO dbo.[VIP_VIPEDGE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[LOCATION], t1.[NAME], t1.[TSDATAID], t1.[TYPE], t1.[VIPGCPFK], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[LOCATION], inserted.[NAME], inserted.[TSDATAID], inserted.[TYPE], inserted.[VIPGCPFK], inserted.[SYS_VER]
	FROM inserted
							
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.VIP_VIPEDGE_U') IS NOT NULL
BEGIN
	EXEC sp_executesql N'DROP TRIGGER dbo.[VIP_VIPEDGE_U]'
END

GO

CREATE TRIGGER dbo.[VIP_VIPEDGE_U] ON dbo.[VIP_VIPEDGE] AFTER UPDATE AS
BEGIN
	SET NOCOUNT ON

	DECLARE @transId bigint
	SET @transId = dbo.GetExistingTransactionId()

	UPDATE dbo.[VIP_VIPEDGE] SET EE_TRANS_ID = @transId
	FROM inserted AS I JOIN dbo.[VIP_VIPEDGE] AS U ON U.[ID] = I.[ID]

	INSERT INTO dbo.[VIP_VIPEDGE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID], t1.[LOCATION], t1.[NAME], t1.[TSDATAID], t1.[TYPE], t1.[VIPGCPFK], t1.[SYS_VER])
	SELECT inserted.[ID], 'u', @transId, inserted.[LOCATION], inserted.[NAME], inserted.[TSDATAID], inserted.[TYPE], inserted.[VIPGCPFK], inserted.[SYS_VER]
	FROM inserted

	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.VIP_VIPEDGE_D') IS NOT NULL
BEGIN
  EXEC sp_executesql N'DROP TRIGGER dbo.[VIP_VIPEDGE_D]'
END

GO

CREATE TRIGGER dbo.[VIP_VIPEDGE_D] ON dbo.[VIP_VIPEDGE] AFTER DELETE AS
BEGIN
	SET NOCOUNT ON
	INSERT INTO dbo.[VIP_VIPEDGE_C] ([EE_ITEM_ID], [EE_CHANGE_TYPE], [EE_TRANS_ID])
	SELECT deleted.[ID], 'd', dbo.GetExistingTransactionId()
	FROM deleted
	SET NOCOUNT OFF
END

GO

IF OBJECT_ID(N'dbo.VIP_VIPEDGE_H') IS NULL
BEGIN
  EXEC sp_executesql N'CREATE VIEW dbo.[VIP_VIPEDGE_H] AS SELECT * FROM dbo.[VIP_VIPEDGE]'
END

GO

ALTER VIEW dbo.[VIP_VIPEDGE_H] AS
WITH cn AS (SELECT * FROM dbo.[VIP_VIPEDGE_C] INNER JOIN dbo.EE_VISIBLE_TRANSACTIONS v ON EE_TRANS_ID = v.id)
SELECT t1.[EE_ITEM_ID] [ID], t1.EE_TRANS_ID EE_TRANS_ID, t1.[LOCATION], t1.[NAME], t1.[TSDATAID], t1.[TYPE], t1.[VIPGCPFK], t1.[SYS_VER]
FROM cn t1 LEFT OUTER JOIN cn t2 ON (t1.[EE_ITEM_ID] =  t2.[EE_ITEM_ID]) AND ((t1.COMMIT_ID < t2.COMMIT_ID) OR (t1.COMMIT_ID = t2.COMMIT_ID AND t1.[EE_CHANGE_ID] < t2.[EE_CHANGE_ID]))
WHERE t2.[EE_ITEM_ID] IS NULL and t1.EE_CHANGE_TYPE <> 'd'

GO
-- 3: závislé objekty (lokalizace)
GO
-- 4: číselníky
GO
UPDATE dbo.[VIP_VIPGCP] SET [VIPFK] = '1', [DIRECTION] = '100', [LOCATION] = '21Z000000000092O', [NAME] = 'Olbernhau - Entry', [MANAGEDBYADJTSO] = '0' WHERE [ID] = '2'
GO
UPDATE dbo.[VIP_VIPGCP] SET [VIPFK] = '1', [DIRECTION] = '100', [LOCATION] = '21Z000000000242V', [NAME] = 'Brandov Opal - Entry', [MANAGEDBYADJTSO] = '0' WHERE [ID] = '3'
GO
UPDATE dbo.[VIP_VIPGCP] SET [VIPFK] = '1', [DIRECTION] = '200', [LOCATION] = 'TODO7', [NAME] = 'Brandov Opal - Exit', [MANAGEDBYADJTSO] = '0' WHERE [ID] = '7'
GO
UPDATE dbo.[VIP_VIPGCP] SET [VIPFK] = '1', [DIRECTION] = '200', [LOCATION] = '21Z000000000091Q', [NAME] = 'Brandov Stegal - Exit', [MANAGEDBYADJTSO] = '0' WHERE [ID] = '8'
GO
INSERT INTO dbo.[VIP_VIPEDGE] ([ID], [SYS_VER], [LOCATION], [NAME], [TYPE], [VIPGCPFK]) VALUES ('9', 1, '21Z000000000091Q-09', 'Firm', '100', '8')
GO
INSERT INTO dbo.[VIP_VIPEDGE] ([ID], [SYS_VER], [LOCATION], [NAME], [TYPE], [VIPGCPFK]) VALUES ('55', 1, '21Z000000000091Q-55', 'Interruptible', '200', '8')
GO
UPDATE dbo.[VIP_VIPEDGE] SET [LOCATION] = 'REST1-90', [NAME] = 'Z-Edge Firm Exit', [TYPE] = '400', [VIPGCPFK] = NULL, [TSDATAID] = '1|VIP.ZEdgeRemainingFlowFirmExitHourlyKWHTS|REMIT:VIP' WHERE [ID] = '90'
GO
UPDATE dbo.[VIP_VIPEDGE] SET [LOCATION] = 'REST1-91', [NAME] = 'Z-Edge Firm Entry', [TYPE] = '400', [VIPGCPFK] = NULL, [TSDATAID] = '1|VIP.ZEdgeRemainingFlowFirmEntryHourlyKWHTS|REMIT:VIP' WHERE [ID] = '91'
GO
UPDATE dbo.[VIP_VIPEDGE] SET [LOCATION] = 'REST2-92', [NAME] = 'Z-Edge Interruptible Entry', [TYPE] = '400', [VIPGCPFK] = NULL, [TSDATAID] = '1|VIP.ZEdgeRemainingFlowInterruptibleEntryHourlyKWHTS|REMIT:VIP' WHERE [ID] = '92'
GO
UPDATE dbo.[VIP_VIPEDGE] SET [LOCATION] = 'REST2-93', [NAME] = 'Z-Edge Interruptible Exit', [TYPE] = '400', [VIPGCPFK] = NULL, [TSDATAID] = '1|VIP.ZEdgeRemainingFlowInterruptibleExitHourlyKWHTS|REMIT:VIP' WHERE [ID] = '93'
GO

-- uložíme informace o transakci, v jejímž rámci se příp. měnila data
BEGIN
	declare @transId bigint
	declare @commitId bigint
	exec dbo.ENIF_LOG_COMMIT 'system', 1, NULL, NULL, @commit_id_p = @commitId OUTPUT
	exec @transId = dbo.GetExistingTransactionId
	exec dbo.ee_log_transaction @transId, 'system', NULL, 'c', @commitId
END
GO

