
SET DEFINE OFF;
/


-- takto umožníme nastavování sloupců typu date a number
ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD HH24:MI:SS';
ALTER SESSION SET NLS_NUMERIC_CHARACTERS = '. ';
/
-- 1: tabulky;
ALTER TABLE "PMM_PDTCATEGORY" DROP CONSTRAINT "UQ_PMM_PEGORY_CAPTION_5CC2437";
ALTER TABLE "PMM_PDTACE" ADD ("VALIDFROM2" DATE);
ALTER TABLE "PMM_PDTACE_C" ADD ("VALIDFROM2" DATE);
ALTER TABLE "PMM_PDTACE" ADD ("VALIDTO2" DATE);
ALTER TABLE "PMM_PDTACE_C" ADD ("VALIDTO2" DATE);
ALTER TABLE "PMM_DISTRIBUTION" ADD CONSTRAINT "UQ_PMM_DUTION_KEY_648727C" UNIQUE ( "KEY" );

CREATE TABLE "PMM_TARIFF" (
	"ID" NUMBER(20, 0) PRIMARY KEY, EE_TRANS_ID NUMBER(19, 0) , "ACTIVE" NUMBER(1, 0), "CAPTION" VARCHAR2(150 Char), "DESCRIPTION" VARCHAR2(400 Char), "KEY" VARCHAR2(30 Char), "TARIFFINDEX" NUMBER(5, 0), "TARIFFSETFK" NUMBER(20, 0), "WITHDIAGRAM" NUMBER(1, 0), "SYS_VER" NUMBER(9, 0)
);

CREATE TABLE "PMM_TARIFF_C" (
EE_CHANGE_ID   NUMBER(19,0) PRIMARY KEY,
EE_CHANGE_TYPE CHAR(1),
"EE_ITEM_ID" NUMBER(20, 0),
EE_TRANS_ID NUMBER(19,0) , "ACTIVE" NUMBER(1, 0), "CAPTION" VARCHAR2(150 Char), "DESCRIPTION" VARCHAR2(400 Char), "KEY" VARCHAR2(30 Char), "TARIFFINDEX" NUMBER(5, 0), "TARIFFSETFK" NUMBER(20, 0), "WITHDIAGRAM" NUMBER(1, 0), "SYS_VER" NUMBER(9, 0)
);
CREATE SEQUENCE "PMM_TARIFF_P" START WITH 1000000;
CREATE SEQUENCE "PMM_TARIFF_S";
ALTER TABLE "PMM_TARIFF" MODIFY "WITHDIAGRAM" NOT NULL;
ALTER TABLE "PMM_TARIFF" MODIFY "SYS_VER" DEFAULT '1';
UPDATE "PMM_TARIFF" SET "SYS_VER" = '1' WHERE "SYS_VER" IS NULL;
ALTER TABLE "PMM_TARIFF" MODIFY "SYS_VER" NOT NULL;

CREATE TABLE "PMM_TARIFFSET" (
	"ID" NUMBER(20, 0) PRIMARY KEY, EE_TRANS_ID NUMBER(19, 0) , "ACTIVE" NUMBER(1, 0), "CAPTION" VARCHAR2(150 Char), "COMMODITYFK" NUMBER(20, 0), "COMMODITYLEVELGROUPFK" NUMBER(20, 0), "DESCRIPTION" VARCHAR2(400 Char), "EXTERNALID1" VARCHAR2(50 Char), "EXTERNALID2" VARCHAR2(50 Char), "EXTERNALID3" VARCHAR2(50 Char), "KEY" VARCHAR2(30 Char), "STATEFK" NUMBER(20, 0), "TARIFFCOUNT" NUMBER(9, 0), "TARIFFSETTYPEFK" NUMBER(20, 0), "VALIDFROM" DATE, "VALIDTO" DATE, "WITHDIAGRAM" NUMBER(1, 0), "SYS_VER" NUMBER(9, 0)
);

CREATE TABLE "PMM_TARIFFSET_C" (
EE_CHANGE_ID   NUMBER(19,0) PRIMARY KEY,
EE_CHANGE_TYPE CHAR(1),
"EE_ITEM_ID" NUMBER(20, 0),
EE_TRANS_ID NUMBER(19,0) , "ACTIVE" NUMBER(1, 0), "CAPTION" VARCHAR2(150 Char), "COMMODITYFK" NUMBER(20, 0), "COMMODITYLEVELGROUPFK" NUMBER(20, 0), "DESCRIPTION" VARCHAR2(400 Char), "EXTERNALID1" VARCHAR2(50 Char), "EXTERNALID2" VARCHAR2(50 Char), "EXTERNALID3" VARCHAR2(50 Char), "KEY" VARCHAR2(30 Char), "STATEFK" NUMBER(20, 0), "TARIFFCOUNT" NUMBER(9, 0), "TARIFFSETTYPEFK" NUMBER(20, 0), "VALIDFROM" DATE, "VALIDTO" DATE, "WITHDIAGRAM" NUMBER(1, 0), "SYS_VER" NUMBER(9, 0)
);
CREATE SEQUENCE "PMM_TARIFFSET_P" START WITH 1000000;
CREATE SEQUENCE "PMM_TARIFFSET_S";
ALTER TABLE "PMM_TARIFFSET" ADD CONSTRAINT "UQ_PMM_TFFSET_CAPTION_EC42693" UNIQUE ( "CAPTION" );
ALTER TABLE "PMM_TARIFFSET" ADD CONSTRAINT "UQ_PMM_TFFSET_KEY_3AF365A" UNIQUE ( "KEY" );
ALTER TABLE "PMM_TARIFFSET" MODIFY "TARIFFCOUNT" NOT NULL;
ALTER TABLE "PMM_TARIFFSET" MODIFY "SYS_VER" DEFAULT '1';
UPDATE "PMM_TARIFFSET" SET "SYS_VER" = '1' WHERE "SYS_VER" IS NULL;
ALTER TABLE "PMM_TARIFFSET" MODIFY "SYS_VER" NOT NULL;

CREATE TABLE "PMM_TARIFFSETTYPE" (
	"ID" NUMBER(20, 0) PRIMARY KEY, EE_TRANS_ID NUMBER(19, 0) , "ACTIVE" NUMBER(1, 0), "CAPTION" VARCHAR2(150 Char), "DESCRIPTION" VARCHAR2(400 Char), "KEY" VARCHAR2(30 Char), "SYS_VER" NUMBER(9, 0)
);

CREATE TABLE "PMM_TARIFFSETTYPE_C" (
EE_CHANGE_ID   NUMBER(19,0) PRIMARY KEY,
EE_CHANGE_TYPE CHAR(1),
"EE_ITEM_ID" NUMBER(20, 0),
EE_TRANS_ID NUMBER(19,0) , "ACTIVE" NUMBER(1, 0), "CAPTION" VARCHAR2(150 Char), "DESCRIPTION" VARCHAR2(400 Char), "KEY" VARCHAR2(30 Char), "SYS_VER" NUMBER(9, 0)
);
CREATE SEQUENCE "PMM_TARIFFSETTYPE_P" START WITH 1000000;
CREATE SEQUENCE "PMM_TARIFFSETTYPE_S";
ALTER TABLE "PMM_TARIFFSETTYPE" MODIFY "ACTIVE" NOT NULL;
ALTER TABLE "PMM_TARIFFSETTYPE" MODIFY "CAPTION" NOT NULL;
ALTER TABLE "PMM_TARIFFSETTYPE" ADD CONSTRAINT "UQ_PMM_TTTYPE_CAPTION_266DBB1" UNIQUE ( "CAPTION" );
ALTER TABLE "PMM_TARIFFSETTYPE" MODIFY "KEY" NOT NULL;
ALTER TABLE "PMM_TARIFFSETTYPE" ADD CONSTRAINT "UQ_PMM_TTTYPE_KEY_B249C65" UNIQUE ( "KEY" );
ALTER TABLE "PMM_TARIFFSETTYPE" MODIFY "SYS_VER" DEFAULT '1';
UPDATE "PMM_TARIFFSETTYPE" SET "SYS_VER" = '1' WHERE "SYS_VER" IS NULL;
ALTER TABLE "PMM_TARIFFSETTYPE" MODIFY "SYS_VER" NOT NULL;

ALTER TABLE "PMM_PDTACETARIFF"
ADD CONSTRAINT "FK_PMM_RIFF_PMM_RIFF_CEA7293"
FOREIGN KEY ("TARIFFFK") REFERENCES "PMM_TARIFF" ("ID");
CREATE INDEX "IX_PMM_RIFF_TARIFFFK_8624A06" ON "PMM_PDTACETARIFF" ("TARIFFFK");
CREATE INDEX "IX_PMM_RIFF_TARIFFFK_8624A06_C" ON "PMM_PDTACETARIFF_C" ("TARIFFFK");

ALTER TABLE "PMM_TARIFF"
ADD CONSTRAINT "FK_PMM_RIFF_PMM_FSET_4BAB38B"
FOREIGN KEY ("TARIFFSETFK") REFERENCES "PMM_TARIFFSET" ("ID");
CREATE INDEX "IX_PMM_RIFF_TARIETFK_DCD2AD7" ON "PMM_TARIFF" ("TARIFFSETFK");
CREATE INDEX "IX_PMM_RIFF_TARIETFK_DCD2AD7_C" ON "PMM_TARIFF_C" ("TARIFFSETFK");

ALTER TABLE "PMM_TARIFFSET"
ADD CONSTRAINT "FK_PMM_FSET_PMM_TYPE_21CA1AC"
FOREIGN KEY ("TARIFFSETTYPEFK") REFERENCES "PMM_TARIFFSETTYPE" ("ID");
CREATE INDEX "IX_PMM_FSET_TARIPEFK_7BD623D" ON "PMM_TARIFFSET" ("TARIFFSETTYPEFK");
CREATE INDEX "IX_PMM_FSET_TARIPEFK_7BD623D_C" ON "PMM_TARIFFSET_C" ("TARIFFSETTYPEFK");
CREATE INDEX "IX_PMM_RIFF_EE_IM_ID_03C2C27_C" ON "PMM_TARIFF_C" ("EE_ITEM_ID");
CREATE INDEX "IX_PMM_FSET_EE_IM_ID_DB87788_C" ON "PMM_TARIFFSET_C" ("EE_ITEM_ID");
CREATE INDEX "IX_PMM_TYPE_EE_IM_ID_15087A6_C" ON "PMM_TARIFFSETTYPE_C" ("EE_ITEM_ID");
-- 2: triggery a pohledy;

CREATE OR REPLACE TRIGGER "PMM_PDTCATEGORY_U"
BEFORE INSERT OR UPDATE ON "PMM_PDTCATEGORY"
FOR EACH ROW
DECLARE
	trans_id number;
BEGIN
	ee_get_transaction_id(trans_id);
	:new.EE_TRANS_ID := trans_id;
	INSERT INTO "PMM_PDTCATEGORY_C" t1(EE_CHANGE_ID, "EE_ITEM_ID", EE_CHANGE_TYPE, EE_TRANS_ID, t1."ACTIVE", t1."CAPTION", t1."COMMODITYFK", t1."DESCRIPTION", t1."EXTERNALID", t1."KEY", t1."SYS_VER")
	VALUES ("PMM_PDTCATEGORY_S".nextval, :new."ID", 'u', trans_id, :new."ACTIVE", :new."CAPTION", :new."COMMODITYFK", :new."DESCRIPTION", :new."EXTERNALID", :new."KEY", :new."SYS_VER");
END;
/

CREATE OR REPLACE TRIGGER "PMM_PDTCATEGORY_D"
BEFORE DELETE ON "PMM_PDTCATEGORY"
FOR EACH ROW
DECLARE
	trans_id number;
BEGIN
	ee_get_transaction_id(trans_id);
	INSERT INTO "PMM_PDTCATEGORY_C"(EE_CHANGE_ID, "EE_ITEM_ID", EE_CHANGE_TYPE, EE_TRANS_ID)
	VALUES ("PMM_PDTCATEGORY_S".nextval, :old."ID", 'd', trans_id);
END;
/
						
CREATE OR REPLACE VIEW "PMM_PDTCATEGORY_H" AS
SELECT t1."EE_ITEM_ID" "ID", t1.EE_TRANS_ID EE_TRANS_ID, t1."ACTIVE", t1."CAPTION", t1."COMMODITYFK", t1."DESCRIPTION", t1."EXTERNALID", t1."KEY", t1."SYS_VER"
FROM
"PMM_PDTCATEGORY_C" t1,
(SELECT EE_ITEM_ID, MAX(EE_CHANGE_ID) KEEP (DENSE_RANK FIRST ORDER BY COMMIT_ID desc, EE_CHANGE_ID desc) trans_change_id
  FROM "PMM_PDTCATEGORY_C" ti INNER JOIN ee_visible_transactions v ON EE_TRANS_ID = v.id
  GROUP BY EE_ITEM_ID) g
WHERE t1.EE_ITEM_ID=g.EE_ITEM_ID and t1.EE_CHANGE_ID=g.trans_change_id and t1.EE_CHANGE_TYPE <> 'd';
/

CREATE OR REPLACE TRIGGER "PMM_PDTCATEGORY_HU"
INSTEAD OF UPDATE 
ON "PMM_PDTCATEGORY_H"
FOR EACH ROW
DECLARE
  ex_nonupdatable EXCEPTION;
	PRAGMA EXCEPTION_INIT( ex_nonupdatable, -20001);
BEGIN
	UPDATE "PMM_PDTCATEGORY"
	SET "ACTIVE" = :new."ACTIVE", "CAPTION" = :new."CAPTION", "COMMODITYFK" = :new."COMMODITYFK", "DESCRIPTION" = :new."DESCRIPTION", "EXTERNALID" = :new."EXTERNALID", "KEY" = :new."KEY", "SYS_VER" = :new."SYS_VER"
	WHERE "ID" = :new."ID" AND EE_TRANS_ID = :new.EE_TRANS_ID;
	IF sql%rowcount <> 1 THEN
		raise_application_error(-20001, 'Pokus o update neplatného řádku, pokud chcete zapisovat do tohoto řádku, načtěte novou verzi dat');
	END IF;
END;
/

CREATE OR REPLACE TRIGGER "PMM_PDTCATEGORY_HI"
INSTEAD OF INSERT
ON "PMM_PDTCATEGORY_H"
FOR EACH ROW
BEGIN
	INSERT INTO "PMM_PDTCATEGORY" t1("ID", t1."ACTIVE", t1."CAPTION", t1."COMMODITYFK", t1."DESCRIPTION", t1."EXTERNALID", t1."KEY", t1."SYS_VER") VALUES (:new."ID", :new."ACTIVE", :new."CAPTION", :new."COMMODITYFK", :new."DESCRIPTION", :new."EXTERNALID", :new."KEY", :new."SYS_VER");
END;
/

CREATE OR REPLACE TRIGGER "PMM_PDTCATEGORY_HD"
INSTEAD OF DELETE
ON "PMM_PDTCATEGORY_H"
FOR EACH ROW
DECLARE
  ex_nonupdatable EXCEPTION;
	PRAGMA EXCEPTION_INIT( ex_nonupdatable, -20001);
BEGIN
	DELETE FROM "PMM_PDTCATEGORY"
	WHERE "ID" = :old."ID" AND EE_TRANS_ID = :old.EE_TRANS_ID;
	IF sql%rowcount <> 1 THEN
		raise_application_error(-20001, 'Pokus o update neplatného řádku, pokud chcete zapisovat do tohoto řádku, načtěte novou verzi dat');
	END IF;
END;
/

CREATE OR REPLACE TRIGGER "PMM_PDTACE_U"
BEFORE INSERT OR UPDATE ON "PMM_PDTACE"
FOR EACH ROW
DECLARE
	trans_id number;
BEGIN
	ee_get_transaction_id(trans_id);
	:new.EE_TRANS_ID := trans_id;
	INSERT INTO "PMM_PDTACE_C" t1(EE_CHANGE_ID, "EE_ITEM_ID", EE_CHANGE_TYPE, EE_TRANS_ID, t1."ACE", t1."ACEFORADVANCE", t1."ACETARIFFSHARETYPEFK", t1."DATASOURCEFK", t1."PDTFK", t1."RECALCULATEDACE", t1."UNITFK", t1."VALIDFROM", t1."VALIDFROM2", t1."VALIDTO", t1."VALIDTO2", t1."SYS_VER")
	VALUES ("PMM_PDTACE_S".nextval, :new."ID", 'u', trans_id, :new."ACE", :new."ACEFORADVANCE", :new."ACETARIFFSHARETYPEFK", :new."DATASOURCEFK", :new."PDTFK", :new."RECALCULATEDACE", :new."UNITFK", :new."VALIDFROM", :new."VALIDFROM2", :new."VALIDTO", :new."VALIDTO2", :new."SYS_VER");
END;
/

CREATE OR REPLACE TRIGGER "PMM_PDTACE_D"
BEFORE DELETE ON "PMM_PDTACE"
FOR EACH ROW
DECLARE
	trans_id number;
BEGIN
	ee_get_transaction_id(trans_id);
	INSERT INTO "PMM_PDTACE_C"(EE_CHANGE_ID, "EE_ITEM_ID", EE_CHANGE_TYPE, EE_TRANS_ID)
	VALUES ("PMM_PDTACE_S".nextval, :old."ID", 'd', trans_id);
END;
/
						
CREATE OR REPLACE VIEW "PMM_PDTACE_H" AS
SELECT t1."EE_ITEM_ID" "ID", t1.EE_TRANS_ID EE_TRANS_ID, t1."ACE", t1."ACEFORADVANCE", t1."ACETARIFFSHARETYPEFK", t1."DATASOURCEFK", t1."PDTFK", t1."RECALCULATEDACE", t1."UNITFK", t1."VALIDFROM", t1."VALIDFROM2", t1."VALIDTO", t1."VALIDTO2", t1."SYS_VER"
FROM
"PMM_PDTACE_C" t1,
(SELECT EE_ITEM_ID, MAX(EE_CHANGE_ID) KEEP (DENSE_RANK FIRST ORDER BY COMMIT_ID desc, EE_CHANGE_ID desc) trans_change_id
  FROM "PMM_PDTACE_C" ti INNER JOIN ee_visible_transactions v ON EE_TRANS_ID = v.id
  GROUP BY EE_ITEM_ID) g
WHERE t1.EE_ITEM_ID=g.EE_ITEM_ID and t1.EE_CHANGE_ID=g.trans_change_id and t1.EE_CHANGE_TYPE <> 'd';
/

CREATE OR REPLACE TRIGGER "PMM_PDTACE_HU"
INSTEAD OF UPDATE 
ON "PMM_PDTACE_H"
FOR EACH ROW
DECLARE
  ex_nonupdatable EXCEPTION;
	PRAGMA EXCEPTION_INIT( ex_nonupdatable, -20001);
BEGIN
	UPDATE "PMM_PDTACE"
	SET "ACE" = :new."ACE", "ACEFORADVANCE" = :new."ACEFORADVANCE", "ACETARIFFSHARETYPEFK" = :new."ACETARIFFSHARETYPEFK", "DATASOURCEFK" = :new."DATASOURCEFK", "PDTFK" = :new."PDTFK", "RECALCULATEDACE" = :new."RECALCULATEDACE", "UNITFK" = :new."UNITFK", "VALIDFROM" = :new."VALIDFROM", "VALIDFROM2" = :new."VALIDFROM2", "VALIDTO" = :new."VALIDTO", "VALIDTO2" = :new."VALIDTO2", "SYS_VER" = :new."SYS_VER"
	WHERE "ID" = :new."ID" AND EE_TRANS_ID = :new.EE_TRANS_ID;
	IF sql%rowcount <> 1 THEN
		raise_application_error(-20001, 'Pokus o update neplatného řádku, pokud chcete zapisovat do tohoto řádku, načtěte novou verzi dat');
	END IF;
END;
/

CREATE OR REPLACE TRIGGER "PMM_PDTACE_HI"
INSTEAD OF INSERT
ON "PMM_PDTACE_H"
FOR EACH ROW
BEGIN
	INSERT INTO "PMM_PDTACE" t1("ID", t1."ACE", t1."ACEFORADVANCE", t1."ACETARIFFSHARETYPEFK", t1."DATASOURCEFK", t1."PDTFK", t1."RECALCULATEDACE", t1."UNITFK", t1."VALIDFROM", t1."VALIDFROM2", t1."VALIDTO", t1."VALIDTO2", t1."SYS_VER") VALUES (:new."ID", :new."ACE", :new."ACEFORADVANCE", :new."ACETARIFFSHARETYPEFK", :new."DATASOURCEFK", :new."PDTFK", :new."RECALCULATEDACE", :new."UNITFK", :new."VALIDFROM", :new."VALIDFROM2", :new."VALIDTO", :new."VALIDTO2", :new."SYS_VER");
END;
/

CREATE OR REPLACE TRIGGER "PMM_PDTACE_HD"
INSTEAD OF DELETE
ON "PMM_PDTACE_H"
FOR EACH ROW
DECLARE
  ex_nonupdatable EXCEPTION;
	PRAGMA EXCEPTION_INIT( ex_nonupdatable, -20001);
BEGIN
	DELETE FROM "PMM_PDTACE"
	WHERE "ID" = :old."ID" AND EE_TRANS_ID = :old.EE_TRANS_ID;
	IF sql%rowcount <> 1 THEN
		raise_application_error(-20001, 'Pokus o update neplatného řádku, pokud chcete zapisovat do tohoto řádku, načtěte novou verzi dat');
	END IF;
END;
/

CREATE OR REPLACE TRIGGER "PMM_DISTRIBUTION_U"
BEFORE INSERT OR UPDATE ON "PMM_DISTRIBUTION"
FOR EACH ROW
DECLARE
	trans_id number;
BEGIN
	ee_get_transaction_id(trans_id);
	:new.EE_TRANS_ID := trans_id;
	INSERT INTO "PMM_DISTRIBUTION_C" t1(EE_CHANGE_ID, "EE_ITEM_ID", EE_CHANGE_TYPE, EE_TRANS_ID, t1."ACTIVE", t1."CAPTION", t1."DISTRIBUTIONTYPEFK", t1."EXTERNALID", t1."EXTERNALID2", t1."GRIDFK", t1."KEY", t1."NETWORKRANGELOWERLIMIT", t1."NETWORKRANGETOPLIMIT", t1."SHORTCAPTION", t1."STATEFK", t1."SYS_VER")
	VALUES ("PMM_DISTRIBUTION_S".nextval, :new."ID", 'u', trans_id, :new."ACTIVE", :new."CAPTION", :new."DISTRIBUTIONTYPEFK", :new."EXTERNALID", :new."EXTERNALID2", :new."GRIDFK", :new."KEY", :new."NETWORKRANGELOWERLIMIT", :new."NETWORKRANGETOPLIMIT", :new."SHORTCAPTION", :new."STATEFK", :new."SYS_VER");
END;
/

CREATE OR REPLACE TRIGGER "PMM_DISTRIBUTION_D"
BEFORE DELETE ON "PMM_DISTRIBUTION"
FOR EACH ROW
DECLARE
	trans_id number;
BEGIN
	ee_get_transaction_id(trans_id);
	INSERT INTO "PMM_DISTRIBUTION_C"(EE_CHANGE_ID, "EE_ITEM_ID", EE_CHANGE_TYPE, EE_TRANS_ID)
	VALUES ("PMM_DISTRIBUTION_S".nextval, :old."ID", 'd', trans_id);
END;
/
						
CREATE OR REPLACE VIEW "PMM_DISTRIBUTION_H" AS
SELECT t1."EE_ITEM_ID" "ID", t1.EE_TRANS_ID EE_TRANS_ID, t1."ACTIVE", t1."CAPTION", t1."DISTRIBUTIONTYPEFK", t1."EXTERNALID", t1."EXTERNALID2", t1."GRIDFK", t1."KEY", t1."NETWORKRANGELOWERLIMIT", t1."NETWORKRANGETOPLIMIT", t1."SHORTCAPTION", t1."STATEFK", t1."SYS_VER"
FROM
"PMM_DISTRIBUTION_C" t1,
(SELECT EE_ITEM_ID, MAX(EE_CHANGE_ID) KEEP (DENSE_RANK FIRST ORDER BY COMMIT_ID desc, EE_CHANGE_ID desc) trans_change_id
  FROM "PMM_DISTRIBUTION_C" ti INNER JOIN ee_visible_transactions v ON EE_TRANS_ID = v.id
  GROUP BY EE_ITEM_ID) g
WHERE t1.EE_ITEM_ID=g.EE_ITEM_ID and t1.EE_CHANGE_ID=g.trans_change_id and t1.EE_CHANGE_TYPE <> 'd';
/

CREATE OR REPLACE TRIGGER "PMM_DISTRIBUTION_HU"
INSTEAD OF UPDATE 
ON "PMM_DISTRIBUTION_H"
FOR EACH ROW
DECLARE
  ex_nonupdatable EXCEPTION;
	PRAGMA EXCEPTION_INIT( ex_nonupdatable, -20001);
BEGIN
	UPDATE "PMM_DISTRIBUTION"
	SET "ACTIVE" = :new."ACTIVE", "CAPTION" = :new."CAPTION", "DISTRIBUTIONTYPEFK" = :new."DISTRIBUTIONTYPEFK", "EXTERNALID" = :new."EXTERNALID", "EXTERNALID2" = :new."EXTERNALID2", "GRIDFK" = :new."GRIDFK", "KEY" = :new."KEY", "NETWORKRANGELOWERLIMIT" = :new."NETWORKRANGELOWERLIMIT", "NETWORKRANGETOPLIMIT" = :new."NETWORKRANGETOPLIMIT", "SHORTCAPTION" = :new."SHORTCAPTION", "STATEFK" = :new."STATEFK", "SYS_VER" = :new."SYS_VER"
	WHERE "ID" = :new."ID" AND EE_TRANS_ID = :new.EE_TRANS_ID;
	IF sql%rowcount <> 1 THEN
		raise_application_error(-20001, 'Pokus o update neplatného řádku, pokud chcete zapisovat do tohoto řádku, načtěte novou verzi dat');
	END IF;
END;
/

CREATE OR REPLACE TRIGGER "PMM_DISTRIBUTION_HI"
INSTEAD OF INSERT
ON "PMM_DISTRIBUTION_H"
FOR EACH ROW
BEGIN
	INSERT INTO "PMM_DISTRIBUTION" t1("ID", t1."ACTIVE", t1."CAPTION", t1."DISTRIBUTIONTYPEFK", t1."EXTERNALID", t1."EXTERNALID2", t1."GRIDFK", t1."KEY", t1."NETWORKRANGELOWERLIMIT", t1."NETWORKRANGETOPLIMIT", t1."SHORTCAPTION", t1."STATEFK", t1."SYS_VER") VALUES (:new."ID", :new."ACTIVE", :new."CAPTION", :new."DISTRIBUTIONTYPEFK", :new."EXTERNALID", :new."EXTERNALID2", :new."GRIDFK", :new."KEY", :new."NETWORKRANGELOWERLIMIT", :new."NETWORKRANGETOPLIMIT", :new."SHORTCAPTION", :new."STATEFK", :new."SYS_VER");
END;
/

CREATE OR REPLACE TRIGGER "PMM_DISTRIBUTION_HD"
INSTEAD OF DELETE
ON "PMM_DISTRIBUTION_H"
FOR EACH ROW
DECLARE
  ex_nonupdatable EXCEPTION;
	PRAGMA EXCEPTION_INIT( ex_nonupdatable, -20001);
BEGIN
	DELETE FROM "PMM_DISTRIBUTION"
	WHERE "ID" = :old."ID" AND EE_TRANS_ID = :old.EE_TRANS_ID;
	IF sql%rowcount <> 1 THEN
		raise_application_error(-20001, 'Pokus o update neplatného řádku, pokud chcete zapisovat do tohoto řádku, načtěte novou verzi dat');
	END IF;
END;
/

CREATE OR REPLACE TRIGGER "PMM_TARIFF_U"
BEFORE INSERT OR UPDATE ON "PMM_TARIFF"
FOR EACH ROW
DECLARE
	trans_id number;
BEGIN
	ee_get_transaction_id(trans_id);
	:new.EE_TRANS_ID := trans_id;
	INSERT INTO "PMM_TARIFF_C" t1(EE_CHANGE_ID, "EE_ITEM_ID", EE_CHANGE_TYPE, EE_TRANS_ID, t1."ACTIVE", t1."CAPTION", t1."DESCRIPTION", t1."KEY", t1."TARIFFINDEX", t1."TARIFFSETFK", t1."WITHDIAGRAM", t1."SYS_VER")
	VALUES ("PMM_TARIFF_S".nextval, :new."ID", 'u', trans_id, :new."ACTIVE", :new."CAPTION", :new."DESCRIPTION", :new."KEY", :new."TARIFFINDEX", :new."TARIFFSETFK", :new."WITHDIAGRAM", :new."SYS_VER");
END;
/

CREATE OR REPLACE TRIGGER "PMM_TARIFF_D"
BEFORE DELETE ON "PMM_TARIFF"
FOR EACH ROW
DECLARE
	trans_id number;
BEGIN
	ee_get_transaction_id(trans_id);
	INSERT INTO "PMM_TARIFF_C"(EE_CHANGE_ID, "EE_ITEM_ID", EE_CHANGE_TYPE, EE_TRANS_ID)
	VALUES ("PMM_TARIFF_S".nextval, :old."ID", 'd', trans_id);
END;
/
						
CREATE OR REPLACE VIEW "PMM_TARIFF_H" AS
SELECT t1."EE_ITEM_ID" "ID", t1.EE_TRANS_ID EE_TRANS_ID, t1."ACTIVE", t1."CAPTION", t1."DESCRIPTION", t1."KEY", t1."TARIFFINDEX", t1."TARIFFSETFK", t1."WITHDIAGRAM", t1."SYS_VER"
FROM
"PMM_TARIFF_C" t1,
(SELECT EE_ITEM_ID, MAX(EE_CHANGE_ID) KEEP (DENSE_RANK FIRST ORDER BY COMMIT_ID desc, EE_CHANGE_ID desc) trans_change_id
  FROM "PMM_TARIFF_C" ti INNER JOIN ee_visible_transactions v ON EE_TRANS_ID = v.id
  GROUP BY EE_ITEM_ID) g
WHERE t1.EE_ITEM_ID=g.EE_ITEM_ID and t1.EE_CHANGE_ID=g.trans_change_id and t1.EE_CHANGE_TYPE <> 'd';
/

CREATE OR REPLACE TRIGGER "PMM_TARIFF_HU"
INSTEAD OF UPDATE 
ON "PMM_TARIFF_H"
FOR EACH ROW
DECLARE
  ex_nonupdatable EXCEPTION;
	PRAGMA EXCEPTION_INIT( ex_nonupdatable, -20001);
BEGIN
	UPDATE "PMM_TARIFF"
	SET "ACTIVE" = :new."ACTIVE", "CAPTION" = :new."CAPTION", "DESCRIPTION" = :new."DESCRIPTION", "KEY" = :new."KEY", "TARIFFINDEX" = :new."TARIFFINDEX", "TARIFFSETFK" = :new."TARIFFSETFK", "WITHDIAGRAM" = :new."WITHDIAGRAM", "SYS_VER" = :new."SYS_VER"
	WHERE "ID" = :new."ID" AND EE_TRANS_ID = :new.EE_TRANS_ID;
	IF sql%rowcount <> 1 THEN
		raise_application_error(-20001, 'Pokus o update neplatného řádku, pokud chcete zapisovat do tohoto řádku, načtěte novou verzi dat');
	END IF;
END;
/

CREATE OR REPLACE TRIGGER "PMM_TARIFF_HI"
INSTEAD OF INSERT
ON "PMM_TARIFF_H"
FOR EACH ROW
BEGIN
	INSERT INTO "PMM_TARIFF" t1("ID", t1."ACTIVE", t1."CAPTION", t1."DESCRIPTION", t1."KEY", t1."TARIFFINDEX", t1."TARIFFSETFK", t1."WITHDIAGRAM", t1."SYS_VER") VALUES (:new."ID", :new."ACTIVE", :new."CAPTION", :new."DESCRIPTION", :new."KEY", :new."TARIFFINDEX", :new."TARIFFSETFK", :new."WITHDIAGRAM", :new."SYS_VER");
END;
/

CREATE OR REPLACE TRIGGER "PMM_TARIFF_HD"
INSTEAD OF DELETE
ON "PMM_TARIFF_H"
FOR EACH ROW
DECLARE
  ex_nonupdatable EXCEPTION;
	PRAGMA EXCEPTION_INIT( ex_nonupdatable, -20001);
BEGIN
	DELETE FROM "PMM_TARIFF"
	WHERE "ID" = :old."ID" AND EE_TRANS_ID = :old.EE_TRANS_ID;
	IF sql%rowcount <> 1 THEN
		raise_application_error(-20001, 'Pokus o update neplatného řádku, pokud chcete zapisovat do tohoto řádku, načtěte novou verzi dat');
	END IF;
END;
/

CREATE OR REPLACE TRIGGER "PMM_TARIFFSET_U"
BEFORE INSERT OR UPDATE ON "PMM_TARIFFSET"
FOR EACH ROW
DECLARE
	trans_id number;
BEGIN
	ee_get_transaction_id(trans_id);
	:new.EE_TRANS_ID := trans_id;
	INSERT INTO "PMM_TARIFFSET_C" t1(EE_CHANGE_ID, "EE_ITEM_ID", EE_CHANGE_TYPE, EE_TRANS_ID, t1."ACTIVE", t1."CAPTION", t1."COMMODITYFK", t1."COMMODITYLEVELGROUPFK", t1."DESCRIPTION", t1."EXTERNALID1", t1."EXTERNALID2", t1."EXTERNALID3", t1."KEY", t1."STATEFK", t1."TARIFFCOUNT", t1."TARIFFSETTYPEFK", t1."VALIDFROM", t1."VALIDTO", t1."WITHDIAGRAM", t1."SYS_VER")
	VALUES ("PMM_TARIFFSET_S".nextval, :new."ID", 'u', trans_id, :new."ACTIVE", :new."CAPTION", :new."COMMODITYFK", :new."COMMODITYLEVELGROUPFK", :new."DESCRIPTION", :new."EXTERNALID1", :new."EXTERNALID2", :new."EXTERNALID3", :new."KEY", :new."STATEFK", :new."TARIFFCOUNT", :new."TARIFFSETTYPEFK", :new."VALIDFROM", :new."VALIDTO", :new."WITHDIAGRAM", :new."SYS_VER");
END;
/

CREATE OR REPLACE TRIGGER "PMM_TARIFFSET_D"
BEFORE DELETE ON "PMM_TARIFFSET"
FOR EACH ROW
DECLARE
	trans_id number;
BEGIN
	ee_get_transaction_id(trans_id);
	INSERT INTO "PMM_TARIFFSET_C"(EE_CHANGE_ID, "EE_ITEM_ID", EE_CHANGE_TYPE, EE_TRANS_ID)
	VALUES ("PMM_TARIFFSET_S".nextval, :old."ID", 'd', trans_id);
END;
/
						
CREATE OR REPLACE VIEW "PMM_TARIFFSET_H" AS
SELECT t1."EE_ITEM_ID" "ID", t1.EE_TRANS_ID EE_TRANS_ID, t1."ACTIVE", t1."CAPTION", t1."COMMODITYFK", t1."COMMODITYLEVELGROUPFK", t1."DESCRIPTION", t1."EXTERNALID1", t1."EXTERNALID2", t1."EXTERNALID3", t1."KEY", t1."STATEFK", t1."TARIFFCOUNT", t1."TARIFFSETTYPEFK", t1."VALIDFROM", t1."VALIDTO", t1."WITHDIAGRAM", t1."SYS_VER"
FROM
"PMM_TARIFFSET_C" t1,
(SELECT EE_ITEM_ID, MAX(EE_CHANGE_ID) KEEP (DENSE_RANK FIRST ORDER BY COMMIT_ID desc, EE_CHANGE_ID desc) trans_change_id
  FROM "PMM_TARIFFSET_C" ti INNER JOIN ee_visible_transactions v ON EE_TRANS_ID = v.id
  GROUP BY EE_ITEM_ID) g
WHERE t1.EE_ITEM_ID=g.EE_ITEM_ID and t1.EE_CHANGE_ID=g.trans_change_id and t1.EE_CHANGE_TYPE <> 'd';
/

CREATE OR REPLACE TRIGGER "PMM_TARIFFSET_HU"
INSTEAD OF UPDATE 
ON "PMM_TARIFFSET_H"
FOR EACH ROW
DECLARE
  ex_nonupdatable EXCEPTION;
	PRAGMA EXCEPTION_INIT( ex_nonupdatable, -20001);
BEGIN
	UPDATE "PMM_TARIFFSET"
	SET "ACTIVE" = :new."ACTIVE", "CAPTION" = :new."CAPTION", "COMMODITYFK" = :new."COMMODITYFK", "COMMODITYLEVELGROUPFK" = :new."COMMODITYLEVELGROUPFK", "DESCRIPTION" = :new."DESCRIPTION", "EXTERNALID1" = :new."EXTERNALID1", "EXTERNALID2" = :new."EXTERNALID2", "EXTERNALID3" = :new."EXTERNALID3", "KEY" = :new."KEY", "STATEFK" = :new."STATEFK", "TARIFFCOUNT" = :new."TARIFFCOUNT", "TARIFFSETTYPEFK" = :new."TARIFFSETTYPEFK", "VALIDFROM" = :new."VALIDFROM", "VALIDTO" = :new."VALIDTO", "WITHDIAGRAM" = :new."WITHDIAGRAM", "SYS_VER" = :new."SYS_VER"
	WHERE "ID" = :new."ID" AND EE_TRANS_ID = :new.EE_TRANS_ID;
	IF sql%rowcount <> 1 THEN
		raise_application_error(-20001, 'Pokus o update neplatného řádku, pokud chcete zapisovat do tohoto řádku, načtěte novou verzi dat');
	END IF;
END;
/

CREATE OR REPLACE TRIGGER "PMM_TARIFFSET_HI"
INSTEAD OF INSERT
ON "PMM_TARIFFSET_H"
FOR EACH ROW
BEGIN
	INSERT INTO "PMM_TARIFFSET" t1("ID", t1."ACTIVE", t1."CAPTION", t1."COMMODITYFK", t1."COMMODITYLEVELGROUPFK", t1."DESCRIPTION", t1."EXTERNALID1", t1."EXTERNALID2", t1."EXTERNALID3", t1."KEY", t1."STATEFK", t1."TARIFFCOUNT", t1."TARIFFSETTYPEFK", t1."VALIDFROM", t1."VALIDTO", t1."WITHDIAGRAM", t1."SYS_VER") VALUES (:new."ID", :new."ACTIVE", :new."CAPTION", :new."COMMODITYFK", :new."COMMODITYLEVELGROUPFK", :new."DESCRIPTION", :new."EXTERNALID1", :new."EXTERNALID2", :new."EXTERNALID3", :new."KEY", :new."STATEFK", :new."TARIFFCOUNT", :new."TARIFFSETTYPEFK", :new."VALIDFROM", :new."VALIDTO", :new."WITHDIAGRAM", :new."SYS_VER");
END;
/

CREATE OR REPLACE TRIGGER "PMM_TARIFFSET_HD"
INSTEAD OF DELETE
ON "PMM_TARIFFSET_H"
FOR EACH ROW
DECLARE
  ex_nonupdatable EXCEPTION;
	PRAGMA EXCEPTION_INIT( ex_nonupdatable, -20001);
BEGIN
	DELETE FROM "PMM_TARIFFSET"
	WHERE "ID" = :old."ID" AND EE_TRANS_ID = :old.EE_TRANS_ID;
	IF sql%rowcount <> 1 THEN
		raise_application_error(-20001, 'Pokus o update neplatného řádku, pokud chcete zapisovat do tohoto řádku, načtěte novou verzi dat');
	END IF;
END;
/

CREATE OR REPLACE TRIGGER "PMM_TARIFFSETTYPE_U"
BEFORE INSERT OR UPDATE ON "PMM_TARIFFSETTYPE"
FOR EACH ROW
DECLARE
	trans_id number;
BEGIN
	ee_get_transaction_id(trans_id);
	:new.EE_TRANS_ID := trans_id;
	INSERT INTO "PMM_TARIFFSETTYPE_C" t1(EE_CHANGE_ID, "EE_ITEM_ID", EE_CHANGE_TYPE, EE_TRANS_ID, t1."ACTIVE", t1."CAPTION", t1."DESCRIPTION", t1."KEY", t1."SYS_VER")
	VALUES ("PMM_TARIFFSETTYPE_S".nextval, :new."ID", 'u', trans_id, :new."ACTIVE", :new."CAPTION", :new."DESCRIPTION", :new."KEY", :new."SYS_VER");
END;
/

CREATE OR REPLACE TRIGGER "PMM_TARIFFSETTYPE_D"
BEFORE DELETE ON "PMM_TARIFFSETTYPE"
FOR EACH ROW
DECLARE
	trans_id number;
BEGIN
	ee_get_transaction_id(trans_id);
	INSERT INTO "PMM_TARIFFSETTYPE_C"(EE_CHANGE_ID, "EE_ITEM_ID", EE_CHANGE_TYPE, EE_TRANS_ID)
	VALUES ("PMM_TARIFFSETTYPE_S".nextval, :old."ID", 'd', trans_id);
END;
/
						
CREATE OR REPLACE VIEW "PMM_TARIFFSETTYPE_H" AS
SELECT t1."EE_ITEM_ID" "ID", t1.EE_TRANS_ID EE_TRANS_ID, t1."ACTIVE", t1."CAPTION", t1."DESCRIPTION", t1."KEY", t1."SYS_VER"
FROM
"PMM_TARIFFSETTYPE_C" t1,
(SELECT EE_ITEM_ID, MAX(EE_CHANGE_ID) KEEP (DENSE_RANK FIRST ORDER BY COMMIT_ID desc, EE_CHANGE_ID desc) trans_change_id
  FROM "PMM_TARIFFSETTYPE_C" ti INNER JOIN ee_visible_transactions v ON EE_TRANS_ID = v.id
  GROUP BY EE_ITEM_ID) g
WHERE t1.EE_ITEM_ID=g.EE_ITEM_ID and t1.EE_CHANGE_ID=g.trans_change_id and t1.EE_CHANGE_TYPE <> 'd';
/

CREATE OR REPLACE TRIGGER "PMM_TARIFFSETTYPE_HU"
INSTEAD OF UPDATE 
ON "PMM_TARIFFSETTYPE_H"
FOR EACH ROW
DECLARE
  ex_nonupdatable EXCEPTION;
	PRAGMA EXCEPTION_INIT( ex_nonupdatable, -20001);
BEGIN
	UPDATE "PMM_TARIFFSETTYPE"
	SET "ACTIVE" = :new."ACTIVE", "CAPTION" = :new."CAPTION", "DESCRIPTION" = :new."DESCRIPTION", "KEY" = :new."KEY", "SYS_VER" = :new."SYS_VER"
	WHERE "ID" = :new."ID" AND EE_TRANS_ID = :new.EE_TRANS_ID;
	IF sql%rowcount <> 1 THEN
		raise_application_error(-20001, 'Pokus o update neplatného řádku, pokud chcete zapisovat do tohoto řádku, načtěte novou verzi dat');
	END IF;
END;
/

CREATE OR REPLACE TRIGGER "PMM_TARIFFSETTYPE_HI"
INSTEAD OF INSERT
ON "PMM_TARIFFSETTYPE_H"
FOR EACH ROW
BEGIN
	INSERT INTO "PMM_TARIFFSETTYPE" t1("ID", t1."ACTIVE", t1."CAPTION", t1."DESCRIPTION", t1."KEY", t1."SYS_VER") VALUES (:new."ID", :new."ACTIVE", :new."CAPTION", :new."DESCRIPTION", :new."KEY", :new."SYS_VER");
END;
/

CREATE OR REPLACE TRIGGER "PMM_TARIFFSETTYPE_HD"
INSTEAD OF DELETE
ON "PMM_TARIFFSETTYPE_H"
FOR EACH ROW
DECLARE
  ex_nonupdatable EXCEPTION;
	PRAGMA EXCEPTION_INIT( ex_nonupdatable, -20001);
BEGIN
	DELETE FROM "PMM_TARIFFSETTYPE"
	WHERE "ID" = :old."ID" AND EE_TRANS_ID = :old.EE_TRANS_ID;
	IF sql%rowcount <> 1 THEN
		raise_application_error(-20001, 'Pokus o update neplatného řádku, pokud chcete zapisovat do tohoto řádku, načtěte novou verzi dat');
	END IF;
END;
/
-- 3: závislé objekty (lokalizace);
-- 4: číselníky;
INSERT INTO "PMM_EMERGENCYCATEGORY" ("ID", "SYS_VER", "ACTIVE", "KEY", "CAPTION", "DESCRIPTION") VALUES ('12', 1, '1', 'X', 'X', 'X');
INSERT INTO "PMM_PDTCATEGORY" ("ID", "SYS_VER", "ACTIVE", "KEY", "CAPTION", "DESCRIPTION", "EXTERNALID", "COMMODITYFK") VALUES ('11', 1, '1', 'VIRTPODGRID', 'Virtuální OPM za síť', 'Virtuální OPM za síť', '1005', '2');
UPDATE "PMM_LPCLASS" SET "COMMODITYFK" = '1', "KEY" = 'TDD1CZ', "CAPTION" = 'TDD1 ČR', "DESCRIPTION" = 'TDD1 ČR', "EXTERNALID" = '001', "EXTERNALID2" = 'TDD1' WHERE "ID" = '1'/
UPDATE "PMM_LPCLASS" SET "COMMODITYFK" = '1', "KEY" = 'TDD2CZ', "CAPTION" = 'TDD2 ČR', "DESCRIPTION" = 'TDD2 ČR', "EXTERNALID" = '002', "EXTERNALID2" = 'TDD2' WHERE "ID" = '2'/
UPDATE "PMM_LPCLASS" SET "COMMODITYFK" = '1', "KEY" = 'TDD3CZ', "CAPTION" = 'TDD3 ČR', "DESCRIPTION" = 'TDD3 ČR', "EXTERNALID" = '003', "EXTERNALID2" = 'TDD3' WHERE "ID" = '3'/
UPDATE "PMM_LPCLASS" SET "COMMODITYFK" = '1', "KEY" = 'TDD4CZ', "CAPTION" = 'TDD4 ČR', "DESCRIPTION" = 'TDD4 ČR', "EXTERNALID" = '004', "EXTERNALID2" = 'TDD4' WHERE "ID" = '4'/
UPDATE "PMM_LPCLASS" SET "COMMODITYFK" = '1', "KEY" = 'TDD5CZ', "CAPTION" = 'TDD5 ČR', "DESCRIPTION" = 'TDD5 ČR', "EXTERNALID" = '005', "EXTERNALID2" = 'TDD5' WHERE "ID" = '5'/
UPDATE "PMM_LPCLASS" SET "COMMODITYFK" = '1', "KEY" = 'TDD6CZ', "CAPTION" = 'TDD6 ČR', "DESCRIPTION" = 'TDD6 ČR', "EXTERNALID" = '006', "EXTERNALID2" = 'TDD6' WHERE "ID" = '6'/
UPDATE "PMM_LPCLASS" SET "COMMODITYFK" = '1', "KEY" = 'TDD7CZ', "CAPTION" = 'TDD7 ČR', "DESCRIPTION" = 'TDD7 ČR', "EXTERNALID" = '007', "EXTERNALID2" = 'TDD7' WHERE "ID" = '7'/
UPDATE "PMM_LPCLASS" SET "COMMODITYFK" = '1', "KEY" = 'TDD8CZ', "CAPTION" = 'TDD8 ČR', "DESCRIPTION" = 'TDD8 ČR', "EXTERNALID" = '008', "EXTERNALID2" = 'TDD8' WHERE "ID" = '8'/
UPDATE "PMM_DISTRIBUTION" SET "KEY" = 'RAK', "CAPTION" = 'PM Rakovník II-Kuštova', "SHORTCAPTION" = 'RAK', "EXTERNALID" = '209', "EXTERNALID2" = '27ZGOTEV0001266K', "DISTRIBUTIONTYPEFK" = '4', "GRIDFK" = '2' WHERE "ID" = '110009'/
UPDATE "PMM_DISTRIBUTION" SET "KEY" = 'ZVU', "CAPTION" = 'ZVU', "SHORTCAPTION" = 'ZVU', "EXTERNALID" = '501', "DISTRIBUTIONTYPEFK" = '4', "GRIDFK" = '2' WHERE "ID" = '110013'/
INSERT INTO "PMM_DISTRIBUTION" ("ID", "SYS_VER", "ACTIVE", "KEY", "CAPTION", "SHORTCAPTION", "EXTERNALID", "DISTRIBUTIONTYPEFK", "GRIDFK") VALUES ('110045', 1, '0', 'VIRTCRGAS', 'Sumarni za ČR GAS', 'VIRTCRGAS', '9999', '4', '2');

DECLARE
  trans_id NUMBER(20, 0);
BEGIN
  ee_get_transaction_id(trans_id);
  UPDATE ee_transactions SET commit_id = enif_commitid_seq.nextval, commit_ts = systimestamp
  WHERE id = trans_id;
END;
/

commit;

SET DEFINE OFF;
/


-- takto umožníme nastavování sloupců typu date a number
ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD HH24:MI:SS';
ALTER SESSION SET NLS_NUMERIC_CHARACTERS = '. ';
/
-- 1: tabulky;
-- 2: triggery a pohledy;
-- 3: závislé objekty (lokalizace);
-- 4: číselníky;

DECLARE
  trans_id NUMBER(20, 0);
BEGIN
  ee_get_transaction_id(trans_id);
  UPDATE ee_transactions SET commit_id = enif_commitid_seq.nextval, commit_ts = systimestamp
  WHERE id = trans_id;
END;
/

commit;

SET DEFINE OFF;
/


-- takto umožníme nastavování sloupců typu date a number
ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD HH24:MI:SS';
ALTER SESSION SET NLS_NUMERIC_CHARACTERS = '. ';
/
-- 1: tabulky;
ALTER TABLE "GAS_METEODATA_GAS" ADD ("PREDZONE_GASFK" NUMBER(20, 0));
ALTER TABLE "GAS_METEODATA_GAS_C" ADD ("PREDZONE_GASFK" NUMBER(20, 0));
ALTER TABLE "GAS_PREDPERMISSIONS" ADD ("READONLY" NUMBER(1, 0));
ALTER TABLE "GAS_PREDPERMISSIONS_C" ADD ("READONLY" NUMBER(1, 0));
ALTER TABLE "GAS_PREDPERMISSIONS" MODIFY "READONLY" DEFAULT '1';
UPDATE "GAS_PREDPERMISSIONS" SET "READONLY" = '1' WHERE "READONLY" IS NULL;
ALTER TABLE "GAS_PREDPERMISSIONS" MODIFY "READONLY" NOT NULL;
-- 2: triggery a pohledy;

CREATE OR REPLACE TRIGGER "GAS_METEODATA_GAS_U"
BEFORE INSERT OR UPDATE ON "GAS_METEODATA_GAS"
FOR EACH ROW
DECLARE
	trans_id number;
BEGIN
	ee_get_transaction_id(trans_id);
	:new.EE_TRANS_ID := trans_id;
	INSERT INTO "GAS_METEODATA_GAS_C" t1(EE_CHANGE_ID, "EE_ITEM_ID", EE_CHANGE_TYPE, EE_TRANS_ID, t1."DISTRIBUTION_GASFK", t1."PREDDISTRIBUTION_GASFK", t1."PREDICTION_GASFK", t1."PREDZONE_GASFK", t1."SYS_VER")
	VALUES ("GAS_METEODATA_GAS_S".nextval, :new."ID", 'u', trans_id, :new."DISTRIBUTION_GASFK", :new."PREDDISTRIBUTION_GASFK", :new."PREDICTION_GASFK", :new."PREDZONE_GASFK", :new."SYS_VER");
END;
/

CREATE OR REPLACE TRIGGER "GAS_METEODATA_GAS_D"
BEFORE DELETE ON "GAS_METEODATA_GAS"
FOR EACH ROW
DECLARE
	trans_id number;
BEGIN
	ee_get_transaction_id(trans_id);
	INSERT INTO "GAS_METEODATA_GAS_C"(EE_CHANGE_ID, "EE_ITEM_ID", EE_CHANGE_TYPE, EE_TRANS_ID)
	VALUES ("GAS_METEODATA_GAS_S".nextval, :old."ID", 'd', trans_id);
END;
/
						
CREATE OR REPLACE VIEW "GAS_METEODATA_GAS_H" AS
SELECT t1."EE_ITEM_ID" "ID", t1.EE_TRANS_ID EE_TRANS_ID, t1."DISTRIBUTION_GASFK", t1."PREDDISTRIBUTION_GASFK", t1."PREDICTION_GASFK", t1."PREDZONE_GASFK", t1."SYS_VER"
FROM
"GAS_METEODATA_GAS_C" t1,
(SELECT EE_ITEM_ID, MAX(EE_CHANGE_ID) KEEP (DENSE_RANK FIRST ORDER BY COMMIT_ID desc, EE_CHANGE_ID desc) trans_change_id
  FROM "GAS_METEODATA_GAS_C" ti INNER JOIN ee_visible_transactions v ON EE_TRANS_ID = v.id
  GROUP BY EE_ITEM_ID) g
WHERE t1.EE_ITEM_ID=g.EE_ITEM_ID and t1.EE_CHANGE_ID=g.trans_change_id and t1.EE_CHANGE_TYPE <> 'd';
/

CREATE OR REPLACE TRIGGER "GAS_METEODATA_GAS_HU"
INSTEAD OF UPDATE 
ON "GAS_METEODATA_GAS_H"
FOR EACH ROW
DECLARE
  ex_nonupdatable EXCEPTION;
	PRAGMA EXCEPTION_INIT( ex_nonupdatable, -20001);
BEGIN
	UPDATE "GAS_METEODATA_GAS"
	SET "DISTRIBUTION_GASFK" = :new."DISTRIBUTION_GASFK", "PREDDISTRIBUTION_GASFK" = :new."PREDDISTRIBUTION_GASFK", "PREDICTION_GASFK" = :new."PREDICTION_GASFK", "PREDZONE_GASFK" = :new."PREDZONE_GASFK", "SYS_VER" = :new."SYS_VER"
	WHERE "ID" = :new."ID" AND EE_TRANS_ID = :new.EE_TRANS_ID;
	IF sql%rowcount <> 1 THEN
		raise_application_error(-20001, 'Pokus o update neplatného řádku, pokud chcete zapisovat do tohoto řádku, načtěte novou verzi dat');
	END IF;
END;
/

CREATE OR REPLACE TRIGGER "GAS_METEODATA_GAS_HI"
INSTEAD OF INSERT
ON "GAS_METEODATA_GAS_H"
FOR EACH ROW
BEGIN
	INSERT INTO "GAS_METEODATA_GAS" t1("ID", t1."DISTRIBUTION_GASFK", t1."PREDDISTRIBUTION_GASFK", t1."PREDICTION_GASFK", t1."PREDZONE_GASFK", t1."SYS_VER") VALUES (:new."ID", :new."DISTRIBUTION_GASFK", :new."PREDDISTRIBUTION_GASFK", :new."PREDICTION_GASFK", :new."PREDZONE_GASFK", :new."SYS_VER");
END;
/

CREATE OR REPLACE TRIGGER "GAS_METEODATA_GAS_HD"
INSTEAD OF DELETE
ON "GAS_METEODATA_GAS_H"
FOR EACH ROW
DECLARE
  ex_nonupdatable EXCEPTION;
	PRAGMA EXCEPTION_INIT( ex_nonupdatable, -20001);
BEGIN
	DELETE FROM "GAS_METEODATA_GAS"
	WHERE "ID" = :old."ID" AND EE_TRANS_ID = :old.EE_TRANS_ID;
	IF sql%rowcount <> 1 THEN
		raise_application_error(-20001, 'Pokus o update neplatného řádku, pokud chcete zapisovat do tohoto řádku, načtěte novou verzi dat');
	END IF;
END;
/

CREATE OR REPLACE TRIGGER "GAS_PREDPERMISSIONS_U"
BEFORE INSERT OR UPDATE ON "GAS_PREDPERMISSIONS"
FOR EACH ROW
DECLARE
	trans_id number;
BEGIN
	ee_get_transaction_id(trans_id);
	:new.EE_TRANS_ID := trans_id;
	INSERT INTO "GAS_PREDPERMISSIONS_C" t1(EE_CHANGE_ID, "EE_ITEM_ID", EE_CHANGE_TYPE, EE_TRANS_ID, t1."IDENTITYID", t1."PREDGROUPPDTFK", t1."READONLY", t1."SYS_VER")
	VALUES ("GAS_PREDPERMISSIONS_S".nextval, :new."ID", 'u', trans_id, :new."IDENTITYID", :new."PREDGROUPPDTFK", :new."READONLY", :new."SYS_VER");
END;
/

CREATE OR REPLACE TRIGGER "GAS_PREDPERMISSIONS_D"
BEFORE DELETE ON "GAS_PREDPERMISSIONS"
FOR EACH ROW
DECLARE
	trans_id number;
BEGIN
	ee_get_transaction_id(trans_id);
	INSERT INTO "GAS_PREDPERMISSIONS_C"(EE_CHANGE_ID, "EE_ITEM_ID", EE_CHANGE_TYPE, EE_TRANS_ID)
	VALUES ("GAS_PREDPERMISSIONS_S".nextval, :old."ID", 'd', trans_id);
END;
/
						
CREATE OR REPLACE VIEW "GAS_PREDPERMISSIONS_H" AS
SELECT t1."EE_ITEM_ID" "ID", t1.EE_TRANS_ID EE_TRANS_ID, t1."IDENTITYID", t1."PREDGROUPPDTFK", t1."READONLY", t1."SYS_VER"
FROM
"GAS_PREDPERMISSIONS_C" t1,
(SELECT EE_ITEM_ID, MAX(EE_CHANGE_ID) KEEP (DENSE_RANK FIRST ORDER BY COMMIT_ID desc, EE_CHANGE_ID desc) trans_change_id
  FROM "GAS_PREDPERMISSIONS_C" ti INNER JOIN ee_visible_transactions v ON EE_TRANS_ID = v.id
  GROUP BY EE_ITEM_ID) g
WHERE t1.EE_ITEM_ID=g.EE_ITEM_ID and t1.EE_CHANGE_ID=g.trans_change_id and t1.EE_CHANGE_TYPE <> 'd';
/

CREATE OR REPLACE TRIGGER "GAS_PREDPERMISSIONS_HU"
INSTEAD OF UPDATE 
ON "GAS_PREDPERMISSIONS_H"
FOR EACH ROW
DECLARE
  ex_nonupdatable EXCEPTION;
	PRAGMA EXCEPTION_INIT( ex_nonupdatable, -20001);
BEGIN
	UPDATE "GAS_PREDPERMISSIONS"
	SET "IDENTITYID" = :new."IDENTITYID", "PREDGROUPPDTFK" = :new."PREDGROUPPDTFK", "READONLY" = :new."READONLY", "SYS_VER" = :new."SYS_VER"
	WHERE "ID" = :new."ID" AND EE_TRANS_ID = :new.EE_TRANS_ID;
	IF sql%rowcount <> 1 THEN
		raise_application_error(-20001, 'Pokus o update neplatného řádku, pokud chcete zapisovat do tohoto řádku, načtěte novou verzi dat');
	END IF;
END;
/

CREATE OR REPLACE TRIGGER "GAS_PREDPERMISSIONS_HI"
INSTEAD OF INSERT
ON "GAS_PREDPERMISSIONS_H"
FOR EACH ROW
BEGIN
	INSERT INTO "GAS_PREDPERMISSIONS" t1("ID", t1."IDENTITYID", t1."PREDGROUPPDTFK", t1."READONLY", t1."SYS_VER") VALUES (:new."ID", :new."IDENTITYID", :new."PREDGROUPPDTFK", :new."READONLY", :new."SYS_VER");
END;
/

CREATE OR REPLACE TRIGGER "GAS_PREDPERMISSIONS_HD"
INSTEAD OF DELETE
ON "GAS_PREDPERMISSIONS_H"
FOR EACH ROW
DECLARE
  ex_nonupdatable EXCEPTION;
	PRAGMA EXCEPTION_INIT( ex_nonupdatable, -20001);
BEGIN
	DELETE FROM "GAS_PREDPERMISSIONS"
	WHERE "ID" = :old."ID" AND EE_TRANS_ID = :old.EE_TRANS_ID;
	IF sql%rowcount <> 1 THEN
		raise_application_error(-20001, 'Pokus o update neplatného řádku, pokud chcete zapisovat do tohoto řádku, načtěte novou verzi dat');
	END IF;
END;
/
-- 3: závislé objekty (lokalizace);
-- 4: číselníky;
INSERT INTO "GAS_WFSTATE" ("ID", "SYS_VER", "ACTIVE", "CAPTION", "DESCRIPTION", "KEY", "SHORTCAPTION") VALUES ('1', 1, '1', 'Připraveno', 'Akce připravena ke spuštění', 'READY', 'Připr.');
INSERT INTO "GAS_WFSTATE" ("ID", "SYS_VER", "ACTIVE", "CAPTION", "DESCRIPTION", "KEY", "SHORTCAPTION") VALUES ('2', 1, '1', 'Spuštěno', 'Akce byla spuštěna', 'RUNNING', 'Spuštěno');
INSERT INTO "GAS_WFSTATE" ("ID", "SYS_VER", "ACTIVE", "CAPTION", "DESCRIPTION", "KEY", "SHORTCAPTION") VALUES ('3', 1, '1', 'Chyba', 'Při běhu akce se vyskytla chyba', 'ERR', 'Chyba');
INSERT INTO "GAS_WFSTATE" ("ID", "SYS_VER", "ACTIVE", "CAPTION", "DESCRIPTION", "KEY", "SHORTCAPTION") VALUES ('4', 1, '1', 'Dokončeno', 'Akce doběhla úspěšně bez chyb', 'DONE', 'Dokonč.');
INSERT INTO "GAS_PREDDISTSYSTEM_GAS" ("ID", "SYS_VER", "DISTRIBUTION_GASFK", "PREDICTION_GASFK", "ZONETYPE") VALUES ('1', 1, '101001', '2', '1');
INSERT INTO "GAS_PREDDISTSYSTEM_GAS" ("ID", "SYS_VER", "DISTRIBUTION_GASFK", "PREDICTION_GASFK", "ZONETYPE") VALUES ('2', 1, '101003', '1', '1');
INSERT INTO "GAS_PREDDISTSYSTEM_GAS" ("ID", "SYS_VER", "DISTRIBUTION_GASFK", "PREDICTION_GASFK", "ZONETYPE") VALUES ('3', 1, '101004', '1', '1');
INSERT INTO "GAS_PREDDISTSYSTEM_GAS" ("ID", "SYS_VER", "DISTRIBUTION_GASFK", "PREDICTION_GASFK", "ZONETYPE") VALUES ('4', 1, '101005', '1', '1');
INSERT INTO "GAS_PREDDISTSYSTEM_GAS" ("ID", "SYS_VER", "DISTRIBUTION_GASFK", "PREDICTION_GASFK", "ZONETYPE") VALUES ('5', 1, '101006', '1', '1');
INSERT INTO "GAS_CONSVARIANT_GAS" ("ID", "SYS_VER", "ACTIVE", "KEY", "CAPTION", "SHORTCAPTION", "DESCRIPTION", "EXTERNALID") VALUES ('1', 1, '1', 'tech', 'technologie', 'technologie', 'technologie', '1');
INSERT INTO "GAS_CONSVARIANT_GAS" ("ID", "SYS_VER", "ACTIVE", "KEY", "CAPTION", "SHORTCAPTION", "DESCRIPTION", "EXTERNALID") VALUES ('2', 1, '1', 'heat', 'vytápění', 'vytápění', 'vytápění', '2');
INSERT INTO "GAS_CONSVARIANT_GAS" ("ID", "SYS_VER", "ACTIVE", "KEY", "CAPTION", "SHORTCAPTION", "DESCRIPTION", "EXTERNALID") VALUES ('3', 1, '1', 'irregular', 'nepravidelný', 'nepravidelný', 'nepravidelný', '3');
UPDATE "GAS_PREDZONE_GAS" SET "PREDICTION_GASFK" = '1', "DISTRIBUTION_GASFK" = '100001', "CAPTION" = 'Celá ČR', "A_ZONEAGGREGATEALL_DB" = '1', "A_ISVIRTUAL_DB" = '0' WHERE "ID" = '1'/
INSERT INTO "GAS_PREDZONE_GAS" ("ID", "SYS_VER", "PREDICTION_GASFK", "DISTRIBUTION_GASFK", "CAPTION", "A_ZONEAGGREGATEALL_DB", "A_ISVIRTUAL_DB") VALUES ('2', 1, '1', '100001', 'Celá ČR virtual', '0', '1');
INSERT INTO "GAS_PREDZONE_GAS" ("ID", "SYS_VER", "PREDICTION_GASFK", "DISTRIBUTION_GASFK", "CAPTION", "A_ZONEAGGREGATEALL_DB", "A_ISVIRTUAL_DB") VALUES ('3', 1, '2', '100001', 'Celá ČR', '1', '0');
INSERT INTO "GAS_PREDZONE_GAS" ("ID", "SYS_VER", "PREDICTION_GASFK", "DISTRIBUTION_GASFK", "CAPTION", "A_ZONEAGGREGATEALL_DB", "A_ISVIRTUAL_DB") VALUES ('4', 1, '2', '100001', 'Celá ČR virtual', '0', '1');

DECLARE
  trans_id NUMBER(20, 0);
BEGIN
  ee_get_transaction_id(trans_id);
  UPDATE ee_transactions SET commit_id = enif_commitid_seq.nextval, commit_ts = systimestamp
  WHERE id = trans_id;
END;
/

commit;
